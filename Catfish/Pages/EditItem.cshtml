@page "/items/edit/{id:Guid}"
@model Catfish.Pages.ItemDetailsModel

@using Catfish.Core.Authorization.Requirements;
@using Microsoft.AspNetCore.Authorization;

@inject Piranha.Manager.ManagerLocalizer Localizer
@inject Catfish.Services.ISubmissionService _submissionService;
@inject Catfish.Core.Services.IWorkflowService _workflowService;
@inject Microsoft.AspNetCore.Authorization.IAuthorizationService _authorizationService;
@inject Catfish.Services.IEntityTemplateService _entityTemplateService;
@{
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
}
@{
    var item = Model.Item;

    var rootDataItem = item.GetRootDataItem(false);
    string formPostUrl = "/api/items/EditSubmissionForm";
    string suffix = Guid.NewGuid().ToString();
    var currentStatus = _submissionService.GetStatus(item.StatusId).Status;
    var template = _entityTemplateService.GetTemplate(item.TemplateId);
    var allPostActions = _workflowService.GetPostActions(template, "Update", "Details");
    string successMessage = "";// string.IsNullOrEmpty(Model.SubmissionConfirmation.Value) ? "" : Model.SubmissionConfirmation.Value.ToString();
   
}

@{
    var associatedItems = item.DataContainer
.Where(di => di.IsRoot = false)
.OrderByDescending(di => di.Created)
.ToList();
}

@if ((await _authorizationService.AuthorizeAsync(User, template, new List<IAuthorizationRequirement>() { TemplateOperations.Update }))
.Succeeded)
{
<form id="submissionEditForm_@suffix" method="post" action="@formPostUrl" enctype="multipart/form-data">
    <input data-val="true" data-val-required="The TemplateId field is required."
           id="templateId_@suffix" name="entityTemplateId" type="hidden"
           value="@item.TemplateId">
    <input data-val="true" data-val-required="The CollectionId field is required."
           id="primaryCollectionId_@suffix" name="collectionId" type="hidden"
           value="@item.PrimaryCollectionId">
    <div class="container">
        <div class="card">
            <div class="card-header">
                <h2 class="item-heading">@Html.DisplayFor(model => rootDataItem.Name, rootDataItem.Name.GetType().ToString()) @item.UserEmail</h2>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-sm-4">
                        <div class="form-group">
                            <label>@Localizer.General["Status"]</label>
                            <div class="alert alert-info">
                                <span>@currentStatus</span>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-8">
                        <div class="form-group">
                            <label>@Localizer.General["Actions"]</label>
                            <div>
                                @foreach (var postAction in allPostActions)
                                {
                                    if ((await _authorizationService.AuthorizeAsync(User, template, new List<IAuthorizationRequirement>() { TemplateOperations.Update }))
                                    .Succeeded)
                                    {
                                        var buttonLable = postAction.StateMappings.Where(sm => sm.Current == item.StatusId).Select(sm => sm.ButtonLabel).FirstOrDefault();
                                        var state = postAction.StateMappings.Where(sm => sm.ButtonLabel == postAction.ButtonLabel).FirstOrDefault();
                                        if (buttonLable != null)
                                        {
                                            if (postAction.PopUps.Any())
                                            {
                                                foreach (var popup in postAction.PopUps)
                                                {
                                                    <input id="@buttonLable" class="btn btn-success launch-modal" name="@postAction.ButtonLabel" type="button" value="@postAction.ButtonLabel" data-toggle="modal" data-target="submissionEditModal_@suffix" />
                                                    <div id="submissionEditModal_@suffix" class="modal fade" role="dialog">

                                                        <div>
                                                            <div class="modal-dialog">
                                                                @*Modal content*@
                                                                <div class="modal-content">
                                                                    <div class="modal-header">
                                                                        <h5 class="modal-title" id="myModalLabel">@popup.Title</h5>
                                                                        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                                                                    </div>
                                                                    <div class="modal-body">
                                                                        <div class="card-body">
                                                                            <div class="form-group">
                                                                                <p>@popup.Body</p>
                                                                                @{
                                                                                    if (popup.Message.Any())
                                                                                    {
                                                                                        <p class="text-info"><small><strong>Note : </strong>@popup.Message</small></p>
                                                                                    }
                                                                                }
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                    <div class="modal-footer">
                                                                        @{
                                                                            foreach (var button in popup.Buttons)
                                                                            {
                                                                                if (button.Text == "Cancel")
                                                                                {
                                                                                    <button id="close-modal-button_@suffix" type="button" class="btn btn-primary" data-dismiss="modal">@button.Text</button>
                                                                                }
                                                                                else
                                                                                {
                                                                                    <button id="@buttonLable" type="submit" class="btn btn-success" onclick="submitEditWorkflowForm('@state.Next','@state.ButtonLabel','@suffix', '@successMessage');">@button.Text</button>
                                                                                }
                                                                            }
                                                                        }
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                            }
                                            else
                                            {
                                                <input id="@buttonLable" class="btn btn-success" name="@buttonLable" type="submit" value="@buttonLable" onclick="submitEditWorkflowForm('@state.Next','@state.ButtonLabel','@suffix', '@successMessage');" />
                                            }

                                        }

                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
                <div class="submission-edit-form-block">
                    @Html.EditorFor(model => rootDataItem, rootDataItem.GetType().ToString())
                </div>
            </div>

        </div>
    </div>
</form>
    <div id="submission-result-message_@suffix"></div>
}
else
{
    var errorMessage = string.IsNullOrWhiteSpace(Model.AuthorizationFailureMessage.Value) ? "Authorization failed." : Model.AuthorizationFailureMessage.Value;
    <div class="alert alert-danger">@Html.Raw(errorMessage)</div>
}
