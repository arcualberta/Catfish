@page
@model Catfish.Pages.LoginPageModel
@inject Catfish.Helper.ICatfishAppConfiguration _catfishAppConfig;
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor _httpContextAccessor
@{

    ViewBag.Title = "Login";
    bool allowGoogleLogin = _catfishAppConfig.IsAllowGoogleLogin();
   // string AllowDomains = _catfishAppConfig.GetAllowDomain();
    string DeniedMessage = _catfishAppConfig.GetUnauthorizedLoginMessage();
    bool enabledLocalLogin = _catfishAppConfig.GetEnabledLocalLogin();
    //var q = _httpContextAccessor.HttpContext.Request.Query;
    //string ret = q.Keys.Contains("ret") ? q["ret"].ToString() : "/";
    string externalLoginDivClass = enabledLocalLogin ? "col-md" : "col-md-12";

    Layout = "..\\Views\\Shared\\_Layout";
}


<div class="container">
    <div class="row">
        <article class="col-md-6">

            @if (enabledLocalLogin)
            {
                <h2>Local Account Login</h2>
                <hr />
                <div class="row">
                    <div class="col-sm-6">
                        <form method="post">
                            @Html.AntiForgeryToken()
                            <div class="form-group">
                                <label>User name</label>
                                @*<input type="text" name="Username" class="form-control" />*@
                                @Html.TextBoxFor(m => m.Username, null, new { @class = "form-control" })
                            </div>
                            <div class="form-group">
                                <label>Password</label>
                                @*<input type="password" name="Password" class="form-control" />*@
                                @Html.PasswordFor(m => m.Password, new { @class = "form-control" })
                            </div>
                            <button class="btn btn-success">Login</button>
                        </form>
                        <div style="margin-top:20px;">
                            <a href="./forgotPassword">Forgot Password?</a>
                        </div>
                        <div style="margin-bottom:20px;">
                            <a href="./changepassword">Change my password</a>
                        </div>
                    </div>
                </div>
            }
        </article>
        @Html.AntiForgeryToken()
        @if (allowGoogleLogin)
        {<article class="@externalLoginDivClass">
                <div class="grid_6 box login">
                    <div id="socialLoginDiv">
                        <h2>External Login </h2>
                        <hr />
                        @*<div class="g-signin2" data-onsuccess="onSignIn"></div>*@
                        @*//asp-action="ExternalLogin" asp-controller="Account"*@
                    <form asp-page-handler="externalLogin" method="post" asp-route-returnUrl="@Model.GetReturnUrl()">
                        @foreach (var provider in Model.ExternalLogins)
                        {
                            <input type="submit" class=" btn-primary goggleLoginBtn fa fa-google btn" value="@provider.Name" title="Login using your @provider.DisplayName account" />
                        }
                    </form>

                    </div>
                </div>
                <div class="alert alert-warning alert-dismissible allowDomain" style="visibility: hidden; text-align:center;">
                    <button type="button" class="close" data-dismiss="alert">&times;</button>
                    <strong>Warning!</strong> @DeniedMessage
                </div>
            </article>
        }
    </div>
</div>


@*<script>
  // var allowDomains = ('atsign AllowDomains').split(',');
 //    var allowed = true;


 /* function onSignIn(googleUser) {
       var profile = googleUser.getBasicProfile();

     //May 11 2020 --check if user's email is allow -- for example -- restricted to uofa user only --
     for (let i = 0; i < allowDomains.length; i++) {
         let _domain = allowDomains[i].trim();
         if (profile.getEmail().includes(_domain)) {
             allowed = true;
             break;
         }
         else { allowed = false;}
     }


     if (!allowed) {
       
         $(".allowDomain").css("visibility", "visible");
         var auth2 = gapi.auth2.getAuthInstance();
         auth2.signOut().then(function () {
             
             auth2.disconnect();
         });
         auth2.disconnect();
         return;
     } else {
         $(".allowDomain").css("visibility", "hidden");
         var auth2 = gapi.auth2.getAuthInstance();
         if (auth2.isSignedIn) {
         
             var user = new Object();
             user.Login = profile.getEmail();
             user.Password = profile.getId();
             user.Email = profile.getEmail();
             user.Firstname = profile.getGivenName();
             user.Surname = profile.getFamilyName();

             $.ajax({
                 type: 'POST',
                 url: "/CatfishUser",

                 data: { userModel: user },
                 headers: {
                     RequestVerificationToken:
                         $('input:hidden[name="__RequestVerificationToken"]').val()
                 }
             }).done(function (result) {
                 window.location.href = " 'atsign' ret" 
             });
         }
     }
} */

</script>*@