@page "/items/{id:Guid}"
@model Catfish.Pages.ItemDetailsModel
@using Catfish.Core.Authorization.Requirements;
@using Microsoft.AspNetCore.Authorization;

@inject Piranha.Manager.ManagerLocalizer Localizer
@inject Catfish.Services.ISubmissionService _submissionService;
@inject Catfish.Core.Services.IWorkflowService _workflowService;
@inject Microsoft.AspNetCore.Authorization.IAuthorizationService _authorizationService;
@inject Catfish.Services.IEntityTemplateService _entityTemplateService;
@{
    var item = Model.Item;

    var rootDataItem = item.GetRootDataItem(false);

    string suffix = Guid.NewGuid().ToString();
    var currentStatus = _submissionService.GetStatus(item.StatusId).Status;
    var template = _entityTemplateService.GetTemplate(item.TemplateId);
    var allPostActions = _workflowService.GetAllChangeStatePostActions(template, item.StatusId.Value);
}

@*Specify the status of the submission, followed by the last updated date*@

@*Display the content of the main submission (i.e. the data-item with is-root=true) *@


@*
    Display the contents of all associated data items, which are identified by is-rro=false.

*@
@{
var associatedItems = item.DataContainer
.Where(di => di.IsRoot = false)
.OrderByDescending(di => di.Created)
.ToList();
}
@if ((await _authorizationService.AuthorizeAsync(User, template, new List<IAuthorizationRequirement>() { TemplateOperations.Read }))
.Succeeded)
{
    <div class="container">
        <div class="card">
            <div class="card-header">
                <h2 class="item-heading">@Html.DisplayFor(model => rootDataItem.Name, rootDataItem.Name.GetType().ToString()) @item.UserEmail</h2>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-sm-4">
                        <div class="form-group">
                            <label>@Localizer.General["Status"]</label>
                            <div class="alert alert-info">
                                <span>@currentStatus</span>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-8">
                        <div class="form-group">
                            <label>@Localizer.General["Actions"]</label>
                            <div >
                                @foreach (var postAction in allPostActions)
                                {
                                    if ((await _authorizationService.AuthorizeAsync(User, template, new List<IAuthorizationRequirement>() { TemplateOperations.ChangeState }))
                                    .Succeeded)
                                    {
                                        var buttonLable = postAction.StateMappings.Where(sm => sm.Current == item.StatusId).Select(sm => sm.ButtonLabel).FirstOrDefault();
                                        if (postAction.PopUps.Any())
                                        {
                                            foreach (var popup in postAction.PopUps)
                                            {
                                                <input id="@buttonLable" class="btn btn-success launch-modal" name="@buttonLable" type="button" value="@buttonLable" data-toggle="modal" data-target="#changeStateModal" />
                                                <div id="changeStateModal" class="modal fade" role="dialog">

                                                    <div>
                                                        <div class="modal-dialog">
                                                            @*Modal content*@
                                                            <div class="modal-content">
                                                                <div class="modal-header">
                                                                    <h5 class="modal-title" id="myModalLabel">@popup.Title</h5>
                                                                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                                                                </div>
                                                                <div class="modal-body">
                                                                    <div class="card-body">
                                                                        <div class="form-group">
                                                                            <p>@popup.Body</p>
                                                                            @{
                                                                                if (popup.Message.Any())
                                                                                {
                                                                                    <p class="text-info"><small><strong>Note : </strong>@popup.Message</small></p>
                                                                                }
                                                                            }
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                                <div class="modal-footer">
                                                                    @{
                                                                        foreach (var button in popup.Buttons)
                                                                        {
                                                                            if (button.Text == "Cancel")
                                                                            {
                                                                                <button id="close-modal-button_@suffix" type="button" class="btn btn-primary" data-dismiss="modal">@button.Text</button>
                                                                            }
                                                                            else
                                                                            {
                                                                                <button id="@buttonLable" type="submit" class="btn btn-success" @*onclick="submitWorkflowForm('@suffix', '@successMessage');"*@>@button.Text</button>
                                                                            }
                                                                        }
                                                                    }
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        }
                                        else
                                        {
                                            <input id="@buttonLable" class="btn btn-success" name="@buttonLable" type="submit" value="@buttonLable" @*onclick="submitWorkflowForm('@suffix', '@successMessage');"*@ />
                                        }
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
                <div class="submission-form-block">
                    @Html.DisplayFor(model => rootDataItem, rootDataItem.GetType().ToString())
                </div>
            </div>

        </div>
    </div>



    @*<div class="container">
            <h2 class="item-heading">@Html.DisplayFor(model => rootDataItem.Name, rootDataItem.Name.GetType().ToString())</h2>
            <div class="well form-horizontal">
                <div class="alert alert-info">
                    <span>Status :</span>
                    <span>@currentStatus</span>
                </div>
            </div>
            <div class="submission-form-block">
                @Html.DisplayFor(model => rootDataItem, rootDataItem.GetType().ToString())
            </div>
        </div>*@
    @*Display each associated item in a separate element like a bootstrap panel.*@
}
