@model Catfish.Core.Models.Contents.Fields.TableField
@using Catfish.Helper;
@using Catfish.Core.Models.Contents.Fields;

@Html.HiddenFor(model => model.ModelType)
@Html.HiddenFor(model => model.Id)

@{ 
    string templateId = "tf-template-" + Model.Id;
    var modelNamePrefix = Html.NameFor(model => model);
}

<table id="@templateId"
       data-name-prefix="@modelNamePrefix"
       class="tf-template" 
       style="display:none">

    <tr>
        @for (int i = 0; i < Model.TableHead.Fields.Count; ++i)
        {
            BaseField field = Model.TableHead.Fields[i];
            Dictionary<string, object> viewData = FieldRenderingHelper.CreateViewData(field, null);

           <td data-ref-id="@field.Id">
                @Html.EditorFor(model => model.TableHead.Fields[i], Model.TableHead.Fields[i].GetType().ToString(), viewData)
            </td>
        }
    </tr>
</table>

<table class="table table-field @Model.CssClass">
    <thead>
        <tr>
            @foreach (var cell in Model.TableHead.Fields)
            {
                <th>
                    @Html.Raw(cell.Name.ConcatenatedContent)

                    @if (cell.Required)
                    {<span class="required"></span>}
                    else
                    {<span class="required" style="display:none"></span>}

                </th>
            }
        </tr>
    </thead>
    <tbody>
        @for (var r = 0; r < Model.TableData.Count; ++r)
        {
            var row = Model.TableData[r];
            <tr>
                @for (var c = 0; c < row.Fields.Count; ++c)
                {
                    string fieldRootId = null;
                    Dictionary<string, object> viewData = FieldRenderingHelper.CreateViewData(Model.TableData[r].Fields[c], fieldRootId);

                    <td>
                        @Html.EditorFor(model => Model.TableData[r].Fields[c], Model.TableData[r].Fields[c].GetType().ToString(), viewData)
                    </td>
                }
            </tr>
        }

    </tbody>
</table>