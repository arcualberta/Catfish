@model Catfish.Core.Models.Contents.Fields.FieldContainerReference
@using Catfish.Core.Models;
@using Core.Models.Contents;
@using Core.Models.Contents.Fields;

@Html.HiddenFor(model => model.ModelType)
@Html.HiddenFor(model => model.Id)
@Html.HiddenFor(model => model.RefType)
@Html.HiddenFor(model => model.RefId)

@if (Model.Exclude)
    return;

@{
    ItemTemplate template = ViewData["template"] as ItemTemplate;
    Model.ChildForm = Model.RefType == FieldContainerReference.eRefType.data
        ? template.DataContainer.FirstOrDefault(form => form.Id == Model.RefId) as FieldContainer
        : template.MetadataSets.FirstOrDefault(form => form.Id == Model.RefId) as FieldContainer;

}

@Html.HiddenFor(model => model.ChildForm.ModelType)
@Html.HiddenFor(model => model.ChildForm.Id)

@for (int i = 0; i < Model.ChildForm.Fields.Count; ++i)
{
    <b>@Html.LabelFor(model => Model.ChildForm.Fields[i], Model.ChildForm.Fields[i].GetName())</b>
    @Html.EditorFor(model => Model.ChildForm.Fields[i],
                                 Model.ChildForm.Fields[i].GetType().ToString(),
                                 ViewData)
    <br />
}