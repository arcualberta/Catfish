{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./wwwroot/assets/js/catfish.editFieldForm.js"],"names":["Vue","use","Vuelidate","document","getElementById","piranha","editFieldForm","el","components","draggable","quillEditor","data","itemId","finishedGET","getString","getFieldDefs","names","descriptions","fields","fields_type","id","modelType","TEXTFIELD_TYPE","TEXTAREA_TYPE","CHECKBOX_TYPE","RADIO_TYPE","DROPDOWN_TYPE","INFOSECTION_TYPE","DATE_TYPE","DECIMAL_TYPE","INTEGER_TYPE","MONOLINGUAL_TEXTFIELD_TYPE","textfieldTemplate","textAreaTemplate","radioTemplate","checkboxTemplate","dropdownTemplate","fileAttachmentTemplate","displayFieldTemplate","datePickerTemplate","numberPickerTemplate","monolingualTextFieldTemplate","optionItemTemplate","dropdowns","fieldTypes","DisplayLabel","$type","rightColumnOptions","value","text","fileTypes","saveStatus","saveSuccessfulLabel","saveFailedLabel","saveFieldFormButtonLabel","validations","required","Values","$values","$each","Value","requiredIf","fieldModel","textModel","Name","Options","OptionText","methods","checkValidity","event","preventDefault","$v","$invalid","console","log","saveFieldForm","validateState","name","indexOrGuid","attribute","$dirty","$error","validateFieldState","fieldIndex","secondIndex","touchNestedItem","isNaN","$touch","onDropdownChange","chosenFieldType","tmpId","Id","$set","JSON","parse","stringify","sortItem","collapsingSections","getElementsByClassName","shownSectionIndex","previousSection","nextSection","i","length","classList","contains","from","to","newIndex","split","$","collapse","isCollapsed","oldIndex","prevId","nextId","cloneItem","newItem","uuidv1","showDescription","hasOtherOption","checkAllFileTypes","field","indexOf","index","splice","checkCheckboxState","checked","toggleDropdown","fieldId","lastDropdownIdOpened","Object","keys","dropdownId","addNewOption","newOptionItemTemplate","languageOptionItem","push","selectOptionAsDefault","optionIndex","Selected","optionItem","addOtherOption","isDisabled","removeOption","deleteField","addDescription","removeDescription","load","Promise","resolve","reject","permissions","fetch","baseUrl","then","fdResponse","json","fieldDefsResult","defaultField","languageIndex","Description","response","result","Fields","ModelType","error","created","window","location","href","substring","lastIndexOf","ready","popover","on","test"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"main\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([\"./wwwroot/assets/js/catfish.editFieldForm.js\",\"vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import draggable from 'vuedraggable';\r\n//import 'quill/dist/quill.core.css'\r\n//import 'quill/dist/quill.snow.css'\r\n//import 'quill/dist/quill.bubble.css'\r\n\r\nimport { quillEditor } from 'vue-quill-editor'\r\nimport { v1 as uuidv1 } from 'uuid';\r\n\r\nimport { required, requiredIf } from 'vuelidate/lib/validators'\r\nimport Vuelidate from 'vuelidate'\r\nVue.use(Vuelidate)\r\n\r\n/**\r\n * Javascript Vue code for creating the editable form from existing data in FieldContainerEdit.cshtml.\r\n * It is modelled after the file piranha.pagelist.js in Piranha's source code.\r\n */\r\n\r\n\r\n/**\r\n * This check makes sure the file is only run on the page with\r\n * the element. Not a huge deal, can be removed if it's causing issues.\r\n */\r\nif (document.getElementById(\"edit-field-form-page\")) {\r\n    piranha.editFieldForm = new Vue({\r\n        el: '#edit-field-form-page',\r\n        components: {\r\n            draggable,\r\n            quillEditor\r\n        },\r\n        data() {\r\n            return {\r\n                itemId: null,\r\n                finishedGET: false,\r\n\r\n                //api strings\r\n                getString: \"manager/api/forms/\",\r\n                //this one is for the default templates\r\n                getFieldDefs: \"manager/api/forms/fielddefs\",\r\n                //postString: \"manager/items/save\",\r\n\r\n                names: null,\r\n                descriptions: null,\r\n                fields: null,\r\n                fields_type: null,\r\n                id: null,\r\n                modelType: null,\r\n\r\n                //missing file attachment?\r\n                TEXTFIELD_TYPE: \"Catfish.Core.Models.Contents.Fields.TextField, Catfish.Core\",\r\n                TEXTAREA_TYPE: \"Catfish.Core.Models.Contents.Fields.TextArea, Catfish.Core\",\r\n                CHECKBOX_TYPE: \"Catfish.Core.Models.Contents.Fields.CheckboxField, Catfish.Core\",\r\n                RADIO_TYPE: \"Catfish.Core.Models.Contents.Fields.RadioField, Catfish.Core\",\r\n                DROPDOWN_TYPE: \"Catfish.Core.Models.Contents.Fields.SelectField, Catfish.Core\",\r\n                INFOSECTION_TYPE: \"Catfish.Core.Models.Contents.Fields.InfoSection, Catfish.Core\",\r\n\r\n                DATE_TYPE: \"Catfish.Core.Models.Contents.Fields.DateField, Catfish.Core\",\r\n                DECIMAL_TYPE: \"Catfish.Core.Models.Contents.Fields.DecimalField, Catfish.Core\",\r\n                INTEGER_TYPE: \"Catfish.Core.Models.Contents.Fields.IntegerField, Catfish.Core\",\r\n                MONOLINGUAL_TEXTFIELD_TYPE: \"Catfish.Core.Models.Contents.Fields.MonolingualTextField, Catfish.Core\",\r\n\r\n                //templates\r\n                textfieldTemplate: null,\r\n                textAreaTemplate: null,\r\n                radioTemplate: null,\r\n                checkboxTemplate: null,\r\n                dropdownTemplate: null,\r\n                fileAttachmentTemplate: null,\r\n                displayFieldTemplate: null,\r\n\r\n                datePickerTemplate: null,\r\n                numberPickerTemplate: null,\r\n                monolingualTextFieldTemplate: null,\r\n\r\n                optionItemTemplate: null,\r\n\r\n\r\n                dropdowns: {},\r\n                //temp, need to call an api for these\r\n                fieldTypes: [\r\n                    { DisplayLabel: 'Select One', $type: null },\r\n                    //{\r\n                    //    value: \"Catfish.Core.Models.Contents.Fields.TextField, Catfish.Core\",\r\n                    //    text: 'Short Answer',\r\n                    //    modelType: 'TextField'\r\n                    //},\r\n                    //{\r\n                    //    value: \"Catfish.Core.Models.Contents.Fields.TextArea, Catfish.Core\",\r\n                    //    text: 'Long Answer',\r\n                    //    modelType: 'TextArea'\r\n                    //},\r\n                    //{\r\n                    //    value: \"Catfish.Core.Models.Contents.Fields.RadioField, Catfish.Core\",\r\n                    //    text: 'Multiple Choice',\r\n                    //    modelType: 'Radio'\r\n                    //},\r\n                    //{\r\n                    //    value: \"Catfish.Core.Models.Contents.Fields.CheckboxField, Catfish.Core\",\r\n                    //    text: 'Check Box',\r\n                    //    modelType: 'Checkbox'\r\n                    //},\r\n                    //{\r\n                    //    value: \"Catfish.Core.Models.Contents.Fields.SelectField, Catfish.Core\",\r\n                    //    text: 'Dropdown List',\r\n                    //    modelType: 'Dropdown'\r\n                    //},\r\n                    //{\r\n                    //    value: \"Catfish.Core.Models.Contents.Fields.FileAttachment, Catfish.Core\",\r\n                    //    text: 'File Upload',\r\n                    //    modelType: 'FileAttachment'\r\n                    //},\r\n                    //{\r\n                    //    value: \"Catfish.Core.Models.Contents.Fields.InfoSection, Catfish.Core\",\r\n                    //    text: 'Display Text',\r\n                    //    modelType: 'DisplayField'\r\n                    //}\r\n                ],\r\n\r\n                rightColumnOptions: [\r\n                    {\r\n                        value: 0,\r\n                        text: \"Add Question\"\r\n                    },\r\n                    {\r\n                        value: 1,\r\n                        text: \"Add Section (TBA)\"\r\n                    }\r\n                ],\r\n\r\n                //will be sent through API, temp\r\n                fileTypes: [\r\n                    \"PDF\", \"DOC\", \"DOCX\", \"PS\", \"EPS\", \"JPG\", \"PNG\"\r\n                ],\r\n\r\n\r\n                saveStatus: 0,\r\n                //TODO: make a file of constant strings\r\n                saveSuccessfulLabel: \"Save Successful\",\r\n                saveFailedLabel: \"Failed to Save\",\r\n                saveFieldFormButtonLabel: \"Save\",\r\n            }\r\n        },\r\n        validations: {\r\n            names: {\r\n                required,\r\n                    Values: {\r\n                        $values: {\r\n                            $each: {\r\n                                Value: {\r\n                                    required,\r\n                                }\r\n                            }\r\n                        }\r\n\t\t\t\t    }\r\n            },\r\n            descriptions: {\r\n                Values: {\r\n                    $values: {\r\n                        $each: {\r\n                            Value: {\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            fields: {\r\n                $each: {\r\n                    Values: {\r\n\r\n                        //currently the display text option can be submitted regardless of any text or not\r\n                        //it errors on reading an array instead of an empty string on creation, need different place to store it\r\n\r\n                        //all start with this value at Array(0)\r\n                        //want Array > 0 when the field type is radio/checkbox/dropdown/fileAttachment\r\n                        required: requiredIf(function (fieldModel) {\r\n                            return (fieldModel.$type == this.RADIO_TYPE || fieldModel.$type == this.CHECKBOX_TYPE ||\r\n                                fieldModel.$type == this.DROPDOWN_TYPE || fieldModel.$type ==\r\n                                'Catfish.Core.Models.Contents.Fields.FileAttachment, Catfish.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'\r\n                            )\r\n                        }),\r\n\r\n                        $values: {\r\n\r\n                            \r\n\r\n                            //only need the object for radio/checkbox/dropdown's inner content\r\n                            $each: {\r\n                                text: {\r\n                                    required: requiredIf(function (textModel) {\r\n                                        //this might not work with api update, hoping to store mc/radio/dropdown in different section from file attachment\r\n                                        return (textModel.text != null )  //(typeof (textModel) == 'object');\r\n                                    })\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                    Name: {\r\n                        Values: {\r\n                            $values: {\r\n                                $each: {\r\n                                    Value: {\r\n                                        required\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                    Options: {\r\n                        $values: {\r\n                            $each: {\r\n                                OptionText: {\r\n                                    Values: {\r\n                                        $values: {\r\n                                            $each: {\r\n                                                Value: {\r\n                                                    required\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n                }\r\n            }\r\n        },\r\n        methods: {\r\n\r\n            /**\r\n\t\t\t * Checks all the inputs to make sure the data is valid\r\n\t\t\t * @returns true is valid, false is invalid.\r\n\t\t\t **/\r\n            checkValidity(event) {\r\n                event.preventDefault();\r\n\r\n                if (this.$v.$invalid) {\r\n                    console.log(\"something is invalid\", this.$v);\r\n                } else {\r\n                    console.log(\"all good!\");\r\n                    this.saveFieldForm(event);\r\n\t\t\t\t}\r\n\r\n            },\r\n\r\n            /**\r\n\t\t\t * Checks that the value matches its requirements from Vuelidate\r\n\t\t\t  * (ie required, is a string, etc)\r\n\t\t\t * @param name the name of the v-model binded to.\r\n\t\t\t */\r\n            validateState(name, indexOrGuid = null, attribute = null) {\r\n                if (indexOrGuid != null) {\r\n                    //this is a $each situation - array\r\n                    const { $dirty, $invalid } = this.$v[name][attribute].$values.$each[indexOrGuid].Value;\r\n                    return $dirty ? !$invalid : null;\r\n                } else {\r\n                    const { $dirty, $error } = this.$v[name];\r\n                    return $dirty ? !$error : null;\r\n                }\r\n            },\r\n\r\n            /**\r\n             * TODO: work this one and above into a generic function\r\n             * This one is for fields only, very hardcody bc it has so many embedded attributes\r\n             * @param {any} fieldIndex\r\n             * @param {any} name\r\n             * @param {any} secondIndex\r\n             */\r\n            validateFieldState(fieldIndex, name, secondIndex = null) {\r\n                if (secondIndex == null) {\r\n                    const { $dirty, $invalid } = this.$v.fields.$each[fieldIndex][name];\r\n                    return $dirty ? !$invalid : null;\r\n                } else {\r\n                    const { $dirty, $invalid } = this.$v.fields.$each[fieldIndex][name].Values.$values.$each[secondIndex].Value;\r\n                    return $dirty ? !$invalid : null;\r\n\t\t\t\t}\r\n\r\n\t\t\t},\r\n\r\n\r\n            /**\r\n\t\t\t * Touches nested items from Vuex so validation works properly.\r\n\t\t\t */\r\n            touchNestedItem(name, indexOrGuid = null, attribute = null, event = null) {\r\n                if (indexOrGuid != null) {\r\n                    if (isNaN(indexOrGuid)) {\r\n                        this.$v[name][indexOrGuid][attribute].$touch();\r\n                    } else {\r\n                        this.$v[name][attribute].$values.$each[indexOrGuid].Value.$touch();\r\n                    }\r\n\r\n                }\r\n            },\r\n\r\n\r\n            /**\r\n             * Saves the field form\r\n             * @param {any} event\r\n             */\r\n            saveFieldForm(event) {\r\n                //console.log(\"saving goes here\", event);\r\n\r\n                console.log(\"the name, description, and fields saved TBA\", this.names, this.descriptions, this.fields);\r\n            },\r\n\r\n            /**\r\n             * Changes the type of field via choice from the dropdown\r\n             * @param {any} fieldIndex the fieldIndex being changed\r\n             * @param {any} chosenFieldType the chosen field type of the dropdown\r\n             */\r\n            onDropdownChange(fieldIndex, chosenFieldType) {\r\n                //dont want to lose any values that are not originally a part of the template tho...\r\n                let tmpId = this.fields[fieldIndex].Id;\r\n                switch (chosenFieldType) {\r\n                    case this.TEXTFIELD_TYPE:\r\n                        //textfield\r\n                        this.$set(this.fields, fieldIndex, JSON.parse(JSON.stringify(this.textfieldTemplate)) );\r\n                        this.fields[fieldIndex].Id = tmpId;\r\n                        break;\r\n\r\n                    case this.TEXTAREA_TYPE:\r\n                        //textarea\r\n                        this.$set(this.fields, fieldIndex, JSON.parse(JSON.stringify(this.textAreaTemplate)) );\r\n                        this.fields[fieldIndex].Id = tmpId;\r\n                        break;\r\n\r\n                    case this.RADIO_TYPE:\r\n                        //radio/mc\r\n                        this.$set(this.fields, fieldIndex, JSON.parse(JSON.stringify(this.radioTemplate)) );\r\n                        this.fields[fieldIndex].Id = tmpId;\r\n                        break;\r\n\r\n                    case this.CHECKBOX_TYPE:\r\n                        //checkbox\r\n                        this.$set(this.fields, fieldIndex, JSON.parse(JSON.stringify(this.checkboxTemplate)) );\r\n                        this.fields[fieldIndex].Id = tmpId;\r\n                        break;\r\n\r\n                    case this.DROPDOWN_TYPE:\r\n                        //dropdown\r\n                        this.$set(this.fields, fieldIndex, JSON.parse(JSON.stringify(this.dropdownTemplate)) );\r\n                        this.fields[fieldIndex].Id = tmpId;\r\n                        break;\r\n\r\n                    case \"Catfish.Core.Models.Contents.Fields.FileAttachment, Catfish.Core\":\r\n                        //fileattachment\r\n                        this.fields[fieldIndex].$type = 'Catfish.Core.Models.Contents.Fields.FileAttachment, Catfish.Core';\r\n                        break;\r\n\r\n                    case this.INFOSECTION_TYPE:\r\n                        //displayfield\r\n                        this.$set(this.fields, fieldIndex, JSON.parse(JSON.stringify(this.displayFieldTemplate)) );\r\n                        this.fields[fieldIndex].Id = tmpId;\r\n                        break;\r\n\r\n                    case this.DATE_TYPE:\r\n                        //displayfield\r\n                        this.$set(this.fields, fieldIndex, JSON.parse(JSON.stringify(this.datePickerTemplate)) );\r\n                        this.fields[fieldIndex].Id = tmpId;\r\n                        break;\r\n\r\n                    case this.DECIMAL_TYPE:\r\n                    case this.INTEGER_TYPE:\r\n                        //displayfield\r\n                        this.$set(this.fields, fieldIndex, JSON.parse(JSON.stringify(this.numberPickerTemplate)) );\r\n                        this.fields[fieldIndex].Id = tmpId;\r\n                        break;\r\n\r\n                    case this.MONOLINGUAL_TEXTFIELD_TYPE:\r\n                        //displayfield\r\n                        this.$set(this.fields, fieldIndex, JSON.parse(JSON.stringify(this.monolingualTextFieldTemplate)) );\r\n                        this.fields[fieldIndex].Id = tmpId;\r\n                        break;\r\n\t\t\t\t}\r\n            },\r\n\r\n\r\n            /**\r\n             * Fire when any item sorted/moved (includes adding new item to list)\r\n             * @param {any} event\r\n             */\r\n            sortItem(event) {\r\n                let collapsingSections = document.getElementsByClassName('collapsing-items');\r\n                console.log(\"event on sort:\", event);\r\n                let shownSectionIndex = null;\r\n                let previousSection = null;\r\n                let nextSection = null;\r\n\r\n                //track sections above and below current open item\r\n                for (let i = 0; i < collapsingSections.length; i++) {\r\n                    if (collapsingSections[i].classList.contains('show')) {\r\n                        shownSectionIndex = i;\r\n                        previousSection = (i - 1 >= 0) ? collapsingSections[i - 1] : null;\r\n                        nextSection = (i + 1 < collapsingSections.length) ? collapsingSections[i + 1] : null;\r\n\t\t\t\t\t}\r\n                }\r\n\r\n                //if all items closed and not adding something new, just return\r\n                if (shownSectionIndex == null && previousSection == null && nextSection == null\r\n                    && event.from.id == event.to.id) {\r\n                    return;\r\n\t\t\t\t}\r\n\r\n                //the field id of the sorted section\r\n                let tmpId = collapsingSections[event.newIndex].id.split('collapse-')[1];\r\n\r\n                //if item is new, open that one\r\n                if (event.from.id != event.to.id) {\r\n                    console.log(\"added new item\", collapsingSections[event.newIndex].id);\r\n                    $('#' + collapsingSections[event.newIndex].id).collapse('show');\r\n                    this.dropdowns[tmpId].isCollapsed = false;\r\n                    if (shownSectionIndex != null) {\r\n                        this.dropdowns[tmpId].isCollapsed = true;\r\n\t\t\t\t\t}\r\n                    return;\r\n                }\r\n\r\n                //if the user is dragging the showing item around\r\n                if (shownSectionIndex == event.oldIndex) {\r\n                    console.log(\"dragging showing item\");\r\n                    $('#' + collapsingSections[event.newIndex].id).collapse('show');\r\n                    this.dropdowns[tmpId].isCollapsed = false;\r\n                    if (shownSectionIndex != null) {\r\n                        this.dropdowns[tmpId].isCollapsed = true;\r\n\t\t\t\t\t}\r\n                    return;\r\n\t\t\t\t}\r\n\r\n                //move show class to the index below open item\r\n                if (event.oldIndex <= shownSectionIndex && shownSectionIndex <= event.newIndex) {\r\n\r\n                    //test suppressing animation - not sure if it will work, cant \r\n                    //remove .collapsing bc it's not applied until the collapse call is made\r\n                    //previousSection.addClass('suppress-collapsing-animation');\r\n                    //$('#' + previousSection.id).css({ \"transition\": \"none\", \"display\": \"none\"}); doesnt work, must override\r\n\r\n                    console.log(\"moved item DOWN over shown\");\r\n                    $('#' + previousSection.id).collapse('show');\r\n                    let prevId = previousSection.id.split('collapse-')[1];\r\n                    this.dropdowns[prevId].isCollapsed = false;\r\n\r\n                    //move item above open item\r\n                } else if (event.oldIndex >= shownSectionIndex && shownSectionIndex >= event.newIndex) {\r\n                    console.log(\"moved item UP over shown\");\r\n                    $('#' + nextSection.id).collapse('show');\r\n                    let nextId = nextSection.id.split('collapse-')[1];\r\n                    this.dropdowns[nextId].isCollapsed = false;\r\n                } else {\r\n                    //just sorting, does not interfere with the open item\r\n                    return;\r\n\t\t\t\t}\r\n\r\n                this.dropdowns[tmpId].isCollapsed = true;\r\n\t\t\t},\r\n\r\n\r\n            /**\r\n             * Returns a custom clone\r\n             * @param event\r\n             */\r\n            cloneItem(event) {\r\n                let newItem = {};\r\n\r\n                //hardcoded until templates are provided\r\n                newItem = JSON.parse(JSON.stringify(this.textfieldTemplate)); //event.Template\r\n                \r\n                newItem.Id = uuidv1();\r\n                this.$set(this.dropdowns, newItem.Id, {\r\n                    isCollapsed: false,\r\n                    showDescription: false,\r\n                    hasOtherOption: false\r\n                });\r\n                console.log(newItem);\r\n\r\n                return newItem;\r\n            },\r\n\r\n            /**\r\n             * Checks all options - ie user has checked 'Any' option in File Upload.\r\n             * If all already checked, uncheck them all\r\n             * @param {any} field\r\n             */\r\n            checkAllFileTypes(field) {\r\n                if (field.Values.$values.indexOf(\"any\") > -1) {\r\n                    let index = field.Values.$values.indexOf(\"any\");\r\n                    field.Values.$values.splice(index, 1);\r\n\t\t\t\t}\r\n\r\n                if (field.Values.$values.length == this.fileTypes.length) {\r\n                    //uncheck all\r\n                    field.Values.$values = [];\r\n                } else {\r\n                    //check all\r\n                    field.Values.$values = [];\r\n                    field.Values.$values = this.fileTypes;\r\n\t\t\t\t}\r\n\r\n            },\r\n\r\n            /**\r\n             * Checks if the checkboxes are all checked and will check 'any',\r\n             * or if 'any' is checked and the user unchecks a checkbox, uncheck 'any'\r\n             * @param {any} field\r\n             */\r\n            checkCheckboxState(field, fieldIndex) {\r\n                if (field.Values.$values.length == this.fileTypes.length) {\r\n                    //check the 'any' box\r\n                    document.getElementById(\"filetype-checkbox-\" + fieldIndex + \"-\" + \"any\").checked = true;\r\n                } else {\r\n                    //uncheck the 'any' box\r\n                    document.getElementById(\"filetype-checkbox-\" + fieldIndex + \"-\" + \"any\").checked = false;\r\n\t\t\t\t}\r\n            },\r\n\r\n            /**\r\n             * Toggles the field to either open or closed.\r\n             * Icon for showing open/closed relies on open/closed state,\r\n             * hence the necessity for this function.\r\n             * \r\n             * @param {any} fieldId the field's index to open/close\r\n             */\r\n            toggleDropdown(fieldId) {\r\n                let lastDropdownIdOpened = '';\r\n                for (let dropdownId of Object.keys(this.dropdowns)) {\r\n                    if (this.dropdowns[dropdownId].isCollapsed == false) {\r\n                        lastDropdownIdOpened = dropdownId;\r\n\t\t\t\t\t}\r\n                }\r\n\r\n                if (fieldId != lastDropdownIdOpened && lastDropdownIdOpened != '') {\r\n                    //close dropdown that is not the same one previously opened\r\n                    this.dropdowns[lastDropdownIdOpened].isCollapsed = true;\r\n\t\t\t\t}\r\n\r\n                this.dropdowns[fieldId].isCollapsed === true ? this.dropdowns[fieldId].isCollapsed = false : this.dropdowns[fieldId].isCollapsed = true;\r\n            },\r\n\r\n            /**\r\n             * Adds new option to either multiple choice or checkbox\r\n             * @param {any} field the field to push multiple choice or checkbox objects onto\r\n             */\r\n            addNewOption(field) {\r\n                let newOptionItemTemplate = JSON.parse(JSON.stringify(this.optionItemTemplate));\r\n                newOptionItemTemplate.Id = uuidv1();\r\n                newOptionItemTemplate.OptionText.Id = uuidv1();\r\n                for (let languageOptionItem of newOptionItemTemplate.OptionText.Values.$values) {\r\n                    languageOptionItem.Id = uuidv1();\r\n\t\t\t\t}\r\n\r\n                field.Options.$values.push(newOptionItemTemplate);\r\n                console.log(\"field options\", field.Options.$values);\r\n            },\r\n\r\n            /**\r\n             * \r\n             * @param {any} fieldIndex\r\n             * @param {any} optionIndex\r\n             */\r\n            selectOptionAsDefault(fieldIndex, optionIndex) {\r\n                //if selected already, deselect it\r\n\r\n                if (this.fields[fieldIndex].Options.$values[optionIndex].Selected === null\r\n                    || !this.fields[fieldIndex].Options.$values[optionIndex].Selected) {\r\n                    this.fields[fieldIndex].Options.$values[optionIndex].Selected = true;\r\n                } else {\r\n                    this.fields[fieldIndex].Options.$values[optionIndex].Selected = false;\r\n\t\t\t\t}\r\n\r\n                //desselect any others in the group\r\n                for (let optionItem of this.fields[fieldIndex].Options.$values) {\r\n                    if (optionItem.Id == this.fields[fieldIndex].Options.$values[optionIndex].Id) {\r\n                        continue;\r\n\t\t\t\t\t}\r\n                    optionItem.Selected = false;\r\n\t\t\t\t}\r\n\r\n                console.log(this.fields[fieldIndex].Options.$values);\r\n\t\t\t},\r\n\r\n            /**\r\n             * Adds 'Other' option to set for user to fill\r\n             * @param {any} field\r\n             */\r\n            addOtherOption(field) {\r\n                field.Values.$values.push({\r\n                    text: 'Other...',\r\n                    isDisabled: true,\r\n                    id: -1,\r\n                });\r\n                this.dropdowns[field.Id].hasOtherOption = true;\r\n            },\r\n\r\n            /**\r\n             * Removes an option item\r\n             * @param {any} fieldIndex\r\n             * @param {any} optionIndex\r\n             */\r\n            removeOption(fieldIndex, optionIndex) {\r\n                this.fields[fieldIndex].Options.$values.splice(optionIndex, 1);\r\n            },\r\n\r\n            /**\r\n             * Deletes a given field\r\n             * @param {any} fieldIndex\r\n             */\r\n            deleteField(fieldIndex) {\r\n                this.fields.splice(fieldIndex, 1);\r\n                delete this.dropdowns[fieldIndex];\r\n            },\r\n\r\n            /**\r\n             * Adds the description field to the field.\r\n             * @param {any} fieldId\r\n             */\r\n            addDescription(fieldId) {\r\n                this.dropdowns[fieldId].showDescription = true;\r\n            },\r\n\r\n            /**\r\n             * Removes the description field from the field.\r\n             * Not sure if this should delete the info in it, if any.\r\n             * CURRENTLY it does not.\r\n             * @param {any} fieldId\r\n             */\r\n            removeDescription(fieldId) {\r\n                this.dropdowns[fieldId].showDescription = false;\r\n            },\r\n\r\n            /**\r\n              * Fetches and loads the data from an API call\r\n              * */\r\n            load() {\r\n                //var self = this;\r\n                return new Promise((resolve, reject) => {\r\n                    piranha.permissions.load(() => {\r\n                        fetch(piranha.baseUrl + this.getFieldDefs)\r\n                            .then((fdResponse) => { return fdResponse.json(); })\r\n                            .then((fieldDefsResult) => {\r\n                                console.log(\"second res\", fieldDefsResult)\r\n                                \r\n                                for (let defaultField of fieldDefsResult.$values) {\r\n\r\n                                    //store fieldType for dropdown\r\n                                    if (defaultField.$type != this.DECIMAL_TYPE) {\r\n                                        this.fieldTypes.push({\r\n                                            $type: defaultField.$type,\r\n                                            DisplayLabel: defaultField.DisplayLabel\r\n                                        });\r\n\t\t\t\t\t\t\t\t\t}\r\n                                    \r\n\r\n                                    //templates handled here, remove any default data and store the structure\r\n                                    switch (defaultField.$type) {\r\n                                        case this.TEXTFIELD_TYPE:\r\n                                            this.textfieldTemplate = defaultField;\r\n\r\n                                            for (let languageIndex in this.textfieldTemplate.Name.Values.$values) {\r\n                                                this.$set(this.textfieldTemplate.Name.Values.$values[languageIndex], 'Value', '');\r\n                                                this.$set(this.textfieldTemplate.Description.Values.$values[languageIndex], 'Value', '');\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n                                            break;\r\n                                        case this.TEXTAREA_TYPE:\r\n                                            this.textAreaTemplate = defaultField;\r\n\r\n                                            for (let languageIndex in this.textAreaTemplate.Name.Values.$values) {\r\n                                                this.$set(this.textAreaTemplate.Name.Values.$values[languageIndex], 'Value', '');\r\n                                                this.$set(this.textAreaTemplate.Description.Values.$values[languageIndex], 'Value', '');\r\n                                            }\r\n                                            break;\r\n                                        case this.RADIO_TYPE:\r\n                                            this.radioTemplate = defaultField;\r\n                                            //stores an option item to be used by all option-item fields (radio/checkbox/dropdown)\r\n                                            this.optionItemTemplate = JSON.parse(JSON.stringify(defaultField.Options.$values[0]));\r\n                                            //if more than one option, remove the other options\r\n                                            if (defaultField.Options.$values.length > 1){\r\n                                                //delete all other options except for first one\r\n                                                this.radioTemplate.Options.$values.splice(1, defaultField.Options.$values.length - 1);\r\n                                            }\r\n\r\n                                            for (let languageIndex in this.radioTemplate.Name.Values.$values) {\r\n                                                this.$set(this.radioTemplate.Name.Values.$values[languageIndex], 'Value', '');\r\n                                                this.$set(this.radioTemplate.Description.Values.$values[languageIndex], 'Value', '');\r\n                                                this.$set(this.radioTemplate.Options.$values[0].OptionText.Values.$values[languageIndex], 'Value', '');\r\n\r\n                                                this.$set(this.optionItemTemplate.OptionText.Values.$values[languageIndex], 'Value', '');\r\n                                            }\r\n                                            break;\r\n\r\n                                        case this.CHECKBOX_TYPE:\r\n                                            this.checkboxTemplate = defaultField;\r\n\r\n                                            //if more than one option, remove the other options\r\n                                            if (defaultField.Options.$values.length > 1) {\r\n                                                //delete all other options except for first one\r\n                                                this.checkboxTemplate.Options.$values.splice(1, defaultField.Options.$values.length - 1);\r\n                                            }\r\n\r\n                                            for (let languageIndex in this.checkboxTemplate.Name.Values.$values) {\r\n                                                this.$set(this.checkboxTemplate.Name.Values.$values[languageIndex], 'Value', '');\r\n                                                this.$set(this.checkboxTemplate.Description.Values.$values[languageIndex], 'Value', '');\r\n                                                this.$set(this.checkboxTemplate.Options.$values[0].OptionText.Values.$values[languageIndex], 'Value', '');\r\n                                            }\r\n                                            break;\r\n\r\n                                        case this.DROPDOWN_TYPE:\r\n                                            this.dropdownTemplate = defaultField;\r\n\r\n                                            //if more than one option, remove the other options\r\n                                            if (defaultField.Options.$values.length > 1) {\r\n                                                //delete all other options except for first one\r\n                                                this.dropdownTemplate.Options.$values.splice(1, defaultField.Options.$values.length - 1);\r\n                                            }\r\n\r\n                                            for (let languageIndex in this.dropdownTemplate.Name.Values.$values) {\r\n                                                this.$set(this.dropdownTemplate.Name.Values.$values[languageIndex], 'Value', '');\r\n                                                this.$set(this.dropdownTemplate.Description.Values.$values[languageIndex], 'Value', '');\r\n                                                this.$set(this.dropdownTemplate.Options.$values[0].OptionText.Values.$values[languageIndex], 'Value', '');\r\n                                            }\r\n                                            break;\r\n\r\n                                        case this.INFOSECTION_TYPE:\r\n                                            this.displayFieldTemplate = defaultField;\r\n\r\n                                            for (let languageIndex in this.displayFieldTemplate.Name.Values.$values) {\r\n                                                this.$set(this.displayFieldTemplate.Name.Values.$values[languageIndex], 'Value', '');\r\n                                                this.$set(this.displayFieldTemplate.Description.Values.$values[languageIndex], 'Value', '');\r\n                                            }\r\n                                            break;\r\n\r\n                                        case this.DATE_TYPE:\r\n                                            this.datePickerTemplate = defaultField;\r\n\r\n                                            for (let languageIndex in this.datePickerTemplate.Name.Values.$values) {\r\n                                                this.$set(this.datePickerTemplate.Name.Values.$values[languageIndex], 'Value', '');\r\n                                                this.$set(this.datePickerTemplate.Description.Values.$values[languageIndex], 'Value', '');\r\n                                            }\r\n                                            break;\r\n\r\n                                        case this.DECIMAL_TYPE:\r\n                                            this.numberPickerTemplate = defaultField;\r\n\r\n                                            for (let languageIndex in this.numberPickerTemplate.Name.Values.$values) {\r\n                                                this.$set(this.numberPickerTemplate.Name.Values.$values[languageIndex], 'Value', '');\r\n                                                this.$set(this.numberPickerTemplate.Description.Values.$values[languageIndex], 'Value', '');\r\n                                            }\r\n                                            break;\r\n\r\n                                        case this.MONOLINGUAL_TEXTFIELD_TYPE:\r\n                                            this.monolingualTextFieldTemplate = defaultField;\r\n\r\n                                            for (let languageIndex in this.monolingualTextFieldTemplate.Name.Values.$values) {\r\n                                                this.$set(this.monolingualTextFieldTemplate.Name.Values.$values[languageIndex], 'Value', '');\r\n                                                this.$set(this.monolingualTextFieldTemplate.Description.Values.$values[languageIndex], 'Value', '');\r\n                                            }\r\n                                            break;\r\n                                        //fileattachment need to be added from the backend\r\n                                    }\r\n                                    \r\n                                }\r\n                                \r\n                                //TODO handle this area now that all data is being sent with api\r\n                                //temp set other values that i dont have sample data for\r\n                                //guessing for what will be needed, adjust when dummy data given\r\n                                //this.textAreaTemplate = JSON.parse(JSON.stringify(this.textfieldTemplate));\r\n                                //this.textAreaTemplate.$type = 'Catfish.Core.Models.Contents.Fields.TextArea, Catfish.Core';\r\n\r\n                                //this.radioTemplate = JSON.parse(JSON.stringify(this.textfieldTemplate));\r\n                                //this.radioTemplate.$type = 'Catfish.Core.Models.Contents.Fields.Radio, Catfish.Core';\r\n                                //not sure if this would be right, will likely need to adjust this\r\n                                //this.radioTemplate.Values.$values = [];\r\n\r\n                                //this.checkboxTemplate = JSON.parse(JSON.stringify(this.textfieldTemplate));\r\n                                //this.checkboxTemplate.$type = 'Catfish.Core.Models.Contents.Fields.Checkbox, Catfish.Core';\r\n                                //not sure if this would be right, will likely need to adjust this\r\n                                //this.checkboxTemplate.Values.$values = [];\r\n\r\n                                //this.dropdownTemplate = JSON.parse(JSON.stringify(this.textfieldTemplate));\r\n                                //this.dropdownTemplate.$type = 'Catfish.Core.Models.Contents.Fields.Dropdown, Catfish.Core';\r\n                                //not sure if this would be right, will likely need to adjust this\r\n                                //this.dropdownTemplate.Values.$values = [];\r\n\r\n                                this.fileAttachmentTemplate = JSON.parse(JSON.stringify(this.textfieldTemplate));\r\n                                this.fileAttachmentTemplate.$type = 'Catfish.Core.Models.Contents.Fields.FileAttachment, Catfish.Core';\r\n                                this.fileAttachmentTemplate.Values.$values = [];\r\n\r\n                                //this.displayFieldTemplate = JSON.parse(JSON.stringify(this.textfieldTemplate));\r\n                                //this.displayFieldTemplate.$type = 'Catfish.Core.Models.Contents.Fields.DisplayField, Catfish.Core';\r\n                                //this.displayFieldTemplate.Values.$values = \"\";\r\n\r\n                            })\r\n                            .then(() => {\r\n                                //this.finishedGET = true; test for empty return, remove later (or dont)\r\n                                return fetch(piranha.baseUrl + this.getString + this.itemId);\r\n                            })\r\n                            .then((response) => { return response.json(); })\r\n                            .then((result) => {\r\n                                //data for this form handled here\r\n\r\n                                this.names = result.Name;\r\n                                this.descriptions = result.Description;\r\n                                this.fields = result.Fields.$values;\r\n                                this.fields_type = result.Fields.$type;\r\n                                this.id = result.Id;\r\n                                this.modelType = result.ModelType;\r\n\r\n                                this.finishedGET = true;\r\n                                //this.collections = result.collections;\r\n                                //this.updateBindings = true;\r\n                                console.log(result);\r\n\r\n                                for (let field of this.fields) {\r\n                                    this.$set(this.dropdowns, field.Id, {\r\n                                        isCollapsed: true,\r\n                                        showDescription: false,\r\n                                        hasOtherOption: false\r\n                                    });\r\n                                }\r\n\r\n                                resolve();\r\n\r\n                            })\r\n                            .catch(function (error) { console.log(\"error:\", error); });\r\n                    });\r\n\r\n                });\r\n                \r\n            },\r\n        },\r\n        created() {\r\n            this.itemId = window.location.href.substring(window.location.href.lastIndexOf('/') + 1);\r\n            this.load()\r\n                .then(() => {\r\n                    //for popovers\r\n                    $(document).ready(function () {\r\n                        $('[data-toggle=\"popover\"]').popover();\r\n                    });\r\n\r\n                    //for the accordion, if one panel is triggered to open, close any others\r\n                    $('#accordion').on('show.bs.collapse', function () {\r\n                        console.log(\"called to hide\");\r\n                        let test = $('#accordion .show').length;\r\n                        console.log(test);\r\n                        $('#accordion .show').collapse('hide');\r\n                    });\r\n                });\r\n        }\r\n    });\r\n}"],"sourceRoot":""}