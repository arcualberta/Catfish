{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./wwwroot/assets/js/catfish.editFieldForm.js"],"names":["Vue","use","Vuelidate","document","getElementById","piranha","editFieldForm","el","components","draggable","quillEditor","data","itemId","finishedGET","getString","names","descriptions","fields","id","modelType","dropdowns","fieldTypes","text","value","rightColumnOptions","fileTypes","tmpTextfieldTemplate","tmpTextAreaTemplate","tmpRadioTemplate","tmpCheckboxTemplate","tmpDropdownTemplate","tmpFileAttachmentTemplate","tmpDisplayFieldTemplate","saveStatus","saveSuccessfulLabel","saveFailedLabel","saveFieldFormButtonLabel","validations","required","values","$each","requiredIf","fieldModel","textModel","name","methods","checkValidity","event","preventDefault","$v","$invalid","console","log","saveFieldForm","validateState","indexOrGuid","attribute","$dirty","$error","validateFieldState","fieldIndex","secondIndex","touchNestedItem","isNaN","$touch","onDropdownChange","$type","sortItem","collapsingSections","getElementsByClassName","shownSectionIndex","previousSection","nextSection","i","length","classList","contains","tmpId","newIndex","split","from","to","$","collapse","isCollapsed","test","oldIndex","cloneItem","newItem","JSON","parse","stringify","uuidv1","$set","showDescription","hasOtherOption","checkAllFileTypes","field","indexOf","index","splice","checkCheckboxState","checked","toggleDropdown","fieldId","lastDropdownIdOpened","Object","keys","dropdownId","addNewOption","isDisabled","push","addOtherOption","removeOption","itemValue","optionIndex","deleteField","addDescription","removeDescription","load","Promise","resolve","reject","permissions","fetch","baseUrl","then","response","json","result","description","selected","defaultTextfieldTemplate","error","created","window","location","href","substring","lastIndexOf","ready","popover"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"main\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([\"./wwwroot/assets/js/catfish.editFieldForm.js\",\"vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import draggable from 'vuedraggable';\r\n//import 'quill/dist/quill.core.css'\r\n//import 'quill/dist/quill.snow.css'\r\n//import 'quill/dist/quill.bubble.css'\r\n\r\nimport { quillEditor } from 'vue-quill-editor'\r\nimport { v1 as uuidv1 } from 'uuid';\r\n\r\nimport { required, requiredIf } from 'vuelidate/lib/validators'\r\nimport Vuelidate from 'vuelidate'\r\nVue.use(Vuelidate)\r\n\r\n/**\r\n * Javascript Vue code for creating the editable form from existing data in FieldContainerEdit.cshtml.\r\n * It is modelled after the file piranha.pagelist.js in Piranha's source code.\r\n */\r\n\r\n\r\n/**\r\n * This check makes sure the file is only run on the page with\r\n * the element. Not a huge deal, can be removed if it's causing issues.\r\n */\r\nif (document.getElementById(\"edit-field-form-page\")) {\r\n    piranha.editFieldForm = new Vue({\r\n        el: '#edit-field-form-page',\r\n        components: {\r\n            draggable,\r\n            quillEditor\r\n        },\r\n        data() {\r\n            return {\r\n                itemId: null,\r\n                finishedGET: false,\r\n\r\n                //api strings\r\n                getString: \"manager/api/forms/\",\r\n                //postString: \"manager/items/save\",\r\n\r\n                names: null,\r\n                descriptions: null,\r\n                fields: null,\r\n                id: null,\r\n                modelType: null,\r\n\r\n                dropdowns: {},\r\n                //temp, need to call an api for these\r\n                fieldTypes: [\r\n                    { text: 'Select One', value: null },\r\n                    {\r\n                        value: 0,\r\n                        text: 'Short Answer',\r\n                        modelType: 'TextField'\r\n                    },\r\n                    {\r\n                        value: 1,\r\n                        text: 'Long Answer',\r\n                        modelType: 'TextArea'\r\n                    },\r\n                    {\r\n                        value: 2,\r\n                        text: 'Multiple Choice',\r\n                        modelType: 'Radio'\r\n                    },\r\n                    {\r\n                        value: 3,\r\n                        text: 'Check Box',\r\n                        modelType: 'Checkbox'\r\n                    },\r\n                    {\r\n                        value: 4,\r\n                        text: 'Dropdown List',\r\n                        modelType: 'Dropdown'\r\n                    },\r\n                    {\r\n                        value: 5,\r\n                        text: 'File Upload',\r\n                        modelType: 'FileAttachment'\r\n                    },\r\n                    {\r\n                        value: 6,\r\n                        text: 'Display Text',\r\n                        modelType: 'DisplayField'\r\n                    }\r\n                ],\r\n\r\n                rightColumnOptions: [\r\n                    {\r\n                        value: 0,\r\n                        text: \"Add Question\"\r\n                    },\r\n                    {\r\n                        value: 1,\r\n                        text: \"Add Section (TBA)\"\r\n                    }\r\n                ],\r\n\r\n                //will be sent through API, temp\r\n                fileTypes: [\r\n                    \"PDF\", \"DOC\", \"DOCX\", \"PS\", \"EPS\", \"JPG\", \"PNG\"\r\n                ],\r\n\r\n                //temp until templates sent\r\n                tmpTextfieldTemplate: null,\r\n                tmpTextAreaTemplate: null,\r\n                tmpRadioTemplate: null,\r\n                tmpCheckboxTemplate: null,\r\n                tmpDropdownTemplate: null,\r\n                tmpFileAttachmentTemplate: null,\r\n                tmpDisplayFieldTemplate: null,\r\n\r\n                saveStatus: 0,\r\n                //TODO: make a file of constant strings\r\n                saveSuccessfulLabel: \"Save Successful\",\r\n                saveFailedLabel: \"Failed to Save\",\r\n                saveFieldFormButtonLabel: \"Save\",\r\n            }\r\n        },\r\n        validations: {\r\n            names: {\r\n                required,\r\n                values: {\r\n                    $each: {\r\n                        value: {\r\n                            required,\r\n                        }\r\n                    }\r\n\t\t\t\t}\r\n            },\r\n            descriptions: {\r\n                values: {\r\n                    $each: {\r\n                        value: {\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            fields: {\r\n                $each: {\r\n                    values: {\r\n                        //currently the display text option can be submitted regardless of any text or not\r\n                        //it errors on reading an array instead of an empty string on creation, need different place to store it\r\n\r\n                        //all start with this value at Array(0)\r\n                        required: requiredIf(function (fieldModel) {\r\n                            return (fieldModel.modelType ==\r\n                                'Catfish.Core.Models.Contents.Fields.Radio, Catfish.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'\r\n                                || fieldModel.modelType ==\r\n                                'Catfish.Core.Models.Contents.Fields.Checkbox, Catfish.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'\r\n                                || fieldModel.modelType ==\r\n                                'Catfish.Core.Models.Contents.Fields.Dropdown, Catfish.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'\r\n                                || fieldModel.modelType ==\r\n                                'Catfish.Core.Models.Contents.Fields.FileAttachment, Catfish.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'\r\n                            )\r\n                        }), \r\n                        //only need the object for radio/checkbox/dropdown's inner content\r\n                        $each: {\r\n                            text: {\r\n                                required: requiredIf(function (textModel) {\r\n                                    //this might not work with api update, hoping to store mc/radio/dropdown in different section from file attachment\r\n                                    return (typeof (textModel) == 'object');\r\n                                })\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n                    },\r\n                    name: {\r\n                        values: {\r\n                            $each: {\r\n                                value: {\r\n                                    required\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        methods: {\r\n\r\n            /**\r\n\t\t\t * Checks all the inputs to make sure the data is valid\r\n\t\t\t * @returns true is valid, false is invalid.\r\n\t\t\t **/\r\n            checkValidity(event) {\r\n                event.preventDefault();\r\n\r\n                if (this.$v.$invalid) {\r\n                    console.log(\"something is invalid\", this.$v);\r\n                } else {\r\n                    console.log(\"all good!\");\r\n                    this.saveFieldForm(event);\r\n\t\t\t\t}\r\n\r\n            },\r\n\r\n            /**\r\n\t\t\t * Checks that the value matches its requirements from Vuelidate\r\n\t\t\t  * (ie required, is a string, etc)\r\n\t\t\t * @param name the name of the v-model binded to.\r\n\t\t\t */\r\n            validateState(name, indexOrGuid = null, attribute = null) {\r\n                //console.log(\"why\", this.$v);\r\n                if (indexOrGuid != null) {\r\n                    //this is a $each situation - array\r\n                    const { $dirty, $invalid } = this.$v[name][attribute].$each[indexOrGuid].value;\r\n                    return $dirty ? !$invalid : null;\r\n                } else {\r\n                    const { $dirty, $error } = this.$v[name];\r\n                    return $dirty ? !$error : null;\r\n                }\r\n            },\r\n\r\n            /**\r\n             * TODO: work this one and above into a generic function\r\n             * This one is for fields only, very hardcody bc it has so many embedded attributes\r\n             * @param {any} fieldIndex\r\n             * @param {any} name\r\n             * @param {any} secondIndex\r\n             */\r\n            validateFieldState(fieldIndex, name, secondIndex = null) {\r\n                if (secondIndex == null) {\r\n                    console.log(\"?\", this.$v.fields.$each[fieldIndex]); \r\n                    const { $dirty, $invalid } = this.$v.fields.$each[fieldIndex][name];\r\n                    return $dirty ? !$invalid : null;\r\n                } else {\r\n                    const { $dirty, $invalid } = this.$v.fields.$each[fieldIndex][name].values.$each[secondIndex].value;\r\n                    return $dirty ? !$invalid : null;\r\n\t\t\t\t}\r\n\r\n\t\t\t},\r\n\r\n\r\n            /**\r\n\t\t\t * Touches nested items from Vuex so validation works properly.\r\n\t\t\t */\r\n            touchNestedItem(name, indexOrGuid = null, attribute = null, event = null) {\r\n                if (indexOrGuid != null) {\r\n                    if (isNaN(indexOrGuid)) {\r\n                        this.$v[name][indexOrGuid][attribute].$touch();\r\n                    } else {\r\n                        this.$v[name][attribute].$each[indexOrGuid].value.$touch();\r\n                    }\r\n\r\n                }\r\n            },\r\n\r\n\r\n            /**\r\n             * Saves the field form\r\n             * @param {any} event\r\n             */\r\n            saveFieldForm(event) {\r\n                //console.log(\"saving goes here\", event);\r\n\r\n                console.log(\"the name, description, and fields saved TBA\", this.names, this.descriptions, this.fields);\r\n            },\r\n\r\n            /**\r\n             * Changes the type of field via choice from the dropdown\r\n             * @param {any} fieldIndex the fieldIndex being changed\r\n             * @param {any} event the index value of the dropdown\r\n             */\r\n            onDropdownChange(fieldIndex, event) {\r\n                console.log(\"fieldIndex\", fieldIndex);\r\n                //cant change $type directly... could work something with the templates?\r\n                //dont want to lose any values that are not originally a part of the template tho...\r\n                switch (event) {\r\n                    case 0:\r\n                        //textfield\r\n                        this.fields[fieldIndex].$type = 'Catfish.Core.Models.Contents.Fields.TextField, Catfish.Core';\r\n                        this.fields[fieldIndex].modelType = 'Catfish.Core.Models.Contents.Fields.TextField, Catfish.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null';\r\n                        break;\r\n                    case 1:\r\n                        //textarea\r\n                        this.fields[fieldIndex].$type = 'Catfish.Core.Models.Contents.Fields.TextArea, Catfish.Core';\r\n                        this.fields[fieldIndex].modelType = 'Catfish.Core.Models.Contents.Fields.TextArea, Catfish.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null';\r\n                        break;\r\n                    case 2:\r\n                        //radio/mc\r\n                        this.fields[fieldIndex].$type = 'Catfish.Core.Models.Contents.Fields.Radio, Catfish.Core';\r\n                        this.fields[fieldIndex].modelType = 'Catfish.Core.Models.Contents.Fields.Radio, Catfish.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null';\r\n                        break;\r\n                    case 3:\r\n                        //checkbox\r\n                        this.fields[fieldIndex].$type = 'Catfish.Core.Models.Contents.Fields.Checkbox, Catfish.Core';\r\n                        this.fields[fieldIndex].modelType = 'Catfish.Core.Models.Contents.Fields.Checkbox, Catfish.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null';\r\n                        break;\r\n                    case 4:\r\n                        //dropdown\r\n                        this.fields[fieldIndex].$type = 'Catfish.Core.Models.Contents.Fields.Dropdown, Catfish.Core';\r\n                        this.fields[fieldIndex].modelType = 'Catfish.Core.Models.Contents.Fields.Dropdown, Catfish.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null';\r\n                        break;\r\n                    case 5:\r\n                        //fileattachment\r\n                        this.fields[fieldIndex].$type = 'Catfish.Core.Models.Contents.Fields.FileAttachment, Catfish.Core';\r\n                        this.fields[fieldIndex].modelType = 'Catfish.Core.Models.Contents.Fields.FileAttachment, Catfish.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null';\r\n                        break;\r\n                    case 6:\r\n                        //displayfield\r\n                        this.fields[fieldIndex].$type = 'Catfish.Core.Models.Contents.Fields.DisplayField, Catfish.Core';\r\n                        this.fields[fieldIndex].modelType = 'Catfish.Core.Models.Contents.Fields.DisplayField, Catfish.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null';\r\n                        break;\r\n\t\t\t\t}\r\n            },\r\n\r\n\r\n            /*test(fieldId) { //detects the 'show' after transition is complete so this will never work...also only runs once unless computed. computed doesnt allow for parameter except if a setter\r\n                if (document.getElementById('collapse-' + fieldId) == null) {\r\n                    return 'fas fa-chevron-right';\r\n                } else if (document.getElementById('collapse-' + fieldId).classList.contains('show')) {\r\n                    console.log(\"item has show:\", document.getElementById('collapse-' + fieldId).classList);\r\n                    return 'fas fa-chevron-right';\r\n                } else {\r\n                    console.log(\"item does not have show:\", document.getElementById('collapse-' + fieldId).classList);\r\n                    return 'fas fa-chevron-down';\r\n                }\r\n            },*/\r\n\r\n            /**\r\n             * Fire when any item sorted/moved (includes adding new item to list)\r\n             * @param {any} event\r\n             */\r\n            sortItem(event) {\r\n                let collapsingSections = document.getElementsByClassName('collapsing-items');\r\n                console.log(\"event on sort:\", event);\r\n                let shownSectionIndex = null;\r\n                let previousSection = null;\r\n                let nextSection = null;\r\n\r\n                //track sections above and below current item\r\n                for (let i = 0; i < collapsingSections.length; i++) {\r\n                    if (collapsingSections[i].classList.contains('show')) {\r\n                        shownSectionIndex = i; //collapsingSections[i];\r\n                        previousSection = (i - 1 >= 0) ? collapsingSections[i - 1] : null;\r\n                        nextSection = (i + 1 < collapsingSections.length) ? collapsingSections[i + 1] : null;\r\n\t\t\t\t\t}\r\n                }\r\n\r\n                //the field id of the sorted section\r\n                let tmpId = collapsingSections[event.newIndex].id.split('collapse-')[1];\r\n\r\n                //if item is new, open that one\r\n                if (event.from.id != event.to.id) {\r\n                    console.log(\"added new item\", collapsingSections[event.newIndex].id);\r\n                    $('#' + collapsingSections[event.newIndex].id).collapse('show');\r\n                    this.dropdowns[tmpId].isCollapsed = false;\r\n                    if (shownSectionIndex != null) {\r\n                        let test = shownSectionIndex == event.newIndex;\r\n                        $('#' + collapsingSections[shownSectionIndex].id).collapse('hide');\r\n                        this.dropdowns[tmpId].isCollapsed = true;\r\n\t\t\t\t\t}\r\n                    return;\r\n                }\r\n\r\n                //if the user is dragging the showing item around\r\n                if (shownSectionIndex == event.oldIndex) {\r\n                    console.log(\"dragging showing item\");\r\n                    $('#' + collapsingSections[event.newIndex].id).collapse('show');\r\n                    this.dropdowns[tmpId].isCollapsed = false;\r\n                    if (shownSectionIndex != null) {\r\n                        $('#' + collapsingSections[shownSectionIndex].id).collapse('hide');\r\n                        this.dropdowns[tmpId].isCollapsed = true;\r\n\t\t\t\t\t}\r\n                    return;\r\n\t\t\t\t}\r\n\r\n                //move show class to the index below open item\r\n                if (event.oldIndex <= shownSectionIndex && shownSectionIndex <= event.newIndex) {\r\n                    console.log(\"moved item DOWN over shown\");\r\n                    $('#' + previousSection.id).collapse('show');\r\n                    this.dropdowns[previousSection.id].isCollapsed = false;\r\n\r\n                    //move item above open item\r\n                } else if (event.oldIndex >= shownSectionIndex && shownSectionIndex >= event.newIndex) {\r\n                    console.log(\"moved item UP over shown\");\r\n                    $('#' + nextSection.id).collapse('show');\r\n                    this.dropdowns[nextSection.id].isCollapsed = false;\r\n                }\r\n                $('#' + collapsingSections[shownSectionIndex].id).collapse('hide');\r\n                this.dropdowns[tmpId].isCollapsed = true;\r\n\t\t\t},\r\n\r\n\r\n            /**\r\n             * Returns a custom clone\r\n             * @param event\r\n             */\r\n            cloneItem(event) {\r\n                let newItem = {};\r\n\r\n                //hardcoded until templates are provided\r\n                newItem = JSON.parse(JSON.stringify(this.tmpTextfieldTemplate)); //event.Template\r\n                \r\n                newItem.id = uuidv1();\r\n                this.$set(this.dropdowns, newItem.id, {\r\n                    isCollapsed: false,\r\n                    showDescription: false,\r\n                    hasOtherOption: false\r\n                });\r\n                //newItem.Guid = uuidv1();\r\n                console.log(newItem);\r\n\r\n                return newItem;\r\n            },\r\n\r\n            /**\r\n             * Checks all options - ie user has checked 'Any' option in File Upload.\r\n             * If all already checked, uncheck them all\r\n             * @param {any} field\r\n             */\r\n            checkAllFileTypes(field) {\r\n                if (field.values.indexOf(\"any\") > -1) {\r\n                    let index = field.values.indexOf(\"any\");\r\n                    field.values.splice(index, 1);\r\n\t\t\t\t}\r\n\r\n                if (field.values.length == this.fileTypes.length) {\r\n                    //uncheck all\r\n                    field.values = [];\r\n                } else {\r\n                    //check all\r\n                    field.values = [];\r\n                    field.values = this.fileTypes;\r\n\t\t\t\t}\r\n\r\n            },\r\n\r\n            /**\r\n             * Checks if the checkboxes are all checked and will check 'any',\r\n             * or if 'any' is checked and the user unchecks a checkbox, uncheck 'any'\r\n             * @param {any} field\r\n             */\r\n            checkCheckboxState(field, fieldIndex) {\r\n                if (field.values.length == this.fileTypes.length) {\r\n                    //check the 'any' box\r\n                    document.getElementById(\"filetype-checkbox-\" + fieldIndex + \"-\" + \"any\").checked = true;\r\n                } else {\r\n                    //uncheck the 'any' box\r\n                    document.getElementById(\"filetype-checkbox-\" + fieldIndex + \"-\" + \"any\").checked = false;\r\n\t\t\t\t}\r\n            },\r\n\r\n            /**\r\n             * Toggles the field to either open or closed.\r\n             * Icon for showing open/closed relies on open/closed state,\r\n             * hence the necessity for this function. TODO still not working well on fast clicks,\r\n             * if it can't be fixed then delete this function and just handle in template\r\n             * \r\n             * @param {any} fieldId the field's index to open/close\r\n             */\r\n            toggleDropdown(fieldId) {\r\n                let lastDropdownIdOpened = '';\r\n                for (let dropdownId of Object.keys(this.dropdowns)) {\r\n                    if (this.dropdowns[dropdownId].isCollapsed == false) {\r\n                        lastDropdownIdOpened = dropdownId;\r\n\t\t\t\t\t}\r\n                }\r\n\r\n                if (fieldId != lastDropdownIdOpened && lastDropdownIdOpened != '') {\r\n                    //close dropdown that is not the same one previously opened\r\n                    this.dropdowns[lastDropdownIdOpened].isCollapsed = true;\r\n\t\t\t\t}\r\n\r\n                this.dropdowns[fieldId].isCollapsed === true ? this.dropdowns[fieldId].isCollapsed = false : this.dropdowns[fieldId].isCollapsed = true;\r\n            },\r\n\r\n            /**\r\n             * Adds new option to either multiple choice or checkbox\r\n             * @param {any} field the field to push multiple choice or checkbox objects onto\r\n             */\r\n            addNewOption(field) {\r\n                //if theres a disabled other option, push into index before it\r\n                //the disabled item will always be the last item\r\n                if (field.values.length > 0) {\r\n                    if (field.values[field.values.length - 1].isDisabled) {\r\n                        field.values.splice(field.values.length - 1, 0, {\r\n                            text: '',\r\n                            isDisabled: false,\r\n                            id: -1,\r\n                        });\r\n                        return;\r\n                    }\r\n                    \r\n\t\t\t\t}\r\n                 \r\n                field.values.push({\r\n                    text: '',\r\n                    isDisabled: false,\r\n                    id: -1,\r\n                });\r\n\t\t\t\t\r\n\r\n\r\n                /*switch (field.$type) {\r\n                    case 'Catfish.Core.Models.Contents.Fields.Radio, Catfish.Core':\r\n                        //hardcoded for now, use template provided item instead\r\n                        this.tmpRadioTemplate.values.push( {\r\n                            text: '',\r\n                            id: -1,\r\n                        } );\r\n                        break;\r\n                    case 'Catfish.Core.Models.Contents.Fields.Checkbox, Catfish.Core':\r\n                        //hardcoded for now, use template provided item instead\r\n                        this.tmpCheckboxTemplate.values.push({\r\n                            text: '',\r\n                            id: -1,\r\n                        });\r\n                        break;\r\n\t\t\t\t}*/\r\n            },\r\n\r\n            /**\r\n             * Adds 'Other' option to set for user to fill\r\n             * @param {any} field\r\n             */\r\n            addOtherOption(field) {\r\n                field.values.push({\r\n                    text: 'Other...',\r\n                    isDisabled: true,\r\n                    id: -1,\r\n                });\r\n                this.dropdowns[field.id].hasOtherOption = true;\r\n            },\r\n\r\n            /**\r\n             * Removes an option item\r\n             * @param {any} fieldIndex\r\n             * @param {any} optionIndex\r\n             */\r\n            removeOption(field, fieldIndex, itemValue, optionIndex) {\r\n                if (itemValue.isDisabled) {\r\n                    this.dropdowns[field.id].hasOtherOption = false;\r\n\t\t\t\t}\r\n                this.fields[fieldIndex].values.splice(optionIndex, 1);\r\n            },\r\n\r\n            /**\r\n             * Deletes a given field\r\n             * @param {any} fieldIndex\r\n             */\r\n            deleteField(fieldIndex) {\r\n                this.fields.splice(fieldIndex, 1);\r\n                delete this.dropdowns[fieldIndex];\r\n            },\r\n\r\n            /**\r\n             * Adds the description field to the field.\r\n             * @param {any} fieldId\r\n             */\r\n            addDescription(fieldId) {\r\n                this.dropdowns[fieldId].showDescription = true;\r\n            },\r\n\r\n            /**\r\n             * Removes the description field from the field.\r\n             * Not sure if this should delete the info in it, if any.\r\n             * CURRENTLY it does not.\r\n             * @param {any} fieldId\r\n             */\r\n            removeDescription(fieldId) {\r\n                this.dropdowns[fieldId].showDescription = false;\r\n            },\r\n\r\n            /**\r\n              * Fetches and loads the data from an API call\r\n              * */\r\n            load() {\r\n                //var self = this;\r\n                return new Promise((resolve, reject) => {\r\n                    piranha.permissions.load(() => {\r\n                        fetch(piranha.baseUrl + this.getString + this.itemId)\r\n                            .then((response) => { return response.json(); })\r\n                            .then((result) => {\r\n                                this.names = result.name;\r\n                                this.descriptions = result.description;\r\n                                this.fields = result.fields;\r\n                                this.id = result.id;\r\n                                this.modelType = result.modelType;\r\n\r\n                                this.finishedGET = true;\r\n                                //this.collections = result.collections;\r\n                                //this.updateBindings = true;\r\n                                console.log(result);\r\n\r\n                                for (let field of this.fields) {\r\n                                    this.$set(this.dropdowns, field.id, {\r\n                                        isCollapsed: true,\r\n                                        showDescription: false,\r\n                                        hasOtherOption: false\r\n                                    });\r\n                                }\r\n\r\n                                //temporary until templates sent, remove afterwards\r\n                                for (let field of result.fields) {\r\n                                    if (field.$type == 'Catfish.Core.Models.Contents.Fields.TextField, Catfish.Core') {\r\n                                        field.selected = 0;\r\n                                        let defaultTextfieldTemplate = JSON.parse(JSON.stringify(field));\r\n                                        defaultTextfieldTemplate.name.values[0].value = '';\r\n                                        defaultTextfieldTemplate.selected = null;\r\n\r\n                                        this.tmpTextfieldTemplate = defaultTextfieldTemplate;\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n                                }\r\n\r\n                                //temp set other values that i dont have sample data for\r\n                                //guessing for what will be needed, adjust when dummy data given\r\n                                this.tmpTextAreaTemplate = JSON.parse(JSON.stringify(this.tmpTextfieldTemplate));\r\n                                this.tmpTextAreaTemplate.$type = 'Catfish.Core.Models.Contents.Fields.TextArea, Catfish.Core';\r\n\r\n                                this.tmpRadioTemplate = JSON.parse(JSON.stringify(this.tmpTextfieldTemplate));\r\n                                this.tmpRadioTemplate.$type = 'Catfish.Core.Models.Contents.Fields.Radio, Catfish.Core';\r\n                                //not sure if this would be right, will likely need to adjust this\r\n                                this.tmpRadioTemplate.values = [];\r\n\r\n                                this.tmpCheckboxTemplate = JSON.parse(JSON.stringify(this.tmpTextfieldTemplate));\r\n                                this.tmpCheckboxTemplate.$type = 'Catfish.Core.Models.Contents.Fields.Checkbox, Catfish.Core';\r\n                                //not sure if this would be right, will likely need to adjust this\r\n                                this.tmpCheckboxTemplate.values = [];\r\n\r\n                                this.tmpDropdownTemplate = JSON.parse(JSON.stringify(this.tmpTextfieldTemplate));\r\n                                this.tmpDropdownTemplate.$type = 'Catfish.Core.Models.Contents.Fields.Dropdown, Catfish.Core';\r\n                                //not sure if this would be right, will likely need to adjust this\r\n                                this.tmpDropdownTemplate.values = [];\r\n\r\n                                this.tmpFileAttachmentTemplate = JSON.parse(JSON.stringify(this.tmpTextfieldTemplate));\r\n                                this.tmpFileAttachmentTemplate.$type = 'Catfish.Core.Models.Contents.Fields.FileAttachment, Catfish.Core';\r\n                                this.tmpFileAttachmentTemplate.values = [];\r\n\r\n                                this.tmpDisplayFieldTemplate = JSON.parse(JSON.stringify(this.tmpTextfieldTemplate));\r\n                                this.tmpDisplayFieldTemplate.$type = 'Catfish.Core.Models.Contents.Fields.DisplayField, Catfish.Core';\r\n                                this.tmpDisplayFieldTemplate.values = \"\";\r\n\r\n                                resolve();\r\n\r\n                            })\r\n                            .catch(function (error) { console.log(\"error:\", error); });\r\n                    });\r\n\r\n                });\r\n                \r\n            },\r\n        },\r\n        created() {\r\n            this.itemId = window.location.href.substring(window.location.href.lastIndexOf('/') + 1);\r\n            this.load()\r\n                .then(() => {\r\n                    //for popovers\r\n                    $(document).ready(function () {\r\n                        $('[data-toggle=\"popover\"]').popover();\r\n                    });\r\n                });\r\n        }\r\n    });\r\n}"],"sourceRoot":""}