{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./wwwroot/assets/js/catfish.editFieldForm.js","webpack:///./wwwroot/assets/js/catfish.edititem.js"],"names":["Vue","use","Vuelidate","document","getElementById","piranha","editFieldForm","el","components","draggable","quillEditor","data","itemId","finishedGET","attemptedSave","getString","getFieldDefs","names","descriptions","fields","fields_type","id","modelType","TEXTFIELD_TYPE","TEXTAREA_TYPE","CHECKBOX_TYPE","RADIO_TYPE","DROPDOWN_TYPE","INFOSECTION_TYPE","DATE_TYPE","DECIMAL_TYPE","INTEGER_TYPE","MONOLINGUAL_TEXTFIELD_TYPE","textfieldTemplate","textAreaTemplate","radioTemplate","checkboxTemplate","dropdownTemplate","fileAttachmentTemplate","displayFieldTemplate","datePickerTemplate","numberPickerTemplate","monolingualTextFieldTemplate","optionItemTemplate","dropdowns","fieldTypes","DisplayLabel","$type","rightColumnOptions","value","text","fileTypes","saveStatus","saveSuccessfulLabel","saveFailedLabel","saveFieldFormButtonLabel","formTitleLabel","formTitlePlaceholder","formDescriptionLabel","formDescriptionPlaceholder","formFieldLabel","defaultFieldTitle","fieldTitlePlaceholder","fieldDescriptionLabel","fieldDescriptionPlaceholder","settingsLabel","longAnswerFormatTextLabel","choiceOptionLabel","choiceDefaultOptionLabel","choiceAdditionalInputLabel","anyLabel","allowMultipleFilesLabel","wholeNumbersOnlyLabel","requiredLabel","addDescriptionLabel","removeDescriptionLabel","loadingLabel","validations","validationJson","required","Values","$values","$each","Value","Name","Options","OptionText","Content","forEach","field","console","log","methods","checkValidity","event","preventDefault","$v","$invalid","saveFieldForm","validateState","name","indexOrGuid","attribute","$dirty","$error","validateFieldState","fieldIndex","secondIndex","touchNestedItem","isNaN","$touch","onNumberCheckboxChange","fieldTypesToCheck","map","fieldType","index","isIntegerOnly","onDropdownChange","chosenFieldType","tmpId","Id","$set","JSON","parse","stringify","sortItem","collapsingSections","getElementsByClassName","shownSectionIndex","previousSection","nextSection","i","length","classList","contains","from","to","newIndex","split","$","collapse","isCollapsed","oldIndex","prevId","nextId","cloneItem","newItem","uuidv1","showDescription","hasOtherOption","checkAllFileTypes","indexOf","splice","checkCheckboxState","checked","toggleDropdown","fieldId","lastDropdownIdOpened","Object","keys","dropdownId","addNewOption","newOptionItemTemplate","languageOptionItem","push","selectOptionAsDefault","optionIndex","Selected","optionItem","addOtherOption","isDisabled","removeOption","deleteField","addDescription","removeDescription","setStaticValues","StaticItems","editFieldFormLabels","SAVE_SUCCESS_LABEL","SAVE_FAILED_LABEL","SAVE_FIELD_FORM_BUTTON_LABEL","FORM_TITLE_LABEL","FORM_TITLE_PLACEHOLDER","FORM_DESCRIPTION_LABEL","FORM_DESCRIPTION_PLACEHOLDER","FORM_FIELD_LABEL","DEFAULT_FIELD_TITLE","FIELD_TITLE_PLACEHOLDER","FIELD_DESCRIPTION_LABEL","FIELD_DESCRIPTION_PLACEHOLDER","SETTINGS_LABEL","LONG_ANSWER_FORMAT_TEXT_LABEL","CHOICE_OPTION_LABEL","CHOICE_DEFAULT_OPTION_LABEL","CHOICE_ADDITIONAL_INPUT_LABEL","ANY_LABEL","ALLOW_MULTIPLE_FILES_LABEL","WHOLE_NUMBERS_ONLY_LABEL","REQUIRED_LABEL","ADD_DESCRIPTION_LABEL","REMOVE_DESCRIPTION_LABEL","LOADING_LABEL","load","Promise","resolve","reject","permissions","fetch","baseUrl","then","fdResponse","json","fieldDefsResult","defaultField","languageIndex","Description","response","result","Fields","ModelType","error","created","window","location","href","substring","lastIndexOf","ready","popover","on","test","itemlist","postString","content","loading","item","nameAttribute","descriptionAttribute","buttonOptions","mcDropdownButtonLabel","activeOption","languages","en","fr","sp","DEFAULT_LANGUAGE","languageLabels","sections","title","metadataSets","metadataSets_type","metadataSetLabel","inputTypes","originalFieldIndexMaster","originalFields","isInPreviewMode","savePreviewEditButtonType","computed","itemName","get","fetchData","self","MetadataSets","updateBindings","values","setLanguageLabels","setOriginalFields","performMCButtonAction","option","saveForm","validForm","forms","Array","prototype","filter","call","form","stopPropagation","add","method","headers","body","res","ok","setTimeout","bind","each","e","nestable","maxDepth","group","callback","l","attr","items","notifications","status","type","sites","nextTick","addNewEntry","metadataSetId","newEntry","tmp","language","changeButtonLabel","newLabel","entries","metadataSet","flattened","some","count","startingIndex","matched","updated","mounted","tooltip","selector"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"main\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import draggable from 'vuedraggable';\r\n//import 'quill/dist/quill.core.css'\r\n//import 'quill/dist/quill.snow.css'\r\n//import 'quill/dist/quill.bubble.css'\r\nimport StaticItems from '../static/string-values.json';\r\n\r\nimport { quillEditor } from 'vue-quill-editor'\r\nimport { v1 as uuidv1 } from 'uuid';\r\n\r\nimport { required, requiredIf } from 'vuelidate/lib/validators'\r\nimport Vuelidate from 'vuelidate'\r\nVue.use(Vuelidate)\r\n\r\n/**\r\n * Javascript Vue code for creating the editable form from existing data in FieldContainerEdit.cshtml.\r\n * It is modelled after the file piranha.pagelist.js in Piranha's source code.\r\n */\r\n\r\n\r\n/**\r\n * This check makes sure the file is only run on the page with\r\n * the element. Not a huge deal, can be removed if it's causing issues.\r\n */\r\nif (document.getElementById(\"edit-field-form-page\")) {\r\n    piranha.editFieldForm = new Vue({\r\n        el: '#edit-field-form-page',\r\n        components: {\r\n            draggable,\r\n            quillEditor,\r\n        },\r\n        data() {\r\n            return {\r\n                itemId: null,\r\n                finishedGET: false,\r\n                attemptedSave: false,\r\n\r\n                //api strings\r\n                getString: \"manager/api/forms/\",\r\n                //this one is for the default templates\r\n                getFieldDefs: \"manager/api/forms/fielddefs\",\r\n                //postString: \"manager/items/save\",\r\n\r\n                names: null,\r\n                descriptions: null,\r\n                fields: null,\r\n                fields_type: null,\r\n                id: null,\r\n                modelType: null,\r\n\r\n                //missing file attachment?\r\n                TEXTFIELD_TYPE: \"Catfish.Core.Models.Contents.Fields.TextField, Catfish.Core\",\r\n                TEXTAREA_TYPE: \"Catfish.Core.Models.Contents.Fields.TextArea, Catfish.Core\",\r\n                CHECKBOX_TYPE: \"Catfish.Core.Models.Contents.Fields.CheckboxField, Catfish.Core\",\r\n                RADIO_TYPE: \"Catfish.Core.Models.Contents.Fields.RadioField, Catfish.Core\",\r\n                DROPDOWN_TYPE: \"Catfish.Core.Models.Contents.Fields.SelectField, Catfish.Core\",\r\n                INFOSECTION_TYPE: \"Catfish.Core.Models.Contents.Fields.InfoSection, Catfish.Core\",\r\n\r\n                DATE_TYPE: \"Catfish.Core.Models.Contents.Fields.DateField, Catfish.Core\",\r\n                DECIMAL_TYPE: \"Catfish.Core.Models.Contents.Fields.DecimalField, Catfish.Core\",\r\n                INTEGER_TYPE: \"Catfish.Core.Models.Contents.Fields.IntegerField, Catfish.Core\",\r\n                MONOLINGUAL_TEXTFIELD_TYPE: \"Catfish.Core.Models.Contents.Fields.MonolingualTextField, Catfish.Core\",\r\n\r\n                //templates\r\n                textfieldTemplate: null,\r\n                textAreaTemplate: null,\r\n                radioTemplate: null,\r\n                checkboxTemplate: null,\r\n                dropdownTemplate: null,\r\n                fileAttachmentTemplate: null,\r\n                displayFieldTemplate: null,\r\n\r\n                datePickerTemplate: null,\r\n                numberPickerTemplate: null,\r\n                monolingualTextFieldTemplate: null,\r\n\r\n                optionItemTemplate: null,\r\n\r\n\r\n                dropdowns: {},\r\n                //temp, need to call an api for these\r\n                fieldTypes: [\r\n                    { DisplayLabel: 'Select One', $type: null },\r\n                ],\r\n\r\n                rightColumnOptions: [\r\n                    {\r\n                        value: 0,\r\n                        text: \"Add Question\"\r\n                    },\r\n                    {\r\n                        value: 1,\r\n                        text: \"Add Section (TBA)\"\r\n                    }\r\n                ],\r\n\r\n                //will be sent through API, temp\r\n                fileTypes: [\r\n                    \"PDF\", \"DOC\", \"DOCX\", \"PS\", \"EPS\", \"JPG\", \"PNG\"\r\n                ],\r\n\r\n\r\n                saveStatus: 0,\r\n\r\n                //Constants TODO change above items into constants from static file\r\n                saveSuccessfulLabel: null,\r\n                saveFailedLabel: null,\r\n                saveFieldFormButtonLabel: null,\r\n\r\n                formTitleLabel: null,\r\n                formTitlePlaceholder: null,\r\n                formDescriptionLabel: null,\r\n                formDescriptionPlaceholder: null,\r\n                formFieldLabel: null,\r\n                defaultFieldTitle: null,\r\n                fieldTitlePlaceholder: null,\r\n                fieldDescriptionLabel: null,\r\n                fieldDescriptionPlaceholder: null,\r\n                settingsLabel: null,\r\n\r\n                longAnswerFormatTextLabel: null,\r\n                choiceOptionLabel: null,\r\n                choiceDefaultOptionLabel: null,\r\n                choiceAdditionalInputLabel: null,\r\n                anyLabel: null,\r\n                allowMultipleFilesLabel: null,\r\n                wholeNumbersOnlyLabel: null,\r\n                requiredLabel: null,\r\n                addDescriptionLabel: null,\r\n                removeDescriptionLabel: null,\r\n                loadingLabel: null\r\n            }\r\n        },\r\n        validations() {\r\n\r\n            let validationJson = {\r\n                names: {\r\n                    required,\r\n                    Values: {\r\n                        $values: {\r\n                            $each: {\r\n                                Value: {\r\n                                    required,\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                descriptions: {\r\n                    Values: {\r\n                        $values: {\r\n                            $each: {\r\n                                Value: {\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                fields: {\r\n                    $each: {\r\n                        Name: {\r\n                            Values: {\r\n                                $values: {\r\n                                    $each: {\r\n                                        Value: {\r\n                                            required\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        },\r\n                        Options: {\r\n                            $values: {\r\n                                $each: {\r\n                                    OptionText: {\r\n                                        Values: {\r\n                                            $values: {\r\n                                                $each: {\r\n                                                    Value: {\r\n                                                        required\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        },\r\n                        //for info section - $values is an array of characters\r\n                        Content: {\r\n                            Values: {\r\n                                $values: {\r\n                                    required\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n                    }\r\n                }\r\n            };\r\n\r\n            this.fields.forEach((field) => {\r\n                if (field.$type == this.RADIO_TYPE || field.$type == this.CHECKBOX_TYPE ||\r\n                    field.$type == this.DROPDOWN_TYPE ||\r\n                    field.$type == 'Catfish.Core.Models.Contents.Fields.FileAttachment, Catfish.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'\r\n                ) {\r\n                    console.log(\"ran this\");\r\n                    validationJson.fields.$each['Values'] = { required };\r\n                    validationJson.fields.$each.Values['$values'] = {};\r\n                    validationJson.fields.$each.Values['$values']['$each'] = {};\r\n                    validationJson.fields.$each.Values['$values']['$each']['Value'] = { required };\r\n                    return validationJson;\r\n                }\r\n            });\r\n\r\n            validationJson.fields.$each['Values'] = {};\r\n            return validationJson;\r\n        },\r\n        methods: {\r\n\r\n            /**\r\n\t\t\t * Checks all the inputs to make sure the data is valid\r\n\t\t\t * @returns true is valid, false is invalid.\r\n\t\t\t **/\r\n            checkValidity(event) {\r\n                event.preventDefault();\r\n\r\n                this.attemptedSave = true;\r\n\r\n                if (this.$v.$invalid) {\r\n                    console.log(\"something is invalid\", this.$v);\r\n                } else {\r\n                    console.log(\"all good!\");\r\n                    this.saveFieldForm(event);\r\n\t\t\t\t}\r\n\r\n            },\r\n\r\n            /**\r\n\t\t\t * Checks that the value matches its requirements from Vuelidate\r\n\t\t\t  * (ie required, is a string, etc)\r\n\t\t\t * @param name the name of the v-model binded to.\r\n\t\t\t */\r\n            validateState(name, indexOrGuid = null, attribute = null) {\r\n                if (indexOrGuid != null) {\r\n                    //this is a $each situation - array\r\n                    const { $dirty, $invalid } = this.$v[name][attribute].$values.$each[indexOrGuid].Value;\r\n                    return $dirty ? !$invalid : null;\r\n                } else {\r\n                    const { $dirty, $error } = this.$v[name];\r\n                    return $dirty ? !$error : null;\r\n                }\r\n            },\r\n\r\n            /**\r\n             * TODO: work this one and above into a generic function\r\n             * This one is for fields only, very hardcody bc it has so many embedded attributes\r\n             * @param {any} fieldIndex\r\n             * @param {any} name\r\n             * @param {any} secondIndex\r\n             */\r\n            validateFieldState(fieldIndex, name, secondIndex = null) {\r\n                if (secondIndex == null) {\r\n                    const { $dirty, $invalid } = this.$v.fields.$each[fieldIndex][name];\r\n                    return $dirty ? !$invalid : null;\r\n                } else {\r\n                    const { $dirty, $invalid } = this.$v.fields.$each[fieldIndex][name].Values.$values.$each[secondIndex].Value;\r\n                    return $dirty ? !$invalid : null;\r\n\t\t\t\t}\r\n\r\n\t\t\t},\r\n\r\n\r\n            /**\r\n\t\t\t * Touches nested items from Vuex so validation works properly.\r\n\t\t\t */\r\n            touchNestedItem(name, indexOrGuid = null, attribute = null, event = null) {\r\n                if (indexOrGuid != null) {\r\n                    if (isNaN(indexOrGuid)) {\r\n                        this.$v[name][indexOrGuid][attribute].$touch();\r\n                    } else {\r\n                        this.$v[name][attribute].$values.$each[indexOrGuid].Value.$touch();\r\n                    }\r\n\r\n                }\r\n            },\r\n\r\n            /**\r\n             * \r\n             * @param {any} fieldIndex\r\n             */\r\n            onNumberCheckboxChange(event, fieldIndex) {\r\n                console.log(\"e\", event);\r\n                //this.fields[fieldIndex].$type\r\n\r\n            },\r\n\r\n\r\n            /**\r\n             * Saves the field form\r\n             * @param {any} event\r\n             */\r\n            saveFieldForm(event) {\r\n                //console.log(\"saving goes here\", event);\r\n\r\n                //handle integer/decimal field if any - integer and decimal are separate classes in backend\r\n                let fieldTypesToCheck = this.fields.map((field) => field.$type);\r\n                fieldTypesToCheck.forEach((fieldType, index) => {\r\n                    if (fieldType == this.DECIMAL_TYPE && this.fields[index].isIntegerOnly) {\r\n                        this.fields[index].$type = this.INTEGER_TYPE;\r\n                    } else if (fieldType == this.INTEGER_TYPE && !this.fields[index].isIntegerOnly) {\r\n                        this.fields[index].$type = this.DECIMAL_TYPE;\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n                console.log(\"the name, description, and fields saved TBA\", this.names, this.descriptions, this.fields);\r\n                this.attemptedSave = false;\r\n            },\r\n\r\n            /**\r\n             * Changes the type of field via choice from the dropdown\r\n             * @param {any} fieldIndex the fieldIndex being changed\r\n             * @param {any} chosenFieldType the chosen field type of the dropdown\r\n             */\r\n            onDropdownChange(fieldIndex, chosenFieldType) {\r\n                //dont want to lose any values that are not originally a part of the template tho...\r\n                let tmpId = this.fields[fieldIndex].Id;\r\n                switch (chosenFieldType) {\r\n                    case this.TEXTFIELD_TYPE:\r\n                        //textfield\r\n                        this.$set(this.fields, fieldIndex, JSON.parse(JSON.stringify(this.textfieldTemplate)) );\r\n                        this.fields[fieldIndex].Id = tmpId;\r\n                        break;\r\n\r\n                    case this.TEXTAREA_TYPE:\r\n                        //textarea\r\n                        this.$set(this.fields, fieldIndex, JSON.parse(JSON.stringify(this.textAreaTemplate)) );\r\n                        this.fields[fieldIndex].Id = tmpId;\r\n                        break;\r\n\r\n                    case this.RADIO_TYPE:\r\n                        //radio/mc\r\n                        this.$set(this.fields, fieldIndex, JSON.parse(JSON.stringify(this.radioTemplate)) );\r\n                        this.fields[fieldIndex].Id = tmpId;\r\n                        break;\r\n\r\n                    case this.CHECKBOX_TYPE:\r\n                        //checkbox\r\n                        this.$set(this.fields, fieldIndex, JSON.parse(JSON.stringify(this.checkboxTemplate)) );\r\n                        this.fields[fieldIndex].Id = tmpId;\r\n                        break;\r\n\r\n                    case this.DROPDOWN_TYPE:\r\n                        //dropdown\r\n                        this.$set(this.fields, fieldIndex, JSON.parse(JSON.stringify(this.dropdownTemplate)) );\r\n                        this.fields[fieldIndex].Id = tmpId;\r\n                        break;\r\n\r\n                    case \"Catfish.Core.Models.Contents.Fields.FileAttachment, Catfish.Core\":\r\n                        //fileattachment\r\n                        this.fields[fieldIndex].$type = 'Catfish.Core.Models.Contents.Fields.FileAttachment, Catfish.Core';\r\n                        break;\r\n\r\n                    case this.INFOSECTION_TYPE:\r\n                        //displayfield\r\n                        this.$set(this.fields, fieldIndex, JSON.parse(JSON.stringify(this.displayFieldTemplate)) );\r\n                        this.fields[fieldIndex].Id = tmpId;\r\n                        break;\r\n\r\n                    case this.DATE_TYPE:\r\n                        //displayfield\r\n                        this.$set(this.fields, fieldIndex, JSON.parse(JSON.stringify(this.datePickerTemplate)) );\r\n                        this.fields[fieldIndex].Id = tmpId;\r\n                        break;\r\n\r\n                    case this.DECIMAL_TYPE:\r\n                    case this.INTEGER_TYPE:\r\n                        //displayfield\r\n                        this.$set(this.fields, fieldIndex, JSON.parse(JSON.stringify(this.numberPickerTemplate)) );\r\n                        this.fields[fieldIndex].Id = tmpId;\r\n                        break;\r\n\r\n                    case this.MONOLINGUAL_TEXTFIELD_TYPE:\r\n                        //displayfield\r\n                        this.$set(this.fields, fieldIndex, JSON.parse(JSON.stringify(this.monolingualTextFieldTemplate)) );\r\n                        this.fields[fieldIndex].Id = tmpId;\r\n                        break;\r\n\t\t\t\t}\r\n            },\r\n\r\n\r\n            /**\r\n             * Fire when any item sorted/moved (includes adding new item to list)\r\n             * @param {any} event\r\n             */\r\n            sortItem(event) {\r\n                let collapsingSections = document.getElementsByClassName('collapsing-items');\r\n                console.log(\"event on sort:\", event);\r\n                let shownSectionIndex = null;\r\n                let previousSection = null;\r\n                let nextSection = null;\r\n\r\n                //track sections above and below current open item\r\n                for (let i = 0; i < collapsingSections.length; i++) {\r\n                    if (collapsingSections[i].classList.contains('show')) {\r\n                        shownSectionIndex = i;\r\n                        previousSection = (i - 1 >= 0) ? collapsingSections[i - 1] : null;\r\n                        nextSection = (i + 1 < collapsingSections.length) ? collapsingSections[i + 1] : null;\r\n\t\t\t\t\t}\r\n                }\r\n\r\n                //if all items closed and not adding something new, just return\r\n                if (shownSectionIndex == null && previousSection == null && nextSection == null\r\n                    && event.from.id == event.to.id) {\r\n                    return;\r\n\t\t\t\t}\r\n\r\n                //the field id of the sorted section\r\n                let tmpId = collapsingSections[event.newIndex].id.split('collapse-')[1];\r\n\r\n                //if item is new, open that one\r\n                if (event.from.id != event.to.id) {\r\n                    console.log(\"added new item\", collapsingSections[event.newIndex].id);\r\n                    $('#' + collapsingSections[event.newIndex].id).collapse('show');\r\n                    this.dropdowns[tmpId].isCollapsed = false;\r\n                    if (shownSectionIndex != null) {\r\n                        this.dropdowns[tmpId].isCollapsed = true;\r\n\t\t\t\t\t}\r\n                    return;\r\n                }\r\n\r\n                //if the user is dragging the showing item around\r\n                if (shownSectionIndex == event.oldIndex) {\r\n                    console.log(\"dragging showing item\");\r\n                    $('#' + collapsingSections[event.newIndex].id).collapse('show');\r\n                    this.dropdowns[tmpId].isCollapsed = false;\r\n                    if (shownSectionIndex != null) {\r\n                        this.dropdowns[tmpId].isCollapsed = true;\r\n\t\t\t\t\t}\r\n                    return;\r\n\t\t\t\t}\r\n\r\n                //move show class to the index below open item\r\n                if (event.oldIndex <= shownSectionIndex && shownSectionIndex <= event.newIndex) {\r\n\r\n                    //test suppressing animation - not sure if it will work, cant \r\n                    //remove .collapsing bc it's not applied until the collapse call is made\r\n                    //previousSection.addClass('suppress-collapsing-animation');\r\n                    //$('#' + previousSection.id).css({ \"transition\": \"none\", \"display\": \"none\"}); doesnt work, must override\r\n\r\n                    console.log(\"moved item DOWN over shown\");\r\n                    $('#' + previousSection.id).collapse('show');\r\n                    let prevId = previousSection.id.split('collapse-')[1];\r\n                    this.dropdowns[prevId].isCollapsed = false;\r\n\r\n                    //move item above open item\r\n                } else if (event.oldIndex >= shownSectionIndex && shownSectionIndex >= event.newIndex) {\r\n                    console.log(\"moved item UP over shown\");\r\n                    $('#' + nextSection.id).collapse('show');\r\n                    let nextId = nextSection.id.split('collapse-')[1];\r\n                    this.dropdowns[nextId].isCollapsed = false;\r\n                } else {\r\n                    //just sorting, does not interfere with the open item\r\n                    return;\r\n\t\t\t\t}\r\n\r\n                this.dropdowns[tmpId].isCollapsed = true;\r\n\t\t\t},\r\n\r\n\r\n            /**\r\n             * Returns a custom clone\r\n             * @param event\r\n             */\r\n            cloneItem(event) {\r\n                let newItem = {};\r\n\r\n                //hardcoded until templates are provided\r\n                newItem = JSON.parse(JSON.stringify(this.textfieldTemplate)); //event.Template\r\n                \r\n                newItem.Id = uuidv1();\r\n                this.$set(this.dropdowns, newItem.Id, {\r\n                    isCollapsed: false,\r\n                    showDescription: false,\r\n                    hasOtherOption: false\r\n                });\r\n                console.log(newItem);\r\n\r\n                return newItem;\r\n            },\r\n\r\n            /**\r\n             * Checks all options - ie user has checked 'Any' option in File Upload.\r\n             * If all already checked, uncheck them all\r\n             * @param {any} field\r\n             */\r\n            checkAllFileTypes(field) {\r\n                if (field.Values.$values.indexOf(\"any\") > -1) {\r\n                    let index = field.Values.$values.indexOf(\"any\");\r\n                    field.Values.$values.splice(index, 1);\r\n\t\t\t\t}\r\n\r\n                if (field.Values.$values.length == this.fileTypes.length) {\r\n                    //uncheck all\r\n                    field.Values.$values = [];\r\n                } else {\r\n                    //check all\r\n                    field.Values.$values = [];\r\n                    field.Values.$values = this.fileTypes;\r\n\t\t\t\t}\r\n\r\n            },\r\n\r\n            /**\r\n             * Checks if the checkboxes are all checked and will check 'any',\r\n             * or if 'any' is checked and the user unchecks a checkbox, uncheck 'any'\r\n             * @param {any} field\r\n             */\r\n            checkCheckboxState(field, fieldIndex) {\r\n                if (field.Values.$values.length == this.fileTypes.length) {\r\n                    //check the 'any' box\r\n                    document.getElementById(\"filetype-checkbox-\" + fieldIndex + \"-\" + \"any\").checked = true;\r\n                } else {\r\n                    //uncheck the 'any' box\r\n                    document.getElementById(\"filetype-checkbox-\" + fieldIndex + \"-\" + \"any\").checked = false;\r\n\t\t\t\t}\r\n            },\r\n\r\n            /**\r\n             * Toggles the field to either open or closed.\r\n             * Icon for showing open/closed relies on open/closed state,\r\n             * hence the necessity for this function.\r\n             * \r\n             * @param {any} fieldId the field's index to open/close\r\n             */\r\n            toggleDropdown(fieldId) {\r\n                let lastDropdownIdOpened = '';\r\n                for (let dropdownId of Object.keys(this.dropdowns)) {\r\n                    if (this.dropdowns[dropdownId].isCollapsed == false) {\r\n                        lastDropdownIdOpened = dropdownId;\r\n\t\t\t\t\t}\r\n                }\r\n\r\n                if (fieldId != lastDropdownIdOpened && lastDropdownIdOpened != '') {\r\n                    //close dropdown that is not the same one previously opened\r\n                    this.dropdowns[lastDropdownIdOpened].isCollapsed = true;\r\n\t\t\t\t}\r\n\r\n                this.dropdowns[fieldId].isCollapsed === true ? this.dropdowns[fieldId].isCollapsed = false : this.dropdowns[fieldId].isCollapsed = true;\r\n            },\r\n\r\n            /**\r\n             * Adds new option to either multiple choice or checkbox\r\n             * @param {any} field the field to push multiple choice or checkbox objects onto\r\n             */\r\n            addNewOption(field) {\r\n                let newOptionItemTemplate = JSON.parse(JSON.stringify(this.optionItemTemplate));\r\n                newOptionItemTemplate.Id = uuidv1();\r\n                newOptionItemTemplate.OptionText.Id = uuidv1();\r\n                for (let languageOptionItem of newOptionItemTemplate.OptionText.Values.$values) {\r\n                    languageOptionItem.Id = uuidv1();\r\n\t\t\t\t}\r\n\r\n                field.Options.$values.push(newOptionItemTemplate);\r\n                console.log(\"field options\", field.Options.$values);\r\n            },\r\n\r\n            /**\r\n             * \r\n             * @param {any} fieldIndex\r\n             * @param {any} optionIndex\r\n             */\r\n            selectOptionAsDefault(fieldIndex, optionIndex) {\r\n                //if selected already, deselect it\r\n\r\n                if (this.fields[fieldIndex].Options.$values[optionIndex].Selected === null\r\n                    || !this.fields[fieldIndex].Options.$values[optionIndex].Selected) {\r\n                    this.fields[fieldIndex].Options.$values[optionIndex].Selected = true;\r\n                } else {\r\n                    this.fields[fieldIndex].Options.$values[optionIndex].Selected = false;\r\n\t\t\t\t}\r\n\r\n                //desselect any others in the group\r\n                for (let optionItem of this.fields[fieldIndex].Options.$values) {\r\n                    if (optionItem.Id == this.fields[fieldIndex].Options.$values[optionIndex].Id) {\r\n                        continue;\r\n\t\t\t\t\t}\r\n                    optionItem.Selected = false;\r\n\t\t\t\t}\r\n\r\n                console.log(this.fields[fieldIndex].Options.$values);\r\n\t\t\t},\r\n\r\n            /**\r\n             * Adds 'Other' option to set for user to fill\r\n             * @param {any} field\r\n             */\r\n            addOtherOption(field) {\r\n                field.Values.$values.push({\r\n                    text: 'Other...',\r\n                    isDisabled: true,\r\n                    id: -1,\r\n                });\r\n                this.dropdowns[field.Id].hasOtherOption = true;\r\n            },\r\n\r\n            /**\r\n             * Removes an option item\r\n             * @param {any} fieldIndex\r\n             * @param {any} optionIndex\r\n             */\r\n            removeOption(fieldIndex, optionIndex) {\r\n                this.fields[fieldIndex].Options.$values.splice(optionIndex, 1);\r\n            },\r\n\r\n            /**\r\n             * Deletes a given field\r\n             * @param {any} fieldIndex\r\n             */\r\n            deleteField(fieldIndex) {\r\n                this.fields.splice(fieldIndex, 1);\r\n                delete this.dropdowns[fieldIndex];\r\n            },\r\n\r\n            /**\r\n             * Adds the description field to the field.\r\n             * @param {any} fieldId\r\n             */\r\n            addDescription(fieldId) {\r\n                this.dropdowns[fieldId].showDescription = true;\r\n            },\r\n\r\n            /**\r\n             * Removes the description field from the field.\r\n             * Not sure if this should delete the info in it, if any.\r\n             * CURRENTLY it does not.\r\n             * @param {any} fieldId\r\n             */\r\n            removeDescription(fieldId) {\r\n                this.dropdowns[fieldId].showDescription = false;\r\n            },\r\n\r\n            /**\r\n             * Sets the static strings on the page \r\n             **/\r\n            setStaticValues() {\r\n                this.saveSuccessfulLabel = StaticItems.editFieldFormLabels.SAVE_SUCCESS_LABEL;\r\n                this.saveFailedLabel = StaticItems.editFieldFormLabels.SAVE_FAILED_LABEL;\r\n                this.saveFieldFormButtonLabel = StaticItems.editFieldFormLabels.SAVE_FIELD_FORM_BUTTON_LABEL;\r\n\r\n                this.formTitleLabel = StaticItems.editFieldFormLabels.FORM_TITLE_LABEL;\r\n                this.formTitlePlaceholder = StaticItems.editFieldFormLabels.FORM_TITLE_PLACEHOLDER;\r\n                this.formDescriptionLabel = StaticItems.editFieldFormLabels.FORM_DESCRIPTION_LABEL;\r\n                this.formDescriptionPlaceholder = StaticItems.editFieldFormLabels.FORM_DESCRIPTION_PLACEHOLDER;\r\n                this.formFieldLabel = StaticItems.editFieldFormLabels.FORM_FIELD_LABEL;\r\n                this.defaultFieldTitle = StaticItems.editFieldFormLabels.DEFAULT_FIELD_TITLE;\r\n                this.fieldTitlePlaceholder = StaticItems.editFieldFormLabels.FIELD_TITLE_PLACEHOLDER;\r\n                this.fieldDescriptionLabel = StaticItems.editFieldFormLabels.FIELD_DESCRIPTION_LABEL;\r\n                this.fieldDescriptionPlaceholder = StaticItems.editFieldFormLabels.FIELD_DESCRIPTION_PLACEHOLDER;\r\n                this.settingsLabel = StaticItems.editFieldFormLabels.SETTINGS_LABEL;\r\n                this.longAnswerFormatTextLabel = StaticItems.editFieldFormLabels.LONG_ANSWER_FORMAT_TEXT_LABEL;\r\n                this.choiceOptionLabel = StaticItems.editFieldFormLabels.CHOICE_OPTION_LABEL;\r\n                this.choiceDefaultOptionLabel = StaticItems.editFieldFormLabels.CHOICE_DEFAULT_OPTION_LABEL;\r\n                this.choiceAdditionalInputLabel = StaticItems.editFieldFormLabels.CHOICE_ADDITIONAL_INPUT_LABEL;\r\n                this.anyLabel = StaticItems.editFieldFormLabels.ANY_LABEL;\r\n                this.allowMultipleFilesLabel = StaticItems.editFieldFormLabels.ALLOW_MULTIPLE_FILES_LABEL;\r\n                this.wholeNumbersOnlyLabel = StaticItems.editFieldFormLabels.WHOLE_NUMBERS_ONLY_LABEL;\r\n                this.requiredLabel = StaticItems.editFieldFormLabels.REQUIRED_LABEL;\r\n                this.addDescriptionLabel = StaticItems.editFieldFormLabels.ADD_DESCRIPTION_LABEL;\r\n                this.removeDescriptionLabel = StaticItems.editFieldFormLabels.REMOVE_DESCRIPTION_LABEL;\r\n                this.loadingLabel = StaticItems.editFieldFormLabels.LOADING_LABEL;\r\n            },\r\n\r\n            /**\r\n              * Fetches and loads the data from an API call\r\n              * */\r\n            load() {\r\n                //var self = this;\r\n                return new Promise((resolve, reject) => {\r\n                    piranha.permissions.load(() => {\r\n                        fetch(piranha.baseUrl + this.getFieldDefs)\r\n                            .then((fdResponse) => { return fdResponse.json(); })\r\n                            .then((fieldDefsResult) => {\r\n                                console.log(\"second res\", fieldDefsResult)\r\n                                \r\n                                for (let defaultField of fieldDefsResult.$values) {\r\n\r\n                                    //store fieldType for dropdown\r\n                                    if (defaultField.$type != this.INTEGER_TYPE) {\r\n                                        this.fieldTypes.push({\r\n                                            $type: defaultField.$type,\r\n                                            DisplayLabel: defaultField.DisplayLabel\r\n                                        });\r\n\t\t\t\t\t\t\t\t\t}\r\n                                    \r\n\r\n                                    //templates handled here, remove any default data and store the structure\r\n                                    switch (defaultField.$type) {\r\n                                        case this.TEXTFIELD_TYPE:\r\n                                            this.textfieldTemplate = defaultField;\r\n\r\n                                            for (let languageIndex in this.textfieldTemplate.Name.Values.$values) {\r\n                                                this.$set(this.textfieldTemplate.Name.Values.$values[languageIndex], 'Value', '');\r\n                                                this.$set(this.textfieldTemplate.Description.Values.$values[languageIndex], 'Value', '');\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n                                            break;\r\n                                        case this.TEXTAREA_TYPE:\r\n                                            this.textAreaTemplate = defaultField;\r\n\r\n                                            for (let languageIndex in this.textAreaTemplate.Name.Values.$values) {\r\n                                                this.$set(this.textAreaTemplate.Name.Values.$values[languageIndex], 'Value', '');\r\n                                                this.$set(this.textAreaTemplate.Description.Values.$values[languageIndex], 'Value', '');\r\n                                            }\r\n                                            break;\r\n                                        case this.RADIO_TYPE:\r\n                                            this.radioTemplate = defaultField;\r\n                                            //stores an option item to be used by all option-item fields (radio/checkbox/dropdown)\r\n                                            this.optionItemTemplate = JSON.parse(JSON.stringify(defaultField.Options.$values[0]));\r\n                                            //if more than one option, remove the other options\r\n                                            if (defaultField.Options.$values.length > 1){\r\n                                                //delete all other options except for first one\r\n                                                this.radioTemplate.Options.$values.splice(1, defaultField.Options.$values.length - 1);\r\n                                            }\r\n\r\n                                            for (let languageIndex in this.radioTemplate.Name.Values.$values) {\r\n                                                this.$set(this.radioTemplate.Name.Values.$values[languageIndex], 'Value', '');\r\n                                                this.$set(this.radioTemplate.Description.Values.$values[languageIndex], 'Value', '');\r\n                                                this.$set(this.radioTemplate.Options.$values[0].OptionText.Values.$values[languageIndex], 'Value', '');\r\n\r\n                                                this.$set(this.optionItemTemplate.OptionText.Values.$values[languageIndex], 'Value', '');\r\n                                            }\r\n                                            break;\r\n\r\n                                        case this.CHECKBOX_TYPE:\r\n                                            this.checkboxTemplate = defaultField;\r\n\r\n                                            //if more than one option, remove the other options\r\n                                            if (defaultField.Options.$values.length > 1) {\r\n                                                //delete all other options except for first one\r\n                                                this.checkboxTemplate.Options.$values.splice(1, defaultField.Options.$values.length - 1);\r\n                                            }\r\n\r\n                                            for (let languageIndex in this.checkboxTemplate.Name.Values.$values) {\r\n                                                this.$set(this.checkboxTemplate.Name.Values.$values[languageIndex], 'Value', '');\r\n                                                this.$set(this.checkboxTemplate.Description.Values.$values[languageIndex], 'Value', '');\r\n                                                this.$set(this.checkboxTemplate.Options.$values[0].OptionText.Values.$values[languageIndex], 'Value', '');\r\n                                            }\r\n                                            break;\r\n\r\n                                        case this.DROPDOWN_TYPE:\r\n                                            this.dropdownTemplate = defaultField;\r\n\r\n                                            //if more than one option, remove the other options\r\n                                            if (defaultField.Options.$values.length > 1) {\r\n                                                //delete all other options except for first one\r\n                                                this.dropdownTemplate.Options.$values.splice(1, defaultField.Options.$values.length - 1);\r\n                                            }\r\n\r\n                                            for (let languageIndex in this.dropdownTemplate.Name.Values.$values) {\r\n                                                this.$set(this.dropdownTemplate.Name.Values.$values[languageIndex], 'Value', '');\r\n                                                this.$set(this.dropdownTemplate.Description.Values.$values[languageIndex], 'Value', '');\r\n                                                this.$set(this.dropdownTemplate.Options.$values[0].OptionText.Values.$values[languageIndex], 'Value', '');\r\n                                            }\r\n                                            break;\r\n\r\n                                        case this.INFOSECTION_TYPE:\r\n                                            this.displayFieldTemplate = defaultField;\r\n                                            //temporary line to prevent an error. \r\n                                            //QuillEditor expects $values to be type string, but it comes in as an array\r\n                                            this.displayFieldTemplate.Content.Values.$values = '';\r\n\r\n                                            for (let languageIndex in this.displayFieldTemplate.Name.Values.$values) {\r\n                                                this.$set(this.displayFieldTemplate.Name.Values.$values[languageIndex], 'Value', '');\r\n                                                this.$set(this.displayFieldTemplate.Description.Values.$values[languageIndex], 'Value', '');\r\n                                            }\r\n                                            break;\r\n\r\n                                        case this.DATE_TYPE:\r\n                                            this.datePickerTemplate = defaultField;\r\n\r\n                                            for (let languageIndex in this.datePickerTemplate.Name.Values.$values) {\r\n                                                this.$set(this.datePickerTemplate.Name.Values.$values[languageIndex], 'Value', '');\r\n                                                this.$set(this.datePickerTemplate.Description.Values.$values[languageIndex], 'Value', '');\r\n                                            }\r\n                                            break;\r\n\r\n                                        case this.DECIMAL_TYPE:\r\n                                            this.numberPickerTemplate = defaultField;\r\n                                            this.numberPickerTemplate.isIntegerOnly = false;\r\n\r\n                                            for (let languageIndex in this.numberPickerTemplate.Name.Values.$values) {\r\n                                                this.$set(this.numberPickerTemplate.Name.Values.$values[languageIndex], 'Value', '');\r\n                                                this.$set(this.numberPickerTemplate.Description.Values.$values[languageIndex], 'Value', '');\r\n                                            }\r\n                                            break;\r\n\r\n                                        case this.MONOLINGUAL_TEXTFIELD_TYPE:\r\n                                            this.monolingualTextFieldTemplate = defaultField;\r\n\r\n                                            for (let languageIndex in this.monolingualTextFieldTemplate.Name.Values.$values) {\r\n                                                this.$set(this.monolingualTextFieldTemplate.Name.Values.$values[languageIndex], 'Value', '');\r\n                                                this.$set(this.monolingualTextFieldTemplate.Description.Values.$values[languageIndex], 'Value', '');\r\n                                            }\r\n                                            break;\r\n                                        //fileattachment need to be added from the backend\r\n                                    }\r\n                                    \r\n                                }\r\n                                \r\n                                //TODO handle this area now that all data is being sent with api\r\n                                //temp set other values that i dont have sample data for\r\n                                //guessing for what will be needed, adjust when dummy data given\r\n                                //this.textAreaTemplate = JSON.parse(JSON.stringify(this.textfieldTemplate));\r\n                                //this.textAreaTemplate.$type = 'Catfish.Core.Models.Contents.Fields.TextArea, Catfish.Core';\r\n\r\n                                //this.radioTemplate = JSON.parse(JSON.stringify(this.textfieldTemplate));\r\n                                //this.radioTemplate.$type = 'Catfish.Core.Models.Contents.Fields.Radio, Catfish.Core';\r\n                                //not sure if this would be right, will likely need to adjust this\r\n                                //this.radioTemplate.Values.$values = [];\r\n\r\n                                //this.checkboxTemplate = JSON.parse(JSON.stringify(this.textfieldTemplate));\r\n                                //this.checkboxTemplate.$type = 'Catfish.Core.Models.Contents.Fields.Checkbox, Catfish.Core';\r\n                                //not sure if this would be right, will likely need to adjust this\r\n                                //this.checkboxTemplate.Values.$values = [];\r\n\r\n                                //this.dropdownTemplate = JSON.parse(JSON.stringify(this.textfieldTemplate));\r\n                                //this.dropdownTemplate.$type = 'Catfish.Core.Models.Contents.Fields.Dropdown, Catfish.Core';\r\n                                //not sure if this would be right, will likely need to adjust this\r\n                                //this.dropdownTemplate.Values.$values = [];\r\n\r\n                                this.fileAttachmentTemplate = JSON.parse(JSON.stringify(this.textfieldTemplate));\r\n                                this.fileAttachmentTemplate.$type = 'Catfish.Core.Models.Contents.Fields.FileAttachment, Catfish.Core';\r\n                                this.fileAttachmentTemplate.Values.$values = [];\r\n\r\n                                //this.displayFieldTemplate = JSON.parse(JSON.stringify(this.textfieldTemplate));\r\n                                //this.displayFieldTemplate.$type = 'Catfish.Core.Models.Contents.Fields.DisplayField, Catfish.Core';\r\n                                //this.displayFieldTemplate.Values.$values = \"\";\r\n\r\n                            })\r\n                            .then(() => {\r\n                                //this.finishedGET = true; test for empty return, remove later (or dont)\r\n                                return fetch(piranha.baseUrl + this.getString + this.itemId);\r\n                            })\r\n                            .then((response) => { return response.json(); })\r\n                            .then((result) => {\r\n                                //data for this form handled here\r\n\r\n                                this.names = result.Name;\r\n                                this.descriptions = result.Description;\r\n                                this.fields = result.Fields.$values;\r\n                                this.fields_type = result.Fields.$type;\r\n                                this.id = result.Id;\r\n                                this.modelType = result.ModelType;\r\n\r\n                                this.finishedGET = true;\r\n                                //this.collections = result.collections;\r\n                                //this.updateBindings = true;\r\n                                console.log(result);\r\n\r\n                                for (let field of this.fields) {\r\n                                    this.$set(this.dropdowns, field.Id, {\r\n                                        isCollapsed: true,\r\n                                        showDescription: false,\r\n                                        hasOtherOption: false\r\n                                    });\r\n                                }\r\n\r\n                                resolve();\r\n\r\n                            })\r\n                            .catch(function (error) { console.log(\"error:\", error); });\r\n                    });\r\n\r\n                });\r\n                \r\n            },\r\n        },\r\n        created() {\r\n            this.itemId = window.location.href.substring(window.location.href.lastIndexOf('/') + 1);\r\n            this.setStaticValues();\r\n            this.load()\r\n                .then(() => {\r\n                    //for popovers\r\n                    $(document).ready(function () {\r\n                        $('[data-toggle=\"popover\"]').popover();\r\n                    });\r\n\r\n                    //for the accordion, if one panel is triggered to open, close any others\r\n                    $('#accordion').on('show.bs.collapse', function () {\r\n                        console.log(\"called to hide\");\r\n                        let test = $('#accordion .show').length;\r\n                        console.log(test);\r\n                        $('#accordion .show').collapse('hide');\r\n                    });\r\n                });\r\n        }\r\n    });\r\n}","//import { VueEditor } from \"vue2-editor\";\r\nimport { v1 as uuidv1 } from 'uuid';\r\n/**\r\n * Javascript Vue code for creating a single item edit layout in ItemEdit.cshtml.\r\n */\r\n\r\n\r\n/**\r\n * This check makes sure the file is only run on the page with\r\n * the element. Not a huge deal, can be removed if it's causing issues.\r\n */\r\nif (document.getElementById(\"item-edit-page\")) {\r\n    piranha.itemlist = new Vue({\r\n        el: '#item-edit-page',\r\n        /*components: {\r\n            VueEditor\r\n        },*/\r\n        data() {\r\n            return {\r\n                //api strings\r\n                getString: \"manager/api/items/\",\r\n                postString: \"manager/items/save\",\r\n\r\n                content: \"<h1>Some initial content</h1>\",\r\n\r\n                loading: true,\r\n                item: null,\r\n                itemId: null,\r\n                nameAttribute: null,\r\n                descriptionAttribute: null,\r\n                buttonOptions: [\r\n                    \"Save\",\r\n                    \"Edit\",\r\n                    \"Preview\"\r\n                ],\r\n                //label for multichoice dropdown button\r\n                mcDropdownButtonLabel: \"Actions\",\r\n                activeOption: \"Edit\",\r\n\r\n                //bring this in from somewhere else, will have ALL language abbreviations in it\r\n                languages: {\r\n                    en: \"English\",\r\n                    fr: \"Français\",\r\n                    sp: \"Español\"\r\n                },\r\n                DEFAULT_LANGUAGE: 'en',\r\n                //array for displaying language labels listed in received JSON\r\n                //im assuming here that all fields will have the\r\n                //same languages enabled, since languages are enabled sitewide\r\n                languageLabels: [],\r\n\r\n                sections: [\r\n                    {\r\n                        title: \"Name\"\r\n                    },\r\n                    {\r\n                        title: \"Description\"\r\n                    },\r\n                ],\r\n\r\n                metadataSets: [],\r\n                metadataSets_type: null,\r\n                metadataSetLabel: \"Metadata Sets\",\r\n                //key-value pairs of input types from the database and their associated\r\n                //input type\r\n                inputTypes: {\r\n                    \"text\": \"Catfish.Core.Models.Contents.Fields.TextField\",\r\n                    \"textarea\": \"Catfish.Core.Models.Contents.Fields.TextArea\",\r\n                },\r\n\r\n                //stores the first time a field appears in the fields of a metadata set\r\n                //this would be better handled by using child components but \r\n                //project structure for Vue stuff is really weird...\r\n                originalFieldIndexMaster: [],\r\n                originalFields: [],\r\n                isInPreviewMode: false,\r\n                savePreviewEditButtonType: \"submit\",\r\n\r\n                saveSuccessfulLabel: \"Saved!\",\r\n                saveFailedLabel: \"Failed to Save\",\r\n                saveStatus: 0\r\n\r\n            }\r\n        },\r\n        computed: {\r\n            itemName: {\r\n                get: function () {\r\n                    return this.nameAttribute.Values.$values[0].Value || \"\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n        methods: {\r\n            /**\r\n             * Fetches the data associated with the item's ID\r\n             **/\r\n            fetchData() {\r\n                var self = this;\r\n                console.log(piranha.baseUrl + this.getString + this.itemId);\r\n                piranha.permissions.load(function () {\r\n                    fetch(piranha.baseUrl + self.getString + self.itemId)\r\n                        .then(function (response) { return response.json(); })\r\n                        .then(function (result) {\r\n                            self.item = result;\r\n                            console.log(\"json received:\", self.item);\r\n                            self.nameAttribute = result.Name;\r\n                            self.descriptionAttribute = result.Description;\r\n                            self.metadataSets = result.MetadataSets.$values;\r\n                            self.metadataSets_type = result.MetadataSets.$type;\r\n                            self.updateBindings = true;\r\n\r\n                            //for testing purposes, remove after\r\n                            /*result.metadataSets[0].fields[0].name.values.push({\r\n\r\n                                \"format\": \"plain\",\r\n                                \"language\": \"fr\",\r\n                                \"rank\": 0,\r\n                                \"value\": \"Nom\",\r\n                                \"modelType\": \"Catfish.Core.Models.Contents.Text, Catfish.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\"\r\n\r\n                            });\r\n\r\n                            result.metadataSets[0].fields[0].values.push({\r\n                                \"values\": [{\r\n                                    \"format\": \"plain\",\r\n                                    \"language\": \"fr\",\r\n                                    \"rank\": 0,\r\n                                    \"value\": \"I am writing in french\",\r\n                                    \"modelType\": \"Catfish.Core.Models.Contents.Text, Catfish.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\"\r\n\t\t\t\t\t\t\t\t}]\r\n                                \r\n\r\n                            });\r\n\r\n                            result.metadataSets[0].fields[0].description.values.push({\r\n\r\n                                \"format\": \"plain\",\r\n                                \"language\": \"fr\",\r\n                                \"rank\": 0,\r\n                                \"value\": \"French description goes here\",\r\n                                \"modelType\": \"Catfish.Core.Models.Contents.Text, Catfish.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\"\r\n\r\n                            });\r\n\r\n\r\n                            //for testing purposes, remove after v2\r\n                            result.metadataSets[0].fields.push({\r\n                                \"$type\": \"Catfish.Core.Models.Contents.TextArea\",\r\n                                \"values\": [],\r\n                                \"name\": {\r\n                                    \"values\": []\r\n                                },\r\n                                \"description\": {\r\n                                    \"values\": []\r\n                                },\r\n                                \"modelType\": \"Catfish.Core.Models.Contents.Fields.TextArea, Catfish.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\"\r\n                            });\r\n\r\n                            result.metadataSets[0].fields[2].name.values.push({\r\n\r\n                                \"format\": \"plain\",\r\n                                \"language\": \"en\",\r\n                                \"rank\": 0,\r\n                                \"value\": \"Some cool textarea stuff\",\r\n                                \"modelType\": \"Catfish.Core.Models.Contents.Text, Catfish.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\"\r\n\r\n                            });\r\n\r\n                            result.metadataSets[0].fields[2].values.push({\r\n                                \"values\": [{\r\n                                    \"format\": \"plain\",\r\n                                    \"language\": \"en\",\r\n                                    \"rank\": 0,\r\n                                    \"value\": \"I am some heckin neat text\",\r\n                                    \"modelType\": \"Catfish.Core.Models.Contents.Text, Catfish.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\"\r\n                                }],\r\n                                \"modelType\": \"Catfish.Core.Models.Contents.MultilingualText\"\r\n\r\n                            });\r\n\r\n                            result.metadataSets[0].fields[2].description.values.push({\r\n\r\n                                \"format\": \"plain\",\r\n                                \"language\": \"en\",\r\n                                \"rank\": 0,\r\n                                \"value\": \"A description to surpass the century\",\r\n                                \"modelType\": \"Catfish.Core.Models.Contents.Text, Catfish.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\"\r\n\r\n                            });*/\r\n\r\n                            /*result.metadataSets.push({\r\n                                name: {\r\n                                    values: [\r\n                                        {\r\n                                            \"format\": \"plain\",\r\n                                            \"language\": \"en\",\r\n                                            \"rank\": 0,\r\n                                            \"value\": \"I am a test\",\r\n                                            \"modelType\": \"Catfish.Core.Models.Contents.Text, Catfish.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\"\r\n                                        }\r\n                                    ]\r\n                                }\r\n                            });*/\r\n\r\n                            self.sections[0].values = self.nameAttribute.Values.$values;\r\n                            self.sections[1].values = self.descriptionAttribute.Values.$values;\r\n\r\n                            //prepare language labels\r\n                            self.setLanguageLabels(self.sections);\r\n\r\n                            //track original field indices\r\n                            self.setOriginalFields();\r\n\r\n                        })\r\n                        .catch(function (error) { console.log(\"error:\", error); });\r\n                });\r\n            },\r\n\r\n            /**\r\n             * Perform the action the multichoice button states.\r\n             * @param {any} event\r\n             */\r\n            performMCButtonAction(event, option) {\r\n                switch (option) {\r\n                    case this.buttonOptions[0]:\r\n                        this.saveForm(event);\r\n                        break;\r\n                    case this.buttonOptions[1]:\r\n                        //edit view\r\n                        this.isInPreviewMode = false;\r\n                        break;\r\n                    case this.buttonOptions[2]:\r\n                        //preview view\r\n                        this.isInPreviewMode = true;\r\n                        break;\r\n                }\r\n                this.activeOption = option;\r\n\t\t\t},\r\n\r\n            /**\r\n             * Saves the form, calls the API to send the data to.\r\n             * @param {any} event\r\n             */\r\n            saveForm(event) {\r\n                event.preventDefault();\r\n                let validForm = true;\r\n\r\n                //do form validation here and dont submit if problems\r\n                var forms = document.getElementsByClassName('edit-form');\r\n                // Loop over them and prevent submission\r\n                Array.prototype.filter.call(forms, function (form) {\r\n                        if (form.checkValidity() === false) {\r\n                            event.preventDefault();\r\n                            event.stopPropagation();\r\n                            validForm = false;\r\n                        }\r\n                        console.log(\"form validated\");\r\n                        form.classList.add('was-validated');\r\n                });\r\n\r\n                if (validForm) {\r\n                    this.item.Name = this.nameAttribute;\r\n                    this.item.Description = this.descriptionAttribute;\r\n                    this.item.MetadataSets = {\r\n                        $type: this.metadataSets_type,\r\n                        $values: this.metadataSets,\r\n\r\n                    };\r\n\r\n                    console.log(\"item being posted is here:\", this.item);\r\n\r\n                    fetch(piranha.baseUrl + this.postString,\r\n                        {\r\n                            method: \"POST\",\r\n                            headers: {\r\n                                'Content-Type': 'application/json',\r\n                            },\r\n                            body: JSON.stringify(this.item)\r\n                        })\r\n                        .then((res) =>  {\r\n                            if (res.ok) {\r\n                                this.saveStatus = 1;\r\n                                console.log(\"????\");\r\n                                setTimeout(() => { this.saveStatus = 0; }, 3000);\r\n                            } else {\r\n                                this.saveStatus = -1;\r\n                                console.log(\"!!!!!\");\r\n                            }\r\n                            console.log(\"res\",res);\r\n                            return res;\r\n                        })\r\n                        .then(function (data) { /*alert(JSON.stringify(data))*/ })\r\n                        .catch((error) => {\r\n                            console.error('Error:', error);\r\n                        });\r\n\t\t\t\t}\r\n                \r\n\t\t\t},\r\n\r\n            bind() {\r\n                var self = this;\r\n\r\n                $(\".sitemap-container\").each(function (i, e) {\r\n                    $(e).nestable({\r\n                        maxDepth: 100,\r\n                        group: i,\r\n                        callback: function (l, e) {\r\n                            fetch(piranha.baseUrl + \"manager/api/page/move\", {\r\n                                method: \"post\",\r\n                                headers: {\r\n                                    \"Content-Type\": \"application/json\"\r\n                                },\r\n                                body: JSON.stringify({\r\n                                    id: $(e).attr(\"data-id\"),\r\n                                    items: $(l).nestable(\"serialize\")\r\n                                })\r\n                            })\r\n                                .then(function (response) { return response.json(); })\r\n                                .then(function (result) {\r\n                                    piranha.notifications.push(result.status);\r\n\r\n                                    if (result.status.type === \"success\") {\r\n                                        $('.sitemap-container').nestable('destroy');\r\n                                        self.sites = [];\r\n                                        Vue.nextTick(function () {\r\n                                            self.sites = result.sites;\r\n                                            Vue.nextTick(function () {\r\n                                                self.bind();\r\n                                            });\r\n                                        });\r\n                                    }\r\n                                })\r\n                                .catch(function (error) {\r\n                                    console.log(\"error:\", error);\r\n                                });\r\n                        }\r\n                    })\r\n                });\r\n            },\r\n\r\n            /**\r\n             * Adds another entry set to the field\r\n             * @param {any} metadataSetId metadataset index\r\n             * @param {any} fieldId field index\r\n             */\r\n            addNewEntry(metadataSetId, fieldId) {\r\n\r\n                let newEntry = JSON.parse(JSON.stringify(this.metadataSets[metadataSetId].Fields.$values[fieldId]));\r\n                newEntry.Id = uuidv1();\r\n\r\n                for (let item of newEntry.Values.$values) {\r\n                    item.Values.$values[0].Value = \"\";\r\n\t\t\t\t}\r\n\r\n                this.metadataSets[metadataSetId].Fields.$values.splice(fieldId + 1, 0, newEntry);\r\n                this.setOriginalFields();\r\n\r\n            },\r\n            /**\r\n             * Sets the initial language labels youll need for the item.\r\n             * @param {any} sections\r\n             */\r\n            setLanguageLabels(sections) {\r\n                for (let item of sections[0].values) {\r\n                    let tmp = this.languages[item.language];\r\n                    if (typeof tmp === 'undefined') {\r\n                        tmp = this.languages[this.DEFAULT_LANGUAGE];\r\n\t\t\t\t\t}\r\n                    this.languageLabels.push(tmp);\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Changes the multichoice button's title to the\r\n             * pass parameter (user chose it from the dropdown)\r\n             * @param {any} newLabel the new label for the button\r\n             */\r\n            changeButtonLabel(newLabel) {\r\n                this.mcDropdownButtonLabel = newLabel;\r\n                if (this.mcDropdownButtonLabel === this.buttonOptions[0]) {\r\n                    this.savePreviewEditButtonType = \"submit\";\r\n                } else {\r\n                    this.savePreviewEditButtonType = \"button\";\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n            /**\r\n             * Stores the indices of the first original version of a field.\r\n             * This is useful for knowing which fields will not be able to be deleted\r\n             * because they are the original version to be shown to the user.\r\n             * If they were able to be deleted, there would be no way to show that field again!\r\n             **/\r\n            setOriginalFields() {\r\n                this.originalFieldIndexMaster.splice(0);\r\n                this.originalFields.splice(0);\r\n\r\n                for (let [index, metadataSet] of this.metadataSets.entries()) {\r\n                    this.originalFieldIndexMaster.splice(this.originalFieldIndexMaster.length, 1, {});\r\n                    this.originalFields.splice(this.originalFields, 1, []); \r\n\r\n                    for (let [i, field] of metadataSet.Fields.$values.entries()) {\r\n                        //if field differs from fields in originalFieldIndexMaster,\r\n                        //track as a new field\r\n                        var flattened = Object.keys(this.originalFieldIndexMaster[index]);\r\n\r\n                        if (this.originalFieldIndexMaster[index].length === 0\r\n                            || !flattened.some(item => item === field.Id) ) {\r\n\r\n                            this.$set(this.originalFieldIndexMaster[index], field.Id, {\r\n                                field: field.Id,\r\n                                count: 1,\r\n                                startingIndex: null\r\n                            });\r\n                            this.$set(this.originalFieldIndexMaster[index][field.Id], 'startingIndex', i);\r\n                            this.originalFields[index].splice(this.originalFields[index].length, 1, i); \r\n                        }else {\r\n                            //add to count of whichever is already in the object\r\n                            //this needs to be checked to see if it works\r\n                            var matched = flattened.filter((item, index) => {\r\n                                if (item === field.Id) {\r\n                                    return item;\r\n\t\t\t\t\t\t\t\t}\r\n                            });\r\n\r\n                            this.$set(this.originalFieldIndexMaster[index][matched[0]], 'count', \r\n                                this.originalFieldIndexMaster[index][matched[0]].count + 1);\r\n\t                    }\r\n\t\t\t\t\t}\r\n                    console.log(\"originalFields:\", this.originalFieldIndexMaster);\r\n                    console.log(\"indices: \", this.originalFields);\r\n                }\r\n\r\n            },\r\n\r\n\r\n            /**\r\n             * Deletes the field from the item\r\n             * @param {any} metadataSetId\r\n             * @param {any} fieldId\r\n             */\r\n            deleteField(metadataSetId, fieldId) {\r\n                this.metadataSets[metadataSetId].Fields.$values.splice(fieldId, 1);\r\n                this.setOriginalFields();\r\n\t\t\t}\r\n        },\r\n        updated() {\r\n            if (this.updateBindings) {\r\n                this.bind();\r\n                this.updateBindings = false;\r\n            }\r\n\r\n            this.loading = false;\r\n        },\r\n        created() {\r\n            this.itemId = window.location.href.substring(window.location.href.lastIndexOf('/') + 1);\r\n            //call api\r\n            this.fetchData();\r\n        },\r\n        mounted() {\r\n\r\n            //initializes all tooltips\r\n            $(document).ready(function () {\r\n                $(\"body\").tooltip({ selector: '[data-toggle=tooltip]' });\r\n            });\r\n\t\t}\r\n    })\r\n}"],"sourceRoot":""}