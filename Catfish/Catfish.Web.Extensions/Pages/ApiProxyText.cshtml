@page "/test"
@using CatfishExtensions.DTO
@model CatfishWebExtensions.Pages.ApiProxyTextModel
@inject IHttpContextAccessor _httpContextAccessor
@inject CatfishWebExtensions.Interfaces.ICatfishUserManager _usrManager
@inject CatfishExtensions.Interfaces.Auth.ITenantApiProxy _tenantProxy
@inject CatfishExtensions.Interfaces.Auth.IRoleApiProxy _roleProxy
@inject CatfishExtensions.Interfaces.Auth.IUserApiProxy _userProxy
@{
    // Model.Jwt = HttpContextAccessor.HttpContext.Session.GetString("JWT").ToString();
    //January 06 2023 -- get current login user
    // step 1

    string currUserName = _httpContextAccessor.HttpContext.User.Identity.Name;
    //step 2 -- get thejwt login token from webExternsion method
    // AsyncCallback CatfihUserNamanegr get userjwtLogin token 
    var jwt = await _usrManager.GetUserJwtLoginTokenAsync(currUserName, _httpContextAccessor.HttpContext.User.Identity.IsAuthenticated);

    Model.Jwt = jwt.ToString();
    //TEst Post -- good
    TenantInfo tenant = new TenantInfo() { Id = Guid.NewGuid(), Name = "New Tenant", Description = "New Tenant description" };
    var newTenant = await _tenantProxy.PostTenant(tenant, Model.Jwt);

    Model.Tenants = await _tenantProxy.GetTenants(0, 10, false, Model.Jwt);

    var tenantDetails = await _tenantProxy.GetTenantById(Model.Tenants.ElementAt(0).Id, Model.Jwt);

    //TESTING PATH -- good
    //var sas_tenant = await _tenantProxy.GetTenantByName("SAS", Model.Jwt);
    //AuthPatchModel authPatchModel = new AuthPatchModel();
    //  authPatchModel.ParentId = sas_tenant.Id;
    //  authPatchModel.NewChildren = new string[]{ "Portal Admin"};

    //   bool patchSuccess =  await _tenantProxy.PatchTenant(authPatchModel, Model.Jwt);

    //TESTING PUT -- good
    // var modifiedTenant = Model.Tenants[0];
    //change the name from "New Tenant" to "Modified Tenant"
    // modifiedTenant.Name = "Modified Tenant";
    // bool modifiedSuccess = await _tenantProxy.PutTenant(modifiedTenant, Model.Jwt);

    //DELETE -- good

    // var tenantToDelete = Model.Tenants[0];
    //var deleteSuccess =  await _tenantProxy.DeleteTenant(tenantToDelete.Id, Model.Jwt);



    // =======================  TESTING ROLES =========================================================//
    Model.Roles = await _roleProxy.GetRoles(0, 100, Model.Jwt);

    //PUT
    var role = Model.Roles[0];
    role.Description = "Role description -- added through PUT call";
    await _roleProxy.PutRole(role, Model.Jwt);

    //Patch 
    AuthPatchModel rolePatch = new AuthPatchModel();
    rolePatch.ParentId = role.Id;
    rolePatch.NewChildren = new string[] { "Admin" };


    // =======================  TESTING USERS =========================================================//
    Model.Users= await _userProxy.GetUsers(0, 100, Model.Jwt);

    //modified user
    UserInfo user = Model.Users[0]; //user name= Admin
    user.Email = "admin@putcall.com";

    await _userProxy.PutUser(user, Model.Jwt);

    //Get Membership
    var userMembership = await _userProxy.GetMembership("admin");


    //DELETE
    
    await _userProxy.DeleteUser("userToDelete", Model.Jwt);
}

<div class="alert alert-info">
    <h3>JWT</h3>
    @Html.Raw(Model.Jwt)
</div>


<div class="alert alert-info">
    <h3>Tenants</h3>
    @{
        foreach(TenantInfo t in Model.Tenants)
        {
           <div>@t.Name  -  @t.Id</div>
        }
    }
    
</div>

<div class="alert alert-info">
    <h3>Tenant  Details</h3>
      <div>Id : @tenantDetails.Id</div>
     <div>Name : @tenantDetails.Name</div>
     <div>Description : @tenantDetails.Description</div>
     <div>Roles:
        @{
            foreach(var r in tenantDetails.Roles)
            {
                <div>@r.Name</div>
            }
        }
     </div>
    
</div>

<h3>Roles</h3>
<div class="alert alert-warning">  
    @{
        foreach(TenantRoleInfo t in Model.Roles)
        {
           <div>@t.Name  -  @t.Id   - @t.Description</div>
        }
    }
  </div>

  <h3>Users</h3>
<div class="alert alert-success">  
    @{
        foreach(UserInfo t in Model.Users)
        {
           <div>@t.UserName  -  @t.Id   - @t.Email</div>
        }
    }
  </div>

  <div class="alert alert-success">  
   <h5>User Membership</h5>
   <div>User: @userMembership.User.UserName  -- @userMembership.Tenancy[0].Name</div>
  </div>





