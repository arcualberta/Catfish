@page "/login"

@model CatfishWebExtensions.Pages.LoginModel

@{
    @inject IConfiguration configuration;
    var siteUrl = configuration.GetSection("SiteConfig:SiteUrl").Value;
    if (string.IsNullOrEmpty(siteUrl))
        siteUrl = "/";
    else if (!siteUrl.EndsWith("/"))
        siteUrl += "/";

    var clientId = configuration.GetSection("Google:ClientId").Value;
    var redirectLocation = Request.Query["ret"].ToString();
    if (string.IsNullOrEmpty(redirectLocation))
        redirectLocation = siteUrl;
}

@if (!string.IsNullOrEmpty(Model.ErrorMessage))
{
    <div class="alert alert-danger">
        @Model.ErrorMessage
    </div>
}

<script>
    function handleCredentialResponse(response) {
        console.log("Encoded JWT ID token: " + response.credential);
        const api = '@siteUrl' + 'google';
        fetch(api, {
            body: JSON.stringify(response.credential),
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => { 
                if (!response.ok)
                    console.log('Authentication API call failed')
                else
                    return response.json();
        }).then(data => {
                window.location.href = '@redirectLocation';
        })
        .catch((error) => {
                console.error('Authentication API Error:', error);
        });
    }

    window.onload = function () {
        google.accounts.id.initialize({
            client_id: "@clientId",
            callback: handleCredentialResponse
        });

        google.accounts.id.renderButton(
            document.getElementById("buttonDiv"), {
                theme: "outline", size: "large" 
            }  // customization attributes
        );

        google.accounts.id.prompt(); // also display the One Tap dialog
    }
</script>
<div id="buttonDiv"></div> 
