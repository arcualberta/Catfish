@model Catfish.Models.Regions.FormContainer

@using Piranha.Mvc;
@using Piranha.Models;

@{ 
    string cssId = string.IsNullOrEmpty(Model.CssId) ? Guid.NewGuid().ToString().Replace('-','K') : Model.CssId;
    string cssClasses = string.IsNullOrEmpty(Model.CssClasses) ? "" : Model.CssClasses;
    string cssStyles = string.IsNullOrEmpty(Model.CssStyles) ? "" : Model.CssStyles;

    // Change the controller to work with the FormSubmission controller and views.
    var oldController = ViewContext.Controller.ControllerContext.RouteData.Values["controller"];
    ViewContext.Controller.ControllerContext.RouteData.Values["controller"] = "FormSubmission";

    List<string> questionIndex = new List<string>();
}

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")"></script>

<div id="@cssId" class="bs @cssClasses form">
    <style type="text/css" scoped>
                    @Html.Raw(cssStyles)
    </style>
    <form method="post" action="@UI.Permalink()/Edit">
        @Html.EditorFor(m => m.FormViewModel, new { QuestionIndex = questionIndex })
        <br />
        <br />
        <input class="btn btn-primary" name="submit" type="button" value="@Catfish.Resources.Global.Submit" />
        <div class="panel panel-default form-submit form-confirm" style="display: none">
            <div class="panel-body">
                <p>@Catfish.Resources.Views.Shared.DisplayTemplates.FormContainer.SubmitConfirm</p>
                <input class="btn btn-primary" name="yes" type="submit" value="@Catfish.Resources.Global.Yes" />
                <input class="btn btn-primary" name="no" type="button" value="@Catfish.Resources.Global.No" />
            </div>
        </div>

        <input class="btn btn-primary" name="next" type="button" value="@Catfish.Resources.Global.Next" />
    </form>
    <div class="form-success" style="display: none">
        <p>@Catfish.Resources.Views.Shared.DisplayTemplates.FormContainer.SubmitSuccess</p>
    </div>
</div>

<script type="text/javascript">
    {
        var questions = @Html.Raw(Json.Encode(questionIndex));
        var questionIndex = -1;

        function showQuestion() {
            if (questionIndex >= questions.length) {
                questionIndex = questions.length - 1;
            }

            var index = questionIndex;

            if (index >= 0 || index < questions.length) {
                $(".stepField").hide();
                $(questions[index]).show();
            }

            if (questionIndex >= questions.length - 1) {
                $("#@cssId > form > input[name='submit']").show();
                $("#@cssId > form > input[name='next']").hide();
            } else {
                $("#@cssId > form > input[name='submit']").hide();
                $("#@cssId > form > input[name='next']").show();
            }
        }

        function showNextQuestion(validate = true) {
            var valid = true;

            if (validate) {
                var form = $("#@cssId > form");
                form.validate({ ignore: ":not(:visible)" });
                valid = form.valid();
            }

            if (valid) {
                ++questionIndex;
                showQuestion();
            }
        }

        showNextQuestion(false);

        function showSubmit() {
            $("#@cssId > form > input[name='submit']").show();
            $("#@cssId > form > .form-submit.form-confirm").hide();
        };

        function hideSubmit() {
            $("#@cssId > form > input[name='submit']").hide();
            $("#@cssId > form > .form-submit.form-confirm").show();
        };

        $("#@cssId > form > input[name='next']").click(function (ev) {
            ev.preventDefault();
            showNextQuestion();
        });

        $("#@cssId > form > input[name='submit']").click(function (ev) {
            ev.preventDefault();
            hideSubmit();
        });

        $("#@cssId form .form-submit.form-confirm input[name='no']").click(function (ev) {
            ev.preventDefault();
            showSubmit();
        });

        $("#@cssId > form").submit(function (ev) {
            ev.preventDefault();

            submitFormContainer("@Html.NameFor(m => m.FormViewModel)", this, @Html.Raw(Json.Encode(Model)), "@Url.Action("submit", "forms")", function (caller, result) {
                $("#@cssId > form").hide();
                $("#@cssId > .form-success").show();
            }, function (error) {
                showSubmit();
            });
        });
    }
</script>

@{ 
    // Sets the controller back to the original.
    ViewContext.Controller.ControllerContext.RouteData.Values["controller"] = oldController;
}
