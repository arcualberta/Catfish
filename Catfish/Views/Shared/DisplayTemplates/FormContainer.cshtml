@model Catfish.Models.Regions.FormContainer

@using Piranha.Mvc;
@using Piranha.Models;

@{
    string cssId = string.IsNullOrEmpty(Model.CssId) ? Guid.NewGuid().ToString().Replace('-', 'K') : Model.CssId;
    string cssClasses = string.IsNullOrEmpty(Model.CssClasses) ? "" : Model.CssClasses;
    string cssStyles = string.IsNullOrEmpty(Model.CssStyles) ? "" : Model.CssStyles;

    // Change the controller to work with the FormSubmission controller and views.
    var oldController = ViewContext.Controller.ControllerContext.RouteData.Values["controller"];
    ViewContext.Controller.ControllerContext.RouteData.Values["controller"] = "FormSubmission";

    List<string> questionIndex = new List<string>();
}

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")"></script>
<script type="text/javascript" src="~/Scripts/attachment.js"></script>
@*error message*@
<div class="panel panel-default formContainerErrorPanel">
    <div class="panel-body formContainerErrorPanelMessage alert-danger"></div>
</div>

<div id="@cssId" class="bs @cssClasses form loading-form loadable-panel">
    <style type="text/css" scoped>
                    @Html.Raw(cssStyles)
    </style>
    <form method="post" action="@UI.Permalink()/Edit">
        @Html.EditorFor(m => m.FormViewModel, new { QuestionIndex = questionIndex })
        <br />
        <br />
        <input class="btn btn-primary" name="submit" type="button" value="@Catfish.Resources.Global.Submit" />
        <div class="panel panel-default form-submit form-confirm" style="display: none">
            <div class="panel-body">
                <p>@Catfish.Resources.Views.Shared.DisplayTemplates.FormContainer.SubmitConfirm</p>
                <input class="btn btn-primary" name="yes" type="button" value="@Catfish.Resources.Global.Yes" />
                <input class="btn btn-primary" name="no" type="button" value="@Catfish.Resources.Global.No" />
            </div>
        </div>

        <input class="btn btn-primary" name="next" type="button" value="@Catfish.Resources.Global.Next" />
    </form>
    <div class="form-success" style="display: none">
        <p>@Catfish.Resources.Views.Shared.DisplayTemplates.FormContainer.SubmitSuccess</p>
    </div>
</div>


<script type="text/javascript">
     $(".formContainerErrorPanel").hide();
    function Setup@(cssId)(){
        var questions = @Html.Raw(Json.Encode(questionIndex));
        var questionIndex = -1;

        function playOnShowAudio() {
            $("#@cssId .audio-play-on-show .audio-play:visible:enabled").click();
        }

        function showQuestion() {
            if (questionIndex >= questions.length) {
                questionIndex = questions.length - 1;
            }

            var index = questionIndex;

            if (index >= 0 || index < questions.length) {
                $(".stepField").hide();
                $(questions[index]).each(function () {
                    var t = $(this);
                    t.show();

                    if (t.hasClass("stepOnce")) {
                        t.removeClass("stepField");
                    }
                })
            }

            if (questionIndex >= questions.length - 1) {
                $("#@cssId > form > input[name='submit']").show();
                $("#@cssId > form > input[name='next']").hide();
            } else {
                $("#@cssId > form > input[name='submit']").hide();
                $("#@cssId > form > input[name='next']").show();
            }

            playOnShowAudio();
        }

        function showNextQuestion(validate = true) {
            var valid = true;

            if (validate) {
                var form = $("#@cssId > form");
                form.validate({ ignore: ":not(:visible)" });
                valid = form.valid();
            }

            if (valid) {
                ++questionIndex;
                showQuestion();
            }
        }

        showNextQuestion(false);

        function showSubmit() {
            $("#@cssId > form > input[name='submit']").show();
            $("#@cssId > form > .form-submit.form-confirm").hide();
        };

        function hideSubmit() {
            $("#@cssId > form > input[name='submit']").hide();
            $("#@cssId > form > .form-submit.form-confirm").show();
        };

        $("#@cssId > form > input[name='next']").click(function (ev) {
            ev.preventDefault();
            showNextQuestion();
        });

        $("#@cssId > form > input[name='submit']").click(function (ev) {
            ev.preventDefault();
            hideSubmit();
        });

        $("#@cssId form .form-submit.form-confirm input[name='no']").click(function (ev) {
            ev.preventDefault();
            showSubmit();
        });

        // Yes button promise system.
        // This will allow us to attach async events to the user clicking the yes button.
        $("#@cssId form")[0].submitEvents = []; // If these events return a promise, add them to the promise list.
        $("#@cssId form")[0].onSuccessEvents = []; // Adds function() functions which run on a successful submission.
         $("#@cssId form")[0].onErrorEvents = []; // Adds function() functions which run on a Error submission.

        $("#@cssId form .form-submit.form-confirm input[name='yes']").click(function (ev) {
            ev.preventDefault();

            var form = $(this).parents("form")[0];
            var promiseList = [];

            form.submitEvents.forEach(function (ev) {
                var result = ev();

                if (Promise && Promise.resolve && Promise.resolve(result) == result) {
                    promiseList.push(result);
                }
            });

            Promise.all(promiseList).then(function (values) {
                $(form).submit();
            }, function (message) {
                    showSubmit();
                    console.log("An error occured while processing the form. " + message);
            });
        });

        $("#@cssId > form").submit(function (ev) {
            ev.preventDefault();
            window.startLoading("#@cssId", 60000);

            submitFormContainer("@Html.NameFor(m => m.FormViewModel)", this, @Html.Raw(Json.Encode(Model)), "@Url.Action("submit", "forms")", function (caller, result) {
                $("#@cssId > form").hide();
                $("#@cssId > .form-success").show();
                window.stopLoading("#@cssId");

                var onSuccess = $("#@cssId form")[0].onSuccessEvents;
                if (onSuccess) {
                    onSuccess.forEach(function (ev) {
                        var result = ev();
                    });
                }
            }, function (error) {
                showSubmit();
                window.stopLoading("#@cssId");
                //Sept 20 2019 -- show error message
                let errMessage = "";
                let i =0;
                if(error.NotAuthorized != null)
                {
                    for(i=0; i< error.NotAuthorized.length; i++){
                        errMessage += error.NotAuthorized[i] + "\n";
                    }
                }
                if(errMessage != "")
                {
                    let frmErr = $(".formContainerErrorPanelMessage").text(errMessage);
                    frmErr.html(frmErr.html().replace(/\n/g,'<br/>'));
                     $(".formContainerErrorPanel").show();
                 }

                   //Jan 3 2020 -- onErrorEvent --
                    var onError = $("#@cssId form")[0].onErrorEvents;
                    if(onError)
                    {
                        onError.forEach(function(ev){
                            var err = ev();
                         });
                    }
            });
        });

        var disableCount = 0;
        function onPlayStart() {
            ++disableCount;
            $("#@cssId > form > input[name='submit']").attr("disabled", "disabled");
            $("#@cssId > form > input[name='next']").attr("disabled", "disabled");
        }

        function onPlayEnd() {
            --disableCount;

            if (disableCount <= 0) {
                $("#@cssId > form > input[name='submit']").removeAttr("disabled");
                $("#@cssId > form > input[name='next']").removeAttr("disabled");
            }
        }

        $("#@cssId .audio-play").each(function (index, element) {
            element["onPlayStart"] = onPlayStart;
            element["onPlayEnd"] = onPlayEnd;
        });

        $("#@cssId").removeClass("loading-form");
        $("#@cssId").addClass("loaded-form");
    };
    Setup@(cssId)();// WE are using this method inorder to keep this comparable with Safari
</script>

@{
    // Sets the controller back to the original.
    ViewContext.Controller.ControllerContext.RouteData.Values["controller"] = oldController;
}