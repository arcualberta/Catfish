@model Catfish.Models.Regions.GraphPanel
@using Catfish.Core.Models;

@{
    string cssId = string.IsNullOrEmpty(Model.CssId) ? Guid.NewGuid().ToString().Replace('-', 'K') : Model.CssId;
    string cssClasses = string.IsNullOrEmpty(Model.CssClasses) ? "" : Model.CssClasses;
    string cssStyles = string.IsNullOrEmpty(Model.CssStyles) ? "" : Model.CssStyles;

    string q = Request.Params.AllKeys.Contains("q") ? Request.Params.Get("q") : "*:*";
    if (string.IsNullOrEmpty(q.Trim()))
    {
        q = "*:*";
    }
}
<div id="@cssId" class="bs @cssClasses container container-fluid" style="margin-left:0;">
    <style type="text/css" scoped>
                    @Html.Raw(cssStyles)
    </style>
   
    <svg class="line-chart"> </svg>
    <div class="legend"></div>  
    <form id="barchartOption">
        <label><input type="radio" name="mode" value="grouped" />Grouped</label>
        <label><input type="radio" name="mode" value="stacked" checked />Stackeded</label>
    </form>
    </div>
    <script src="https://d3js.org/d3.v4.min.js"></script>
    <script src="~/Scripts/D3/graph.js"></script>

    <script>
    const XLabel = '@Model.XaxisLabel';
    const YLabel ='@Model.YaxisLabel';
    const GraphTitle = '@Model.GraphTitle';
    const XScale=parseInt('@Model.XScale');
    const YScale=parseInt('@Model.YScale');

    const xapi = "@Html.Raw(Url.Action("GetGraphData", "Items", new
             {
                 xMetadataSet = Model.SelectedMetadataSetX,
                 yMetadataSet = Model.SelectedMetadataSetY,
                 xField = Model.XaxisField,
                 yField = Model.YaxisField,
                 catMetadataset = Model.SelectedMetadataSetCat,
                 catField = Model.Category,
                 q = q,
                 isCatOptionsIndex = Model.IsCategoryOptionsField
             }))";

    /* loading data */
    $(document).ready(function (event) {
        var chartType = "@Model.SelectedGraphType.ToString()";
        if( chartType === "Bar")
        {
             var barOption = document.getElementById("barchartOption");
             barOption.style.display = "block";
        }
        else{
            var barOption = document.getElementById("barchartOption");
             barOption.style.display = "none";
        }

        fetch(xapi).then(function (response) { return response.json(); })
                    .then(function (data) {
                        var parsedData = parseDataSF(data);
                        drawChartMulti@(Model.SelectedGraphType.ToString())(parsedData);

                    })
                    .catch(function (err) { console.log(err); })
    });
    </script>

    <style>
        #barchartOption{
            display: none;
        }
        
        .legend {
            font-size: 14px !important;
            width: 100px;
            /*border: 1px solid grey;*/
            float: right;
            margin-right: 20%;
            margin-top: 10%;
            padding: 5px;
        }

      
        .line-chart {
            margin-top: 20px;
        }

        .bar {
            fill: steelblue;
        }

        .line {
            fill: none;
            stroke: steelblue;
            stroke-width: 1.5px;
        }

        path {
            stroke: steelblue;
            stroke-width: 2;
            fill: none;
        }

        .axis path,
        .axis line {
            fill: none;
            stroke: grey;
            stroke-width: 1;
            shape-rendering: crispEdges;
        }

        .legend {
            font-size: 16px;
            font-weight: bold;
            text-anchor: middle;
        }
    </style>
