@model Catfish.Models.Regions.GraphPanel
@using Catfish.Core.Models;

@{
    string cssId = string.IsNullOrEmpty(Model.CssId) ? Guid.NewGuid().ToString().Replace('-', 'K') : Model.CssId;
    string cssClasses = string.IsNullOrEmpty(Model.CssClasses) ? "" : Model.CssClasses;
    string cssStyles = string.IsNullOrEmpty(Model.CssStyles) ? "" : Model.CssStyles;
}
<div id="@cssId" class="bs @cssClasses container container-fluid">
    <style type="text/css" scoped>
                    @Html.Raw(cssStyles)
    </style>
    @*<div>Start Year<input type="text" id="MinX_Parameter" name="MinX_Parameter" class="input filterInput" placeholder="1960"/>
            End Year <input type="text" id="MaxX_Parameter" name="MaxX_Parameter" class="input filterInput" placeholder="2018" />
             <button id="graphPanel_filterYear_button" class="btn btn-sm sm-search-btn" onclick="appendUrl(); return false;">
            <span class="glyphicon glyphicon-search"></span> </button>
        </div>*@
    <svg class="line-chart"> </svg>
    <div class="legend"></div>

    </div>
    <script src="https://d3js.org/d3.v4.min.js"></script>
    <script src="~/Scripts/D3/graph.js"></script>

    <script>
    const XLabel = '@Model.XaxisLabel';
    const YLabel ='@Model.YaxisLabel';
    const GraphTitle = '@Model.GraphTitle';
    const XScale=parseInt('@Model.XScale');
    const YScale=parseInt('@Model.YScale');
    var minX="", maxX="";

  /*  const api = "https://api.coindesk.com/v1/bpi/historical/close.json?start=2017-12-31&end=2018-04-01"; */
    const xapi = "@Html.Raw(Url.Action("GetGraphData", "Items", new
             {
                 xMetadataSet = Model.SelectedMetadataSetX,
                 yMetadataSet = Model.SelectedMetadataSetY,
                 xField = Model.XaxisField,
                 yField = Model.YaxisField,
                 catMetadataset = Model.SelectedMetadataSetCat,
                 catField = Model.Category,
                 xmin = Request.Params.AllKeys.Contains(Model.MinX_Parameter) ? int.Parse(Request.Params[Model.MinX_Parameter]) : int.MinValue,
                xmax= Request.Params.AllKeys.Contains(Model.MaxX_Parameter) ? int.Parse(Request.Params[Model.MaxX_Parameter]) : int.MaxValue,
             }))";

/* loading data */
document.addEventListener("DOMContentLoaded", function (event) {
    fetch(xapi).then(function (response) { return response.json(); })
              .then(function (data) {
                  var parsedData =parseDataSF(data);

                 // drawChart@(Model.SelectedGraphType.ToString())(parsedData); //--SF real data --single line chart
                 //  drawChartBar(parsedData); //-SF real data -- single Bar chart
                  drawChartMulti@(Model.SelectedGraphType.ToString())(parsedData);
    //drawChartMultiBar(parsedData);

                  //set min/max year
                    var urlParams = new URLSearchParams(window.location.search);

                  minX =urlParams.has('@Model.MinX_Parameter') ? urlParams.get('@Model.MinX_Parameter') : minX.getFullYear();
                  maxX = urlParams.has('@Model.MaxX_Parameter') ? urlParams.get('@Model.MaxX_Parameter')  : maxX.getFullYear();
                  $("#Min_Parameter").val(minX);
                  $("#Max_Parameter").val(maxX);
              })
               .catch(function (err) { console.log(err); })
});

    $("#graphPanel_filterYear_button").click(function(){
        minX = $("#Min_Parameter").val();
         maxX = $("#Max_Parameter").val();
         var url = window.location.href;
         if (url.indexOf('?') > -1){
            url = url.substr(0,url.indexOf("?"));
        }
        var search_url = "?" + '@Model.MinX_Parameter' + "=" + minX +"&" + '@Model.MaxX_Parameter' + "=" + maxX;
        url += search_url;
        window.location.href = url;
    });


    </script>

    <style>
        .sm-search-btn {
            height: 20px;
            padding-top: 1px;
            vertical-align: top;
        }

        .legend {
            font-size: 14px !important;
            width: 100px;
            border: 1px solid grey;
            float: right;
            margin-right: 37%;
            margin-top: 10%;
            padding: 5px;
        }

        .filterInput {
            width: 50px;
            margin: 0 10px;
        }

        .line-chart {
            margin-top: 20px;
        }

        .bar {
            fill: steelblue;
        }

        .line {
            fill: none;
            stroke: steelblue;
            stroke-width: 1.5px;
        }

        path {
            stroke: steelblue;
            stroke-width: 2;
            fill: none;
        }

        .axis path,
        .axis line {
            fill: none;
            stroke: grey;
            stroke-width: 1;
            shape-rendering: crispEdges;
        }

        .legend {
            font-size: 16px;
            font-weight: bold;
            text-anchor: middle;
        }
    </style>
