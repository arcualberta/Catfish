@model Catfish.Models.Regions.AdvanceSearchContainer
@using Catfish.Core.Models;
@using Catfish.Models.Regions;

@{ string cssId = string.IsNullOrEmpty(Model.CssId) ? Guid.NewGuid().ToString().Replace('-', 'K') : Model.CssId;
    string cssClasses = string.IsNullOrEmpty(Model.CssClasses) ? "" : Model.CssClasses;
    string cssStyles = string.IsNullOrEmpty(Model.CssStyles) ? "" : Model.CssStyles;
    int i = 0;
    string lang = Catfish.Helpers.ViewHelper.GetActiveLanguage().TwoLetterISOLanguageName;
}
<div id="@cssId" class="bs @cssClasses container container-fluid">
    <style type="text/css" scoped>
           @Html.Raw(cssStyles)
    </style>


    <form method="get" action="#">
        @if (Model.HasGeneralSearch)
        {
            <div class="row general-search advanceSearchContainerInput" data-searchid="value_*_">
                <div class="field-title">@Catfish.Resources.Views.Shared.DisplayTemplates.AdvanceSearchContainer.GeneralSearch</div>
                <div class="search-entry divKeyword">
                    <input type="text" />
                </div>
            </div>
        }

        @foreach (var m in Model.Mappings)
        {
            var fType = m.Field.GetType();
            var id = "value_" + (m.MetadataSet.Guid.Replace("-", "_")) + "_" + (m.Field.Guid.Replace("-", "_"));
            var field = Model.Fields[i];

            <div class="row advanceSearchContainerInput" data-searchid="@id">
                <div class="field-title">@m.Label</div>
                @if (fType.FullName == "Catfish.Core.Models.Forms.NumberField" || fType.FullName == "Catfish.Core.Models.Forms.DateField")
                {
                    if (field.SelectedDisplayOption.Equals(eDisplayOption.DropDownList))
                    {

                        <div class="search-entry divNumber">
                            <span class="label-default field-sub-title">From</span>@Html.DropDownList("AdvanceSearchContainer-DropdownList", field.ListFields, "", new { @id = @id + "-From", @class = "numberDropDownFrom" })
                            <span class="label-default field-sub-title">To</span>@Html.DropDownList("AdvanceSearchContainer-DropdownList", field.ListFields, "", new { @id = @id + "-To", @class = "numberDropDownTo" })
                        </div>
                    }
                    else if (field.SelectedDisplayOption.Equals(eDisplayOption.Slider))
                    {
                        <div class="search-entry divNumber">
                            <span class="label-default field-sub-title">From</span><input type="text" class="search-from range-display" id="@id-From" value="@field.Min" />
                            <span class="label-default field-sub-title">To</span><input type="text" class="search-to range-display" id="@id-To" value="@field.Max" />
                        </div>

                            <div id="@(id)_slider"></div>

                            <script type="text/javascript">
                                $("#@(id)_slider").slider({
                                    range: true,
                                    classes: {
                                        "ui-slider": "range-slider",
                                        "ui-slider-handle": "range-slider-handle",
                                        "ui-slider-range": "range-slider-range"
                                    },
                                    min: @field.Min,
                                    max: @field.Max,
                                    values: [@field.Min, @field.Max],
                                    slide: function (event, ui) {
                                        $("#@id-From").val(ui.values[0]);
                                        $("#@id-To").val(ui.values[1]);
                                    }
                                });

                                $("#@id-From").on("change", function (event) {
                                    var slider = $("#@(id)_slider");
                                    var value = parseInt($("#@id-From").val());
                                    var max = slider.slider("values", 1);

                                    if (isNaN(value) || value < @field.Min){
                                        value = @field.Min;
                                    }

                                    if (value > max) {
                                        value = max;
                                    }

                                    slider.slider("values", 0, value);
                                });

                                $("#@id-To").on("change", function (event) {
                                    var slider = $("#@(id)_slider");
                                    var value = parseInt($("#@id-To").val());
                                    var min = slider.slider("values", 0);

                                    if (isNaN(value) || value > @field.Max){
                                        value = @field.Max;
                                    }

                                    if (value < min) {
                                        value = min;
                                    }

                                    slider.slider("values", 1, value);
                                });
                            </script>
                    }
                    else
                    {
                        //number field or Date field
                        <div class="search-entry divNumber">
                            <span class="label-default field-sub-title">From</span><input type="text" class="search-from @(field.IsAutoComplete ? "autocomplete-text" : string.Empty)" id="@id-From" />
                            <span class="label-default field-sub-title">To</span><input type="text" class="search-to @(field.IsAutoComplete ? "autocomplete-text" : string.Empty)" id="@id-To" />
                        </div>
                    }
                }
                else if (typeof(Catfish.Core.Models.Forms.OptionsField).IsAssignableFrom(fType))
                {
                    if (field.SelectedDisplayOption.Equals(eDisplayOption.MultipleSelect)) //(field.IsMultiple)
                    {
                        <div class="search-entry divCheckbox">
                            <ul>
                                @foreach (var option in ((Catfish.Core.Models.Forms.OptionsField)m.Field).Options)
                                {
                                    var nm = "AdvanceSearchContainer-Chkbox";
                                    <li>
                                        <input type="checkbox" name="@nm" value="@option.Guid" />
                                        <span>@option.Value[0].Value</span>
                                    </li>
                                }
                            </ul>
                        </div>
                    }
                    else
                    {
                        var options = new SelectList(((Catfish.Core.Models.Forms.OptionsField)m.Field).Options, "Guid", "Value[0].Value");
                        var nm = "AdvanceSearchContainer-DropdownList";

                        <div class="search-entry divDropDownList">
                            @Html.DropDownList(nm, options, "")
                        </div>
                    }
                }
                else //(fType.FullName == "Catfish.Core.Models.Forms.TextField")
                {
                    if (field.SelectedDisplayOption.Equals(eDisplayOption.DropDownList))
                    {

                        <div class="search-entry divText">
                            @Html.DropDownList("AdvanceSearchContainer-DropdownList", field.ListFields, "", new { @class = "textDropDown" })

                        </div>
                    }
                    else if (field.SelectedDisplayOption.Equals(eDisplayOption.TextArea))
                    {

                        <div class="search-entry divText">
                            <textarea type="text" class="input @(field.IsAutoComplete ? "autocomplete-text" : string.Empty)" rows="3" cols="50"></textarea>

                        </div>
                    }
                    else
                    {
                        <div class="search-entry divText">
                            <input type="text" class="input @(field.IsAutoComplete ? "autocomplete-text" : string.Empty)" />
                        </div>
                    }
                }


            </div>
            i++;
        }

        <div class="row">
            <button id="AdvanceSearchContainer_Search_Button" class="btn btn-default search-button"><span class="glyphicon glyphicon-search"></span>Search</button>
            <button id="AdvanceSearchContainer_Reset_Button" class="btn btn-default clear-button"><span class="glyphicon glyphicon-refresh"></span>Reset</button>
        </div>
    </form>
</div>

@{
    string qParam = null;

    try
    {
        qParam = Request.QueryString.Get("q");
    }
    catch (Exception ex)
    {
        // No q param
    }
}

<script type="text/javascript">
    {
        let solrParser = new SolrParser('@lang');
        let isLoaded = false;
        const elmId = "AdvanceSearchContainer-";

        $("#@(cssId) #AdvanceSearchContainer_Reset_Button").click(function (ev) {
            ev.preventDefault();

            $("#@(cssId) form")[0].reset();

             window.updateUrlParameters({ q: "*:*" });
        })

        function getSearchValueField(divContainer) {
            var field = divContainer.closest("div[data-searchid]");
            var searchEntries = field.children(".search-entry");

            return field.attr("data-searchid") + "_en_ss";
        }

        function solrUnescapeValue(input) {
            var orSplit = input.split(" || ");
            var result = "";

            orSplit.forEach(function (orValue) {
                result += orValue;

                result += " ";
            });

            return result.trim();
        }

        function solrEscapeValue(input) {
            if (input == null) {
                return null;
            }

            var resultParts = input.replace(/\\/g, "\\").replace(/\(/g, "\(").replace(/\)/g, "\)").trim().split("\"");
            var result = "";
            var inQuotes = false; // Use a boolean instead of looking for even indexes.

            for (var i = 0; i < resultParts.length; ++i) {
                var part = resultParts[i].trim();

                if (part.length > 0) {
                    if (inQuotes) {
                        if (result.length > 0) {
                            result += " || ";
                        }

                        result += "\"" + part + "\"";
                    } else {
                        part.split(/\s+/).forEach(function (piece) {
                            if (piece.length > 0) {
                                if (result.length > 0) {
                                    result += " || ";
                                }

                                result += piece;
                            }
                        });
                    }
                }
                
                inQuotes = !inQuotes;
            }
            
            return result;
        }

        $("#@cssId form").submit(function (ev) {
            var fields = {};

            ev.preventDefault();

            var searchValue;

            var rows = $("#@cssId .advanceSearchContainerInput");

            rows.each(function (index) {
                var searchId = $(this).attr("data-searchid");
                var r = $(this);
                r.children(".search-entry").each(function (index) {
                    var entry = $(this);
                    var searchValue;

                    if (entry.hasClass("divText")) {
                        searchValue = entry.children("input").val() == null ? entry.find(".textDropDown").val() : entry.children("input").val();
                        searchValue = searchValue == null ? entry.children("textarea").val() : searchValue;
                        searchValue = searchValue.trim();

                        if (searchValue.length > 0) {
                            fields[searchId] = solrParser.createStringField(searchValue);
                        }
                    } else if (entry.hasClass("divNumber")) {
                        var from = entry.find(".search-from").val() == null ? entry.find(".numberDropDownFrom").val() : entry.find(".search-from").val();
                        var to = entry.find(".search-to").val() == null ? entry.find(".numberDropDownTo").val() : entry.find(".search-to").val();

                        if (from.length > 0 || to.length > 0) {
                            from = from ? from : '*';
                            to = to ? to : '*';

                            fields[searchId] = solrParser.createRangeField(from, to);
                        }
                    } else if (entry.hasClass("divCheckbox")) {
                        var name = elmId + "Chkbox";
                        var selectedValues = [];
                        var checkboxes = entry.find('input[type="checkbox"]');
                        selectedValues = checkboxes.filter(":checked").map(function () {
                            return this.parentElement.innerText;
                        }).get();

                        if (selectedValues.length > 0) {
                            fields[searchId] = solrParser.createMultiSelectField(selectedValues);
                        }
                    } else if (entry.hasClass("divDropDownList")) {
                        selectedValue = entry.find("select option:selected").text();
                        
                        if (selectedValue.length > 0) {
                            fields[searchId] = solrParser.createMultiSelectField([selectedValue]);
                        }
                    } else if (entry.hasClass("divKeyword")) {
                        var check = entry.children("input").val().trim();

                        if (check.length > 0) {
                            fields["*"] = solrParser.createStringField(check);
                        }
                    }
                });
            });

            var searchString = solrParser.encode(fields);
            window.updateUrlParameters({ q: searchString, page: 1 });
            return false;
        });

        function fillStringField(name, searchField, field) {
            var inputField;
            if (name == "*") {
                inputField = searchField.find(".divKeyword input");
            } else {
                inputField = searchField.find(".divText input");
            }
            inputField.val(field.data);
        }

        function fillRangeField(searchField, field) {

            searchField.find(".search-from").val(field.data.min == "*" ? "" : field.data.min);
            searchField.find(".search-to").val(field.data.max == "*" ? "" : field.data.max);

            searchField.find(".search-from").trigger("change");
            searchField.find(".search-to").trigger("change");
        }

        function fillMultiselectField(searchField, field) {
            var parentField = searchField.find(".search-entry");
            var selected = field.data;

            if (parentField.hasClass("divCheckbox")) {
                parentField.find("input[type='checkbox']").each(function (index) {
                    if (selected.includes($(this.parentElement).find("span").text())) {
                        this.checked = true;
                    } else {
                        this.checked = false;
                    }
                });
            } else if (parentField.hasClass("divDropDownList")) {
                var options = parentField.find("select option");
                if (options.length > 0) {
                    options[0].selected = true;
                }

                if (selected.length > 0) {
                    options.each(function (index) {
                        if ($(this).text() == selected[0]) {
                            this.selected = true;
                        }
                    });
                }
            }
        }

        function reloadForm(query)
        {
            var fields = solrParser.decode(query);
            var field;
            var property;

            $(".advanceSearchContainerInput").each(function (index) {
                var $this = $(this);
                property = $this.attr("data-searchid");

                if (property == "value_*_") {
                    property = "*";
                }

                if (fields.hasOwnProperty(property)) {
                    field = fields[property];

                    switch (field.type) {
                        case "string":
                            fillStringField(property, $this, field);
                            break;

                        case "range":
                            fillRangeField($this, field);
                            break;

                        case "multiselect":
                            fillMultiselectField($this, field);
                            break;
                    }
                }

                $this.find(".search-to, .search-from").trigger("change");
            });
        }


        window.addEventListener('updatedparams', function (e) {
            var params = e.detail;
            var triggerUpdate = !isLoaded;
            var query = "*:*";

            if ('q' in params) {
                triggerUpdate = true;
                query = params['q'];
            }

            if (triggerUpdate) {
                reloadForm(query);
            }
        });

        function autocompleteCall(request, response) {
            var field = getSearchValueField($(this.element));

            $.ajax({
                method: 'GET',
                url: @Html.Raw(Json.Encode(Url.Action("AutoCompleteField", "Items"))),
                data: {
                    fieldId: field,
                    partialText: request.term,
                    rows: 500
                },
                dataType: 'json',
                success: function (result) {
                    var result = $.unique(result.response.docs.map(function (m) {
                        return m[field][0];
                    })).slice(0, 10); // Only use 10 options.

                    response(result);
                },
                error: function (err) {
                    console.error(err);
                    response([]);
                }
            });
        }

        $("#@cssId .autocomplete-text").autocomplete({
            minLength: 1,
            source: autocompleteCall,
            select: function (e, ui) {
                e.preventDefault();

                $(this).val("\"" + ui.item.value + "\"");
            }
        });

        $(function(){
             var fields = autocompleteCall
         });
    }
</script>