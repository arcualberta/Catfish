@model Catfish.Models.Regions.ListEntitiesPanel
@using Catfish.Core.Models;

@{ 
    string cssId = string.IsNullOrEmpty(Model.CssId) ? Guid.NewGuid().ToString().Replace('-', 'K') : Model.CssId;
    string cssClasses = string.IsNullOrEmpty(Model.CssClasses) ? "" : Model.CssClasses;
    string cssStyles = string.IsNullOrEmpty(Model.CssStyles) ? "" : Model.CssStyles;
    string lang = Catfish.Helpers.ViewHelper.GetActiveLanguage().TwoLetterISOLanguageName;

}

<div id="@cssId" class="bs @cssClasses container container-fluid loadable-panel">
    <style type="text/css" scoped>
           @Html.Raw(cssStyles)
    </style>
   <div class="row" style="text-align:center;margin-top:20px;">
       <button class="btn-link" name="listEntitiesPanel_prev_button"><span style="align-content:center"><span class="glyphicon glyphicon-backward"></span>Prev</span></button>
       <input name="listEntitiesPanel_page_number" class="current-page" placeholder="1" value="" />&nbsp;/&nbsp;<span class="total-pages"></span>
       <button class="btn-link" name="listEntitiesPanel_next_button"><span style="align-content:center">Next<span class="glyphicon glyphicon-forward"></span></span></button>
    </div>
    <div class="row ">
        <table class="table table-responsive table-striped">
            <thead>
                <tr>
                    @*header*@
                    <!-- Default Sort: @Model.SortByField -->
                    <th></th>
                    @foreach (var m in Model.Mappings)
                    {
                        string header = m.Label;
                        if (!string.IsNullOrEmpty(header))
                        {
                            <th class="sortable @Html.Raw(m.Id == Model.SortByField ? "sort sort-asc" : "")" data-column-id="@m.Id">@header</th>
                        }
                    }
                </tr>
            </thead>

            @*content*@
            <tbody id="ListEntitiesPanelTableBody" class="list-entities-table-body">
            </tbody>
        </table>
    </div>
    <div class="row" style="text-align:center;">
        <button class="btn-link" name="listEntitiesPanel_prev_button"><span style="align-content:center"><span class="glyphicon glyphicon-backward"></span>Prev</span></button>
        <input name="listEntitiesPanel_page_number" class="current-page" placeholder="1" value="" />&nbsp;/&nbsp;<span class="total-pages"></span>
        <button class="btn-link" name="listEntitiesPanel_next_button"><span style="align-content:center">Next<span class="glyphicon glyphicon-forward"></span></span></button>
    </div>
</div>

<script>
    {
        let currPage = 1;
        let itemsPerPage = @Model.ItemPerPage;
        let totalPages = 0;
        let sortAttributeMappingId = @Model.SortByField;
        let sortAsc = true;
        let query = '*:*';
        let isLoaded = false;
        let entityTypeFilter = "@Model.EntityTypeFilter";
        let links = {
            @for(int i = 0; i < Model.Fields.Count; ++i)
            {
                var field = Model.Fields[i];
                if(!string.IsNullOrEmpty(field.Link))
                {
                    Catfish.Areas.Manager.Services.PageService pageService = new Catfish.Areas.Manager.Services.PageService();
                    var page = pageService.GetAPage(field.Link);
                    <text>@Html.Raw(i + " : " + Json.Encode(UI.Permalink(page.Permalink).ToString()) + ",")</text>
                }
            }
        }

        function goToPage(whichPage){
            var page = currPage;

            if(whichPage === "Prev")
            {
                 page = currPage - 1;
            }
            else if (whichPage === "Next") {
                page = currPage + 1;
            } else {
                var page = parseInt(whichPage);
            }

            if (isNaN(page)) {
                return;
            }

            page = Math.min(Math.max(page, 1), totalPages);

            window.updateUrlParameters({
                'page' : page
            });
        }

        $("#@cssId button[name='listEntitiesPanel_prev_button']").click(function () {
            goToPage('Prev');
        });

        $("#@cssId button[name='listEntitiesPanel_next_button']").click(function () {
            goToPage('Next');
        });

        $("#@cssId .current-page").change(function (ev) {
            goToPage($(ev.currentTarget).val());
        });

        $("#@cssId .sortable").bind("click touch", function (ev) {
            var target = $(this);
            var id = parseInt(target.attr("data-column-id"));
            var sort = id == sortAttributeMappingId ? !sortAsc : true;

            window.updateUrlParameters({
                'sort': id,
                'sortAsc': sort
            });
        })

        function handleTableResults(resultData) {
            var tr, td, a;
            isLoaded = true;
            var results = resultData.result;

            totalPages = Math.ceil(resultData.total / itemsPerPage);
            $("#@cssId .total-pages").text(totalPages);

            // Change the sort column
            $("#@cssId .sortable").removeClass("sort").removeClass("sort-asc").removeClass("sort-desc");
            $("#@cssId  th[data-column-id='" + sortAttributeMappingId + "']").addClass("sort").addClass(sortAsc ? "sort-asc" : "sort-desc");

            //remove all rows in the tbody
            var body = $("#@cssId tbody.list-entities-table-body");
            body.children().remove();  //remove all row on the tbody

            //update table data
            var rowNum = 1 + ((currPage - 1) * itemsPerPage);
            for (var i = 0; i < results.length; ++i){ //going through each row
                tr = $("<tr></tr>");

                td = $("<td></td>");
                td.text(rowNum + i);
                tr.append(td);

                results[i].Item2.forEach(function (c, j) { //going through each column
                    td = $("<td></td>");
                    td.attr("class", "column-" + (j + 1));

                    if (links[j]) {
                        a = $("<a></a>");
                        a.attr("href", links[j] + "?entity=" + results[i].Item1);
                        a.text(c);

                        td.append(a);
                    } else {
                        td.text(c);
                    }

                    tr.append(td);
                });

                body.append(tr);
            };

            $("[name='listEntitiesPanel_page_number']").val(currPage);

            if (currPage < totalPages) {
                totalPages = currPage + 1;
                $("[name='listEntitiesPanel_next_button']").show();
            } else {
                totalPages = currPage;
                $("[name='listEntitiesPanel_next_button']").hide();
            }

            if(currPage == 1)
            {
                $("[name='listEntitiesPanel_prev_button']").hide();
            } else {
                $("[name='listEntitiesPanel_prev_button']").show();
            }

            window.stopLoading("#@cssId");
        }

        function updateTable() {
            var mapIds = @Html.Raw(Json.Encode(Model.Fields.Select(s => s.Id)));
            window.startLoading("#@cssId", 60000);

            var url = @Html.Raw(Json.Encode(Url.Action("GetPageItems", "Items")));

            $.ajax({
                type: 'GET',
                url: url,
                dataType: 'json',
                traditional: true,
                data: {
                    page: currPage - 1,
                    sortAttributeMappingId: sortAttributeMappingId,
                    sortAsc: sortAsc,
                    itemPerPage: itemsPerPage,
                    mapIds: mapIds,
                    entityTypeFilter: entityTypeFilter,
                    q: query,
                    lang:'@lang'
                },
                success: handleTableResults,
                error: function (response, ajaxOptions, error) {
                    alert("The following error occured:\r\n" + url + "\r\n" + error + "\r\n" + response.responseText);
                    window.stopLoading("#@cssId");
                }
            });
        }

        window.addEventListener('updatedparams', function (e) {
            var params = e.detail;
            var triggerUpdate = !isLoaded;

            if ('q' in params) {
                triggerUpdate = true;
                query = params['q'];
            }

            if ('page' in params) {
                triggerUpdate = true;
                currPage = parseInt(params['page']);
            }

            if ('itemsPerPage' in params) {
                triggerUpdate = true;
                itemsPerPage = parseInt(params['itemsPerPage']);
            }

            if ('sort' in params) {
                triggerUpdate = true;
                sortAttributeMappingId = parseInt(params['sort']);
            }

            if ('sortAsc' in params) {
                triggerUpdate = true;
                sortAsc = params['sortAsc'];
            }

            if (triggerUpdate) {
                updateTable();
            }
        });
    }
</script>