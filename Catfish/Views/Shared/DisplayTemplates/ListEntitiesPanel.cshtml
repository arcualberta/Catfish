@model Catfish.Models.Regions.ListEntitiesPanel
@using Catfish.Core.Models;

@{ 
    string cssId = string.IsNullOrEmpty(Model.CssId) ? Guid.NewGuid().ToString().Replace('-', 'K') : Model.CssId;
    string cssClasses = string.IsNullOrEmpty(Model.CssClasses) ? "" : Model.CssClasses;
    string cssStyles = string.IsNullOrEmpty(Model.CssStyles) ? "" : Model.CssStyles;
}

<div id="@cssId" class="bs @cssClasses container container-fluid">
    <style type="text/css" scoped>
           @Html.Raw(cssStyles)
    </style>
   <div class="row" style="text-align:center;margin-top:20px;">
       <button class="btn-link" name="listEntitiesPanel_prev_button"><span style="align-content:center"><span class="glyphicon glyphicon-backward"></span>Prev</span></button>
       <input name="listEntitiesPanel_page_number" placeholder="1" value="" style="width:15px; height:15px;" />
       <button class="btn-link" name="listEntitiesPanel_next_button"><span style="align-content:center">Next<span class="glyphicon glyphicon-forward"></span></span></button>
    </div>
    <div class="row ">
        <table class="table table-responsive table-striped">
            <tr>
                @*header*@
                <th></th>
                @foreach (var m in Model.Mappings)
                {
                    string header = m.Label;
                    if (!string.IsNullOrEmpty(header))
                    {
                        <th>@header</th>
                    }
                }
            </tr>

            @*content*@
            <tbody id="ListEntitiesPanelTableBody">
            </tbody>
        </table>
    </div>
    <div class="row" style="text-align:center;">
        <button class="btn-link" name="listEntitiesPanel_prev_button"><span style="align-content:center"><span class="glyphicon glyphicon-backward"></span>Prev</span></button>
        <input name="listEntitiesPanel_page_number" placeholder="1" value="" style="width:15px; height:15px;" />
        <button class="btn-link" name="listEntitiesPanel_next_button"><span style="align-content:center">Next<span class="glyphicon glyphicon-forward"></span></span></button>
    </div>
</div>

<script>
    {
        var currPage = 1;
        var itemsPerPage = @Model.ItemPerPage;
        var totalPages = 0;
        var sortAttributeMappingId = @Model.SortByField;
        var query = '*:*';
        var isLoaded = false;

        function goToPage(whichPage){
            var page = currPage;

            if(whichPage === "Prev")
            {
                 page = Math.max(currPage - 1, 1);
            }
            else if (whichPage === "Next") {
                page = Math.min(currPage + 1, totalPages);
            }

            window.updateUrlParameters({
                'page' : page
            });
        }

        $("#@cssId button[name='listEntitiesPanel_prev_button']").click(function () {
            goToPage('Prev');
        });

        $("#@cssId button[name='listEntitiesPanel_next_button']").click(function () {
            goToPage('Next');
        });

        function handleTableResults(results) {
            var tr, td;
            isLoaded = true;

            //remove all rows in the tbody
            var body = $("#ListEntitiesPanelTableBody");
            body.children().remove();  //remove all row on the tbody

            //update table data
            var rowNum = 1 + ((currPage - 1) * itemsPerPage);
            var minRow = Math.min(results.length, itemsPerPage);
            for (var i = 0; i < minRow; ++i){ //going through each row
                tr = $("<tr></tr>");

                td = $("<td></td>");
                td.text(rowNum + i);
                tr.append(td);
                
                results[i].forEach(function (c, j) { //going through each column
                    td = $("<td></td>");
                    td.attr("class", "column-" + (j + 1));
                    td.text(c);
                    tr.append(td);
                });

                body.append(tr);
            };

            $("[name='listEntitiesPanel_page_number']").val(currPage);

            if (results.length > itemsPerPage) {
                totalPages = currPage + 1;
                $("[name='listEntitiesPanel_next_button']").show();
            } else {
                totalPages = currPage;
                $("[name='listEntitiesPanel_next_button']").hide();
            }
            
            if(currPage == 1)
            {
                $("[name='listEntitiesPanel_prev_button']").hide();
            } else {
                $("[name='listEntitiesPanel_prev_button']").show();
            }
        }

        function updateTable() {
            var mapIds = @Html.Raw(Json.Encode(Model.Fields.Select(s => int.Parse(s)))); //[@Html.Raw(String.Join(",", Model.Fields.ToArray().Select(i=>i)))];

            $.ajax({
                type: 'GET',
                url:@Html.Raw(Json.Encode(Url.Action("GetPageItems", "Items"))),
                dataType: 'json',
                traditional: true,
                data: { page: currPage - 1, sortAttributeMappingId: sortAttributeMappingId, itemPerPage: itemsPerPage,mapIds:mapIds, q: query},
                success: handleTableResults,
                error: function(){
                  alert("Problems while updating table data");
                }
            });
        }

        window.addEventListener('updatedparams', function (e) {
            var params = e.detail;
            var triggerUpdate = !isLoaded;

            if ('q' in params) {
                triggerUpdate = true;
                query = params['q'];
            }

            if ('page' in params) {
                triggerUpdate = true;
                currPage = parseInt(params['page']);
            }

            if ('itemsPerPage' in params) {
                triggerUpdate = true;
                itemsPerPage = parseInt(params['itemsPerPage']);
            }

            if ('sort' in params) {
                triggerUpdate = true;
                sortAttributeMappingId = parseInt(params['sort']);
            }

            if (triggerUpdate) {
                updateTable();
            }
        });
    }
</script>