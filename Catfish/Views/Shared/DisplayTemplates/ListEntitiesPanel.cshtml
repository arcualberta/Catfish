@model Catfish.Models.Regions.ListEntitiesPanel
@using Catfish.Core.Models;


 @{ string cssId = string.IsNullOrEmpty(Model.CssId) ? Guid.NewGuid().ToString().Replace('-', 'K') : Model.CssId;
     string cssClasses = string.IsNullOrEmpty(Model.CssClasses) ? "" : Model.CssClasses;
     string cssStyles = string.IsNullOrEmpty(Model.CssStyles) ? "" : Model.CssStyles;
    
     var rowNum = ((Model.CurrentPage - 1) * Model.ItemPerPage) + 1;
 }
<div id="@cssId" class="bs @cssClasses container container-fluid">
    <style type="text/css" scoped>
           @Html.Raw(cssStyles)
    </style>
   <div class="row" style="text-align:center;margin-top:20px;">
       <button class="btn-link" name="listEntitiesPanel_prev_button" onclick="GoToPage('Prev'); return false;"><span style="align-content:center"><span class="glyphicon glyphicon-backward"></span>Prev</span></button>
       <input name="listEntitiesPanel_page_number" placeholder="1" value="" style="width:15px; height:15px;" />
       <button class="btn-link" name="listEntitiesPanel_next_button" onclick="GoToPage('Next'); return false;"><span style="align-content:center">Next<span class="glyphicon glyphicon-forward"></span></span></button>
    </div>
    <div class="row ">
        <table class="table table-responsive table-striped">
            <tr>
                @*header*@
                <th></th>
                @foreach (var m in Model.Mappings)
                {
                    string header = m.Label;
                    if (!string.IsNullOrEmpty(header))
                    {
                        <th>@header</th>
                    }
                }
            </tr>

            @*content*@
            <tbody id="ListEntitiesPanelTableBody">
               
                @foreach (var item in Model.Items)
                {
                    var i = 0;
                    
                    <tr >
                        <td>@rowNum</td>
                        @foreach (var f in Model.Mappings)
                        {
                            string content = item.GetAttributeMappingValue(f.Name);
                            <td class="column-@i">@content</td>
                            i++;
                        }
                    </tr>
                    rowNum++;
                }
            </tbody>
        </table>
    </div>
    <div class="row" style="text-align:center;">
        <button class="btn-link" name="listEntitiesPanel_prev_button"  onclick="GoToPage('Prev'); return false;" ><span style="align-content:center"><span class="glyphicon glyphicon-backward"></span>Prev</span></button>
        <input name="listEntitiesPanel_page_number" placeholder="1" value="" style="width:15px; height:15px;" />
        <button class="btn-link" name="listEntitiesPanel_next_button" onclick="GoToPage('Next'); return false;"><span style="align-content:center">Next<span class="glyphicon glyphicon-forward"></span></span></button>
    </div>
</div>

<script>
    {
        var currPage = curr@(cssId)page;
        var itemsPerPage = @Model.ItemPerPage;
        var totalPages = 100;
        var sortAttributeMappingId = @Model.SortByField;
        var query = '';

        function goToPage(whichPage){
            var page = currPage;

            if(whichPage === "Prev")
            {
                 page = Math.max(currPage - 1, 1);
            }
            else if (whichPage === "Next") {
                page = Math.min(currPage + 1, totalPages);
            }

            window.updateUrlParameters({
                'page' : page
            });
        }

        @("#@cssId button[name='listEntitiesPanel_prev_button']").click(function () {
            goToPage('Prev');
        });

        @("#@cssId button[name='listEntitiesPanel_next_button']").click(function () {
            goToPage('Next');
        });

        function handleTableResults(results) {
            //remove all rows in the tbody
            var body = $("#ListEntitiesPanelTableBody");
            body.children().remove();  //remove all row on the tbody

            //update table data
            var rowNum = 1 + ((currPage - 1) * itemsPerPage);
            result.forEach(function(r, i){ //going through each row
                var new_row = "<tr><td>"+rowNum + "</td>";
                var col = 0;
                r.forEach(function(c, j){ //going through each column
                        new_row += "<td class='column-" + col + "'>" + c + "</td>";
                        col = col +1;
                });
                new_row += "</tr>";
                body.append(new_row);
                rowNum = rowNum +1;
            });

            $("[name='listEntitiesPanel_page_number']").val(currPage);
                if(currPage == 1)
            {
                $("[name='listEntitiesPanel_prev_button']").hide();
            }
                else{
                    $("[name='listEntitiesPanel_prev_button']").show();
            }
        }

        function updateTable() {
            $.ajax({
                type: 'GET',
                url:url,
                dataType: 'json',
                traditional: true,
                data: { page: currPage - 1, sortAttributeMappingId: @Model.SortByField, itemPerPage:@Model.ItemPerPage,mapIds:mapIds, q:@Html.Raw(Json.Encode(Model.Query))},
                success: handleTableResults,
                error: function(){
                  alert("Problems while updating table data");
                }
            });
        }

        window.addEventListener('updatedparams', function (e) {
            var params = e.updatedparams;
            var updateTable = false;

            if ('q' in e) {
                updateTable = true;
                query = e['q'];
            }

            if ('page' in e) {
                updateTable = true;
                currPage = parseInt(e['page']);
            }

            if ('itemsPerPage' in e) {
                updateTable = true;
                itemsPerPage = parseInt(e['itemsPerPage']);
            }

            if ('sort' in e) {
                updateTable = true;
                sortAttributeMappingId = parseInt(e['sort']);
            }

            if (updateTable) {
                updateTable();
            }
        });
    }

    var curr@(cssId)page = @Model.CurrentPage;
    var rowNum = @rowNum;

   $(document).ready(function() {
       var curPage = curr@(cssId)page;

       if(curPage == 1)
        {
           $("[name='listEntitiesPanel_prev_button']").hide();
        }

       if(@Model.ItemCount < @Model.ItemPerPage)
        {
             $("[name='listEntitiesPanel_next_button']").hide();
        }
        $("[name='listEntitiesPanel_page_number']").val(curPage);
   });
</script>