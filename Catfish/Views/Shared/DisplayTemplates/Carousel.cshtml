@model Catfish.Models.Regions.Carousel

@if (string.IsNullOrEmpty(Model.ImageUrls)) { return; }

@{
    string[] slides = Model.ImageUrls.Split(new[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries);
    if (slides.Length == 0) { return; }

    var cssId = Model.CssId != null ? Model.CssId : "DefaultCarouselId";
    var cssClasses = Model.CssClasses;

    string[] links = null;
    if (!string.IsNullOrEmpty(Model.Links))
    {
        links = Model.Links.Split(Environment.NewLine.ToArray(), StringSplitOptions.RemoveEmptyEntries);
    }

}

<style type="text/css" scoped>
    #@cssId{
        padding:0;
        margin-top:-20px;
    }
#@cssId div.carousel-inner > div.item{
        background-repeat: no-repeat;
        background-size: cover;
        background-position: center;
        height: 400px;
    }

    @Model.CssStyles
</style>

<div class="bs">
    <div id="@cssId" class="carousel slide @cssClasses" data-ride="carousel">
        @if (slides.Length > 1 && Model.EnableControls)
        {
            <ol class="carousel-indicators">
                @for (var i = 0; i < slides.Length; ++i)
                {
                    var isActive = i == 0 ? "active" : "";
                    <li data-target="#@cssId" data-slide-to="@i" class="@isActive"></li>
                }
            </ol>
        }

        <div class="carousel-inner" role="listbox">
            @{
                for (var i = 0; i < slides.Length; ++i)
                {
                    var isActive = i == 0 ? "active" : "";
                    var imageUrl = slides[i];
                    var inlineStyles = imageUrl == null ? "background-color:#808080;" : "background-image:url('" + imageUrl + "');";
                    string link = links != null ? links[i] : null;

                    string clickEvent = "";
                    if (!string.IsNullOrEmpty(link))
                    {
                        clickEvent = "onclick=\"window.location = '" + link + "';\"";
                    }

                    <div class="item @isActive" style="@inlineStyles" @Html.Raw(clickEvent)>
                    </div>

                }
            }
        </div>@if (slides.Length > 1 && Model.EnableControls)
        {
            <a class="carousel-control-prev" href="#@cssId" role="button" data-slide="prev">
                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                <span class="sr-only">Previous</span>
            </a>
            <a class="carousel-control-next" href="#@cssId" role="button" data-slide="next">
                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                <span class="sr-only">Next</span>
            </a>
        }
    </div>
    @{var interval = Model.Interval == 0 ? 3000 : Model.Interval;}
    <script language="JavaScript" type="text/javascript">
    $(document).ready(function () {
        $('#@cssId').carousel({
            interval: @interval,
            pause: "false"
            });
    });
    </script>
</div>