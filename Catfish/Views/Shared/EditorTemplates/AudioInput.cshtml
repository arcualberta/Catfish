@model Catfish.Core.Models.Forms.AudioInput
@using Catfish.Core.Models.Forms;
@using Catfish.Areas.Manager.Models.ViewModels;
@using Catfish.Core.Models.Data;
@Html.Hidden("ModelType", Model.GetType().AssemblyQualifiedName, new Dictionary<string, object>()
{
    {"class", "model-type"}
})


@{
    string containerId = Guid.NewGuid().ToString();
    string audioFileId = containerId + "_file";
    string audioId = containerId + "_audio";
    string audioButtonId = audioId + "_btn";
    string pauseBtn = audioButtonId + "_pause";
    string resumeBtn = audioButtonId + "_resume";
    string uploadApiUrl = "/apix/attachment/upload";
    string deleteApiUrl = "/apix/attachment/deleteCashedFile";

    string fileGuidListFieldId = Html.IdFor(m => m.FileGuids).ToString();
    List<string> crossLinkedFileGuids = ViewBag.CrossLinkedFileGuids != null ?
        ViewBag.CrossLinkedFileGuids as List<string>
        : new List<string>();
}


<div id="@containerId" class="bs audioInput">
    @Html.HiddenFor(m => m.FileGuids)
    <input id="@audioFileId" class="clipFiles" type="file" multiple="multiple" style="display:none" />
    <audio id="@audioId" controls controlslist="download"></audio>
    <button id="@audioButtonId" class="glyphicon glyphicon-record audioInputGlyphicon audioInputGlyphiconRecord" data-toggle="tooltip" data-placement="top" title="Record"></button>
    <button id="@pauseBtn" class="glyphicon glyphicon-pause audioInputGlyphicon " data-toggle="tooltip" data-placement="top" title="Pause"></button>
    <button id="@resumeBtn" class="glyphicon glyphicon-play audioInputGlyphicon" data-toggle="tooltip" data-placement="top" title="Resume"></button>
    <div id="recordingTimeProgression"><span id="hr">00</span>:<span id="mm">00</span>:<span id="secs">00</span></div>
    <div class="thumbnailPanel">
        @{
            List<CFDataFile> files = ViewBag.Files == null ? new List<CFDataFile>() : ViewBag.Files as List<CFDataFile>;
            string[] fileGuids = Model.FileGuids.Split(new char[] { Attachment.FileGuidSeparator });
            int parentId = ViewBag.ParentId != null ? (int)ViewBag.ParentId : 0;
            string controller = string.IsNullOrEmpty(ViewBag.Controller) ? "attachment" : ViewBag.Controller as string;

            foreach (var fileGuid in fileGuids)
            {
                var file = files.Where(f => f.Guid == fileGuid).FirstOrDefault();
                if (file != null)
                {
                    FileViewModel vm = new FileViewModel(file, parentId, Request.RequestContext, controller);

                    bool undeletable = crossLinkedFileGuids.Contains(file.Guid);
                    string secondaryClass = undeletable ? "undeletable" : "";
                    var eleId = @vm.Guid.Substring(0, @vm.Guid.Length - 4);


                    <div class="fileThumbnail @eleId @secondaryClass">

                        <div class="img" style="background-image:url(@vm.ThumbnailUrl)"></div>

                        @if (!undeletable)
                        {
                            <button class="glyphicon glyphicon-remove audioInputGlyphicon audioInputGlyphiconremove" onclick="deleteLinkedFile('@vm.Guid', '@fileGuidListFieldId', '@vm.FileName','@containerId'); return false;">Delete</button>
                        }
                        <div class="label"><a href="@vm.Url">@vm.FileName</a></div>
                    </div>
                }
            }
        }
    </div>

</div>
<section class="sound-clips col-md-8"></section>

<script>
    function startAudioInput() { // Turned into a function and changed lets to vars to work in Safri
        $("body").tooltip({ selector: '[data-toggle=tooltip]' }); //enabled bootstrap tooltips
        var recorder, gumStream;
        var recordButton = document.getElementById("@audioButtonId");
        var soundClips = document.querySelector('.sound-clips');
        var attachmentFile = document.getElementById("@audioFileId");
        var pauseButton = document.getElementById("@pauseBtn");
        var resumeButton = document.getElementById("@resumeBtn");
        var chunks = [];
        var form = new FormData();
        var timestamp = new Date(new Date().setHours(0, 0, 0, 0)); //set to 0h:0m:0s
        var recordingTimer;

        var Timer = {
            totalSeconds: 0,

            start: function () {
                var self = this;

                this.interval = setInterval(function () {
                    self.totalSeconds += 1;

                    var hour = Math.floor(self.totalSeconds / 3600);
                    var minute = Math.floor(self.totalSeconds / 60 % 60);
                    var second = parseInt(self.totalSeconds % 60);

                    if (hour < 10) hour = "0" + hour;
                    if (minute < 10) minute = "0" + minute;
                    if (second < 10) second = "0" + second;

                    $("#recordingTimeProgression > #hr").text(hour);
                    $("#recordingTimeProgression > #mm").text(minute);
                    $("#recordingTimeProgression > #secs").text(second);
                }, 1000);
            },

            pause: function () {
                clearInterval(this.interval);
                delete this.interval;
            },

            resume: function () {
                if (!this.interval) this.start();
            },
            stop: function () {
                clearInterval(this.interval);
                $("#recordingTimeProgression > #hr").text("00");
                $("#recordingTimeProgression > #mm").text("00");
                $("#recordingTimeProgression > #secs").text("00");
            }
        };


        var dataTransfer = null;

        try {
            dataTransfer = new ClipboardEvent('').clipboardData || new DataTransfer() || [];
        } catch (e) {
            alert("Could not create Audio Input. " + e.message);
        }

        function toggleRecording(e) {
            e.preventDefault();
            if (recorder && recorder.state == "recording") {
                recorder.stop();
                gumStream.getAudioTracks()[0].stop();
                recordButton.classList.remove("glyphicon-stop");
                recordButton.classList.add("glyphicon-record");

                recordButton.setAttribute('data-original-title', 'Record');
                $("#@pauseBtn").hide();
                $("#@resumeBtn").hide();

                //stop timer
                Timer.stop();
            } else {
                navigator.mediaDevices.getUserMedia({
                    audio: true
                }).then(function (stream) {
                    gumStream = stream;
                    recorder = new MediaRecorder(stream);

                    recorder.ondataavailable = function (e) {
                        chunks.push(e.data);
                        var blobMp3 = new Blob(chunks, { type: 'audio/webm' });
                        var url = URL.createObjectURL(blobMp3);
                        var preview = document.getElementById("@audioId"); //
                        preview.controls = true;
                        preview.playbackRate = 0.5;
                        preview.src = url;

                    };
                    recorder.start();

                    //update the time -- show the recording time progression
                    Timer.start();

                    recordButton.classList.remove("glyphicon-record");
                    recordButton.classList.add("glyphicon-stop");


                    recordButton.setAttribute('data-original-title', 'Stop');
                    $("#@pauseBtn").show();


                    recorder.onstop = function (e) {

                        //recordButton.innerHTML = "Record";
                        var clipName = prompt('Enter a name for your sound clip?', 'sampleClip');
                        var clipContainer = document.createElement('div');
                        var clipLabel = document.createElement('span');
                        var audio = document.createElement('audio');
                        var deleteButton = document.createElement('button');
                        var downloadButton = document.createElement('button');
                        audio.classList.add("col-md-6");
                        clipLabel.classList.add('clipLabel');
                        clipLabel.classList.add('col-md-4');
                        clipContainer.classList.add('clip');
                        audio.setAttribute('controls', '');

                        deleteButton.classList.add('deleteBtn');
                        deleteButton.classList.add('glyphicon');
                        deleteButton.classList.add('glyphicon-remove');
                        deleteButton.classList.add('audioInputGlyphicon')
                        deleteButton.classList.add('audioInputGlyphiconremove')

                        //set the tooltips
                        deleteButton.setAttribute('data-toggle', 'tooltip');
                        deleteButton.setAttribute('data-placement', 'top');
                        deleteButton.setAttribute('data-original-title', 'Delete');

                        downloadButton.classList.add('downloadBtn');
                        downloadButton.classList.add('glyphicon');
                        downloadButton.classList.add('glyphicon-save');
                        downloadButton.classList.add('audioInputGlyphicon');

                        //set the tooltips
                        downloadButton.setAttribute('data-toggle', 'tooltip');
                        downloadButton.setAttribute('data-placement', 'top');
                        downloadButton.setAttribute('data-original-title', 'Download');

                        if (clipName === null) {
                            clipLabel.textContent = 'Sample clip';
                        } else {
                            clipLabel.textContent = clipName;
                        }

                        clipContainer.appendChild(audio);
                        clipContainer.appendChild(clipLabel);
                        clipContainer.appendChild(downloadButton);
                        clipContainer.appendChild(deleteButton);
                        soundClips.appendChild(clipContainer);

                        audio.controls = true;
                        var blob = new Blob(chunks, { 'type': 'audio/webm' });

                        var audioURL = window.URL.createObjectURL(blob);
                        audio.src = audioURL;

                        //handle delete individual file
                        deleteButton.onclick = function (e) {
                            evtTgt = e.target;
                            evtTgt.parentNode.parentNode.removeChild(evtTgt.parentNode);
                            e.preventDefault();
                        }

                        //handle individual download file
                        downloadButton.onclick = function (e) {
                            e.preventDefault();
                            var a = document.createElement('a');
                            clipContainer.appendChild(a);

                            a.href = audioURL;
                            a.download = clipLabel.textContent + ".webm";
                            a.click();
                            window.URL.revokeObjectURL(previewSrc);

                        }

                        //handle label changes
                        clipLabel.onclick = function () {
                            var existingName = clipLabel.textContent;
                            var newClipName = prompt('Enter a new name for your sound clip?');
                            if (newClipName === null) {
                                clipLabel.textContent = existingName;
                            } else {
                                clipLabel.textContent = newClipName;
                            }
                        }

                        //attached file to attachmentFile element
                        let fileName = clipLabel.textContent + ".webm";

                        var file = new File([blob], fileName, { type: "audio/webm", lastModified: Date.now() });

                        if (dataTransfer != null) {
                            dataTransfer.items.add(new File([file], fileName));
                            attachmentFile.files = dataTransfer.files;
                        } else {
                            console.warn("Could not save files due to missing DataTransfer object.");
                        }

                        chunks = [];
                    }

                }).catch(function (e) {
                    alert(e.message);
                });
            }
        }//end of toggle recording
        recordButton.onclick = toggleRecording;

        function pauseRecording(e) {
            e.preventDefault();
            recorder.pause();
            $("#@resumeBtn").show();
            $("#@pauseBtn").hide();
            //pause the timer
            Timer.pause();
        }
        pauseButton.onclick = pauseRecording;

        function resumeRecording(e) {
            e.preventDefault();
            recorder.resume();
            $("#@pauseBtn").show();
            $("#@resumeBtn").hide();
            //resume Timer
            Timer.resume();
        }
        resumeButton.onclick = resumeRecording;


        $(document).ready(function () {
            $("#@pauseBtn").hide();
            $("#@resumeBtn").hide();
            $("#@containerId").parents("form:first")[0].submitEvents.push(function () {

                var promise = new Promise(function (resolve, reject) {
                    uploadClipFile('@containerId', '@uploadApiUrl', '@deleteApiUrl', '@fileGuidListFieldId', resolve, reject);
                });

                return promise;
            });// end of onSubmit
             //jan 3 2020 -- capture form submit error -- form validation error
             //if form is invalid on submit, remove the the temp file.
             $("#@containerId").parents("form:first")[0].onErrorEvents.push(function () {
                     //automatically click "yes" on the confirm dialog
                      var realConfirm=window.confirm;
                      window.confirm=function(){
                          window.confirm=realConfirm;
                          return true;
                      };
                   //remove the temp file
                   $(".thumbnailPanel > .fileThumbnail >.glyphicon-remove").click();
             });
        });


        function uploadClipFile(containerId, uploadApiUrl, deleteApiUrl, fileGuidListFieldId, onSuccess, onError) {
            var myFrm = new FormData();

            for (var i = 0; i < attachmentFile.files.length; i++) {
                myFrm.append("inputFile" + i, attachmentFile.files[i]);
            }

            var oReg = new XMLHttpRequest();

            if (navigator.userAgent.toLowerCase().indexOf('firefox') > -1) {
                oReg.onload = function (event) {
                    stateChange(event.target.response,
                        deleteApiUrl,
                        containerId,
                        fileGuidListFieldId,
                        oReg, onSuccess, onError);
                };
            } else {
                oReg.onreadystatechange = function (data) {
                    stateChange(data.srcElement.responseText,
                        deleteApiUrl,
                        containerId,
                        fileGuidListFieldId,
                        oReg, onSuccess, onError);
                };
            }
            oReg.open('POST', uploadApiUrl);
            oReg.send(myFrm);

        }// END function uploadFile()

    };
	startAudioInput();
</script>
