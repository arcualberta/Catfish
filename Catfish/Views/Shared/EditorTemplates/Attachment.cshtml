@model Catfish.Core.Models.Forms.Attachment
    
@using Catfish.Core.Models.Forms;
@using Catfish.Areas.Manager.Models.ViewModels;
@using Catfish.Core.Models.Data;

@Html.Hidden("ModelType", Model.GetType().AssemblyQualifiedName, new Dictionary<string, object>()
{
    {"class", "model-type"}
})
@Html.HiddenFor(m => m.Ref)

@{
    string containerId = Guid.NewGuid().ToString("N");
    string uploadApiUrl = ViewBag.UploadApiUrl as string;
    string deleteApiUrl = ViewBag.DeleteApiUrl as string;
    List<string> crossLinkedFileGuids = ViewBag.CrossLinkedFileGuids != null ? 
        ViewBag.CrossLinkedFileGuids as List<string>
        : new List<string>();
}


<div id="@containerId" class="inner file-upload" style="clear:both">
    <div class="thumbnailPanel">
        @{ string fileGuidListFieldId = Html.IdFor(m => m.FileGuids).ToString(); }
        @Html.HiddenFor(m => m.FileGuids)

        @{ 
            List<DataFile> files = ViewBag.Files == null ? new List<DataFile>() : ViewBag.Files as List<DataFile>;
            string[] fileGuids = Model.FileGuids.Split(new char[] { Attachment.FileGuidSeparator });
            int parentId = ViewBag.ParentId != null ? (int)ViewBag.ParentId : 0;
            string controller = string.IsNullOrEmpty(ViewBag.Controller) ? "attachment" : ViewBag.Controller as string;

            foreach (var fileGuid in fileGuids)
            {
                var file = files.Where(f => f.GuidName == fileGuid).FirstOrDefault();
                if (file != null)
                {
                    FileViewModel vm= new FileViewModel(file, parentId, Request.RequestContext, controller);
                    bool undeletable = crossLinkedFileGuids.Contains(file.GuidName);
                    string secondaryClass = undeletable ? "undeletable" : "";
                    var eleId = @vm.Guid.Substring(0, @vm.Guid.Length - 4);
                    <div class="fileThumbnail @eleId @secondaryClass">
                        <img src="@vm.Thumbnail" alt="@vm.FileName" />
                        @if (!undeletable)
                        {
                            <button class="glyphicon glyphicon-remove" onclick="deleteLinkedFile('@vm.Guid', '@fileGuidListFieldId', '@vm.FileName','@containerId'); return false;"></button>
                        }
                        <div class="label"><a href="@vm.Url">@vm.FileName</a></div>
                    </div>
                    }
                }
            }
    </div>
    <div class="inner" style="clear:both">
        <div class="alert alert-danger messageBox"></div>

        <input type='file' class="uploadField" name="files" multiple="multiple" />
        <input type="button" value="Upload" class="uploadButton" 
               onclick="uploadFile2('@containerId', '@uploadApiUrl', '@deleteApiUrl', '@fileGuidListFieldId'); return false;" />
        <div class="progressBar"><progress></progress></div>
    </div>
</div>

<script>
    $(function () {
        $("#@containerId .progressBar").hide();
        $("#@containerId .messageBox").hide();
    });
</script>