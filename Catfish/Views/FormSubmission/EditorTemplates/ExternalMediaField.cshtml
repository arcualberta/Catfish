@model Catfish.Core.Models.Forms.ExternalMediaField
@using Catfish.Core.Models.Data;

@{ 
    string id = Model.Guid.Replace("-", "");
}

@Html.Hidden("ModelType", Model.GetType().AssemblyQualifiedName, new Dictionary<string, object>()
{
    {"class", "model-type"}
})

@helper AddAudioSection(string id) { 
    string playOnshowClass = Model.PlayOnShow ? "audio-play-on-show" : String.Empty;
    string type = Model.Source.ToLower().EndsWith(".wav") ? "audio/wav" : "audio/mpeg";
    if (Model.PlayOnce)
    {
        <div class="bs audio-play-once @playOnshowClass">
            <audio id = "audio-player-@id" class="" preload="metadata">
                <source src = "@Model.Source" type="@type">
                Your browser does not support the audio element.
            </audio>
            <div id = "audio-player-controls-@id" class="audio-player-controls">
                <button type = "button" href="#" id="audio-play-@id" class="btn btn-default audio-play">
                    <span class="glyphicon glyphicon-play"></span>
                </button>
                <input id = "audio-range-@id" type="range" class="audio-player-range" disabled />
                <span class="audio-player-time"></span>
            </div>
        </div>
    }
    else
    {
        <div class="@playOnshowClass">
            <audio controls preload="metadata">
                <source src="@Model.Source" type="@type">
                Your browser does not support the audio element.
            </audio>
        </div>
    }
}

@helper NotImplementedSection() { 
    <p>Media type @Enum.GetName(typeof(CFDataFile.MimeType), Model.MediaType) not yet implemented.</p>
}

@Html.HiddenFor(m => m.Guid)
@switch (Model.MediaType)
{
    case CFDataFile.MimeType.Audio:
        @AddAudioSection(id);
        break;

    default:
        @NotImplementedSection();
        break;
}