@model Catfish.Core.Models.Forms.CompositeFormField
@using Catfish.Core.Models.Forms;

@{ 
    string id = Model.Guid.Replace("-", "");
    string currentPath = ViewData.ContainsKey("ParentPath") ? (string)ViewData["ParentPath"] + "," : "";
    currentPath += "#" + id;

    CompositeFormField.eStepState stepState = Model.StepState;

    bool stepThroughChildren = Model.StepState != CompositeFormField.eStepState.None;

    string newClass = stepThroughChildren ? "stepField" : "";

    if(Model.StepState == CompositeFormField.eStepState.Accumulative)
    {
        newClass += " stepOnce";
    }

}

@Html.Hidden("ModelType", Model.GetType().AssemblyQualifiedName, new Dictionary<string, object>()
{
    {"class", "model-type"}
})
@Html.HiddenFor(m => m.Guid)

<div>
    @for (int i = 0; i < Model.Header.Count; ++i)
    {
        string fieldName = Model.Header[i].GetName();
        string fieldId = Model.Header[i].Guid.Replace("-", "");

        if (stepThroughChildren && !(Model.Header[i] is Catfish.Core.Models.Forms.CompositeFormField))
        {
            ((List<string>)ViewData["QuestionIndex"]).Add(string.Format("{0},#{1}", currentPath, fieldId));
        }

        <div id="@fieldId" class="@newClass">
            @if (!string.IsNullOrEmpty(fieldName))
            {
                <div><label class="control-label">@fieldName</label></div>
            }
            @Html.EditorFor(m => Model.Header[i], new { ParentPath = currentPath, QuestionIndex = ViewData["QuestionIndex"], StepThroughChildren = stepThroughChildren })
        </div>
    }

    @for (int i = 0; i < Model.Fields.Count; ++i)
    {
        string fieldName = Model.Fields[i].GetName();
        string fieldId = Model.Fields[i].Guid.Replace("-", "");

        if (stepThroughChildren && !(Model.Fields[i] is Catfish.Core.Models.Forms.CompositeFormField))
        {
            ((List<string>)ViewData["QuestionIndex"]).Add(string.Format("{0},#{1}", currentPath, fieldId));
        }

        <div id="@fieldId" class="@newClass">
            @if (!string.IsNullOrEmpty(fieldName))
            {
                <div><label class="control-label">@fieldName</label></div>
            }
            @Html.EditorFor(m => Model.Fields[i], new { ParentPath = currentPath, QuestionIndex = ViewData["QuestionIndex"], StepThroughChildren = stepThroughChildren })
        </div>
    }

    @for (int i = 0; i < Model.Footer.Count; ++i)
    {
        string fieldName = Model.Footer[i].GetName();
        string fieldId = Model.Footer[i].Guid.Replace("-", "");

        if (stepThroughChildren && !(Model.Footer[i] is Catfish.Core.Models.Forms.CompositeFormField))
        {
            ((List<string>)ViewData["QuestionIndex"]).Add(string.Format("{0},#{1}", currentPath, fieldId));
        }

        <div id="@fieldId" class="@newClass">
            @if (!string.IsNullOrEmpty(fieldName))
            {
                <div><label class="control-label">@fieldName</label></div>
            }
            @Html.EditorFor(m => Model.Footer[i], new { ParentPath = currentPath, QuestionIndex = ViewData["QuestionIndex"], StepThroughChildren = stepThroughChildren })
        </div>
    }

</div>
