@model Catfish.Core.Models.Form

@using Catfish.Core.Models.Forms;
@using Catfish.Core.Models.Data;

@Html.Hidden("ModelType", Model.GetType().AssemblyQualifiedName, new Dictionary<string, object>()
{
{"class", "model-type"}
})


<script>



    document.addEventListener("DOMContentLoaded", function (event) {


        var secondsToTime = function (time) {
            var timeString = ""

            var hours = Math.floor(time / 3600)
            var minutes = Math.floor((time % 3600) / 60)
            // js returns floats on % operation
            var seconds = Math.floor(time % 60)

            if (hours > 0) {
                timeString = String(hours) + ":"
            }

            timeString += ("00" + minutes).slice(-2) + ":";
            timeString += ("00" + seconds).slice(-2);

            return timeString;

        };

        var getAudioDurationString = function (audio) {
            return secondsToTime(audio.currentTime)
                + " / " + secondsToTime(audio.duration)
        }

            var setPlayFunctions = function (audioPlayerOnce) {
                var audioPlayer = audioPlayerOnce.getElementsByTagName('audio')[0];
                var audioPlayerControls = audioPlayerOnce.getElementsByClassName('audio-player-controls')[0];
                var audioPlayerPlayButton = audioPlayerControls.getElementsByClassName('audio-play')[0];
                var audioPlayerRange = audioPlayerControls.getElementsByClassName('audio-player-range')[0];
                var audioPlayerTime = audioPlayerControls.getElementsByClassName('audio-player-time')[0];

                audioPlayerRange.value = 0;
                audioPlayerPlayButton.onclick = function (target) {
                    audioPlayerPlayButton.setAttribute("disabled", true);
                    audioPlayer.play();

                    if (typeof(this["onPlayStart"]) == "function") {
                        this["onPlayStart"]();
                    }
                }


                audioPlayer.ontimeupdate = function (target) {
                    var range = 100.0 * (audioPlayer.currentTime / audioPlayer.duration); // Brackets are used to prevent rounding errors caused my multiplying first.
                    audioPlayerRange.value = range;
                    audioPlayerTime.innerHTML = getAudioDurationString(audioPlayer);

                    if (range >= 99.99999 && typeof (audioPlayerPlayButton["onPlayEnd"]) == "function") {
                        audioPlayerPlayButton["onPlayEnd"]();
                    }
                }
            }

            var audioPlayersOnce = document.getElementsByClassName('audio-play-once');
        
            for (var i = 0; i < audioPlayersOnce.length; ++i){
                let audioPlayerOnce = audioPlayersOnce[i];
                
                setPlayFunctions(audioPlayerOnce);
            };
        });
</script>


@{
    var culture = Catfish.Helpers.ViewHelper.GetActiveLanguage();
    string lang = culture.TwoLetterISOLanguageName;

    if (!string.IsNullOrEmpty(Model.ReferenceCode))
    {
        <div class="reference-label">Reference Code: @Model.ReferenceCode</div>
        @Html.HiddenFor(model => model.ReferenceCode)
    }

    for (int i = 0; i < Model.Fields.Count; ++i)
    {
        string name = Model.Fields[i].GetName(lang, true);
        string description = Model.Fields[i].GetDescription(lang);
        bool isHidden = Model.Fields[i].IsHidden();
        bool isRequired = Model.Fields[i].IsRequired;

        @Html.HiddenFor(m => m.Fields[i].IsRequired)

        <div class="col-xs-12 form-field">
            @if (!string.IsNullOrEmpty(name) && isHidden == false)
            {
                <div class="name">
                    @Html.Label(name)
                    @if(isRequired)
                    {
                        <apan class="error">*</apan>
                    }
                </div>
            }

            @if (!string.IsNullOrEmpty(description) && isHidden == false)
            {
                <div class="desc">
                    @Html.Raw(description)
                </div>
            }
            <!--   Melania   -->
            <!-- XXX Move field rendering to helpers -->
            @foreach (var f in Model.Fields[i].Files)
            {
                string source = Url.Action("File", "Items", new { id = Model.Id, guid = f.DataFile.Guid });
                <div>
                    @if (f.DataFile.TopMimeType == CFDataFile.MimeType.Image)
                    {
                        <img src="@source" width="50" height="50" />
                    }
                    else if (f.DataFile.TopMimeType == CFDataFile.MimeType.Video)
                    {
                        string type = f.DataFile.ContentType.Contains("mp4") == true ? "video/mp4" : f.DataFile.ContentType.Contains("avi") == true ? "video/avi" : "video/ogg";
                        <video width="320" height="240" controls>
                            <source src="@source" type="@type">
                            Your browser does not support the video tag.
                        </video>
                    }
                    else if (f.DataFile.TopMimeType == CFDataFile.MimeType.Audio)
                    {
                        //audio
                        <p>
                            @f.Label
                        </p>


                        string type = f.DataFile.ContentType;
                        if (f.FileOptions.PlayOnce)
                        {

                            <div class="bs audio-play-once">

                                <audio id="audio-player-@f.Guid" class="" preload="metadata">
                                    <source src="@source" type="@type">
                                    Your browser does not support the audio element.
                                </audio>
                                <div id="audio-player-controls-@f.Guid" class="audio-player-controls">
                                    <button type="button" href="#" id="audio-play-@f.Guid" class="btn btn-default">
                                        <span class="glyphicon glyphicon-play audio-play"></span>
                                    </button>
                                    <input id="audio-range-@f.Guid" type="range" class="audio-player-range" disabled />
                                    <span class="audio-player-time"></span>
                                </div>
                            </div>

                        }
                        else
                        {
                            <div>
                                <audio controls preload="metadata">
                                    <source src="@source" type="@type">
                                    Your browser does not support the audio element.
                                </audio>
                            </div>

                        }
                    }
                </div>
            }

            <!--   End Melania   -->
            <div class="input">
                @if (typeof(Attachment).IsAssignableFrom(Model.Fields[i].GetType()))
                {
                    int maxPixelSize = 0;
                    if(ViewBag.MaxPixelSize != null)
                    {
                        maxPixelSize = (ViewBag.MaxPixelSize as int?).Value;
                    }

                    @Html.EditorFor(m => Model.Fields[i],
                 new
                 {
                     UploadApiUrl = Url.Action("upload", "attachment", new { maxPixelSize = maxPixelSize }),
                     DeleteApiUrl = Url.Action("deleteCashedFile", "attachment"),
                     ParentId = Model.Id,
                     Controller = "items",
                     QuestionIndex = ViewData["QuestionIndex"]
                 })

                }
                else
                {
                    @Html.EditorFor(m => Model.Fields[i], new { QuestionIndex = ViewData["QuestionIndex"] })
                    <div class="error form-error" name="@Html.NameFor(m => Model.Fields[i])" style="display:none;"></div>
                }
            </div>

        </div>
        }
    }
