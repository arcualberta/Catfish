@model Catfish.Core.Models.Forms.DropDownMenu
@using Catfish.Helpers;

@{
    string lang = ViewHelper.GetActiveLanguage().TwoLetterISOLanguageName;
    Model.Value = Model.Options.Where(o => o.Selected).SelectMany(o => o.Value.Where(v => v.LanguageCode == lang)).Select(v => v.Value).FirstOrDefault();
    IEnumerable<SelectListItem> items = Model.Options.SelectMany(o => o.Value.Where(v => v.LanguageCode == lang)).Select(v => new SelectListItem { Value = v.Value, Text = v.Value });
    var options = new List<SelectListItem>() { new SelectListItem { Text = "", Value = "" } };
    options.AddRange(items);

    IDictionary<string, object> htmlAttributes = new Dictionary<string, object>();

    if (Model.IsRequired)
    {
        htmlAttributes.Add("required", "required");
    }
}

@Html.Hidden("ModelType", Model.GetType().AssemblyQualifiedName, new Dictionary<string, object>()
{
    {"class", "model-type"}
})
@Html.HiddenFor(m => m.Guid)


<div class="form-field-name">
    @Html.Label(string.IsNullOrEmpty(Model.Name) ? "" : Model.Name, new { @name = "label" })
</div>
<div class="form-field-value">
    @{ bool showLanguageLabel = Model.Values.Count() > 1; }
    @Html.DropDownListFor(m => m.Value, options, htmlAttributes)
</div>
