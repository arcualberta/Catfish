@model Catfish.Models.Blocks.FreeSearchBlock

@using Catfish.Services;

@using Microsoft.AspNetCore.Mvc;
@using Microsoft.AspNetCore.Mvc.RazorPages;

@using Catfish.Core.Models.Contents.Fields
@using Catfish.Core.Models.Solr;
@using Catfish.Core.Services.Solr;
@using Catfish.Pages;


@{
    var Results = new List<SolrEntry>();
}

<script>
    $(function () {
        $("#freeSearchBlockForm").submit(function (event) {

            /* stop form from submitting normally */
            event.preventDefault();

            /* get the action attribute from the <form action=""> element */
            var $form = $(this),
                url = $form.attr('action');

            /* Send the data using post with element id name and name2*/
            var posting = $.post(url, {
                searchTerm: $('#freeSearchBlockTem').val()
            });

            /* Alerts the results */
            posting.done(function (data) {
                //TODO: Check the content of the data to understand it.
                //Iterate throgh the list of results and add them as new elements to the search-result div

                var reslutEntries = []; //TODO: assign the list retrieved from data here
                // for each entry in resultEntries
                // create a div that contains the entry title and the list of highlighted snippets as shown in
                //the example. Insert it to the following element.
                //$('#freeSearchBlockResults')
            });

            posting.fail(function () {
                alert('The search failed!');
            });
        });
    });
</script>


<!-- TODO: Make the following a search form -->
<form id="freeSearchBlockForm" method="post" action="/api/search/freetext">
    <input type="text" name="freeSearchBlockTem" id="freeSearchBlockTem" />
    <input id="freeSearchBlockButton" type="submit" value="Submit" />
</form>

<div id="freeSearchBlockResults">

    <!-- sample for one of the search result entries. When the code is implemented, remove this and rather
        populate this section by creating new entries with simialr structure. 
     -->

    <div class="search-resultoentry">
        <div class="entry-title">Title of the enrty from the seach reslut</div>
        <div class="entry-body">Content of the entry body, which is the list of highlight snippets</div>
    </div>
</div>

@*<ul>
    @{
        foreach (var entry in Results)
        {
            <li>
                @foreach (var title in entry.Title)
                {
                    <div><b>@Html.Raw(title)</b></div>
                }


                <div>Object ID: @entry.Id</div>
                <div>Object Type: @entry.ObjectType</div>


                @foreach (var snippet in entry.Highlights)
                {
                    <div>@Html.Raw(snippet)</div>
                }
            </li>
        }
    }
</ul>*@
