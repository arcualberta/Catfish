@model Catfish.Models.Blocks.SubmissionForm
@*
    This view is used for rendering forms that are submitted to create new Items. Each
    item is created using the data-item template that is idenfified by is-root = true in
    the entity template.
    Note that this template should only be used for creating new items. It should NOT be
    used for updating existing items.
*@
@using Catfish.Core.Authorization.Requirements;
@using Microsoft.AspNetCore.Authorization;
@using Catfish.Core.Models;
 
@inject Microsoft.AspNetCore.Authorization.IAuthorizationService _authorizationService;
@inject Catfish.Services.IEntityTemplateService _entityTemplateService;
@inject Catfish.Core.Services.IWorkflowService _workflowService;

@{
    string suffix = Guid.NewGuid().ToString();
    string formPostUrl = "/api/items";
    var entityTemplateId = Guid.Parse(Model.SelectedItemTemplate);
    var collectionId = Guid.Parse(Model.SelectedCollection);
    string function = Model.WorkflowFunction;
    string group = Model.WorkflowGroup;
    var template = _entityTemplateService.GetTemplate(entityTemplateId);

    var Item = template.InstantiateRootItem();

    var postActions = _workflowService.GetPostActions(template, function, group);
    string successMessage = string.IsNullOrEmpty(Model.SubmissionConfirmation.Value.ToString()) ? "" : Model.SubmissionConfirmation.Value.ToString();

}
@{
    bool authorizationSuccessful = (await _authorizationService.AuthorizeAsync(User, template,
        new List<IAuthorizationRequirement>() { TemplateOperations.Instantiate }))
       .Succeeded;

    List<Group> groups = null;
    if (authorizationSuccessful)
    {
        if (Model.LinkToGroup.Value)
        {
            //Select the list of groups where 
            //  (a) the template is associated with, and 
            //  (b) the user is holding a role that is authorized to "instantiate" the template
            groups = _workflowService.GetApplicableGroups(User, TemplateOperations.Instantiate, template, null);

            //If the user does not belong to any such groups above, the user is not authorized to instantiate
            //an entity from the template (in otherwords, the user is not authorized to submit the form.  
            authorizationSuccessful &= groups.Count > 0;
        }
    }

    if(authorizationSuccessful)
    { 
        <div class="submission-form-block @Model.CssClass.Value">
            <form id="submissionForm_@suffix" method="post" action="@formPostUrl">
                <input data-val="true" data-val-required="The TemplateId field is required."
                       id="entityTemplateId_@suffix" name="entityTemplateId" type="hidden"
                       value="@entityTemplateId">
                <input data-val="true" data-val-required="The ColectionId field is required."
                       id="collectionId_@suffix" name="collectionId" type="hidden"
                       value="@collectionId">
                <input data-val="true" data-val-required="The Function field is required."
                       id="function" name="function" type="hidden"
                       value="@function">
                <input data-val="true" data-val-required="The Group field is required."
                       id="group" name="group" type="hidden"
                       value="@group">

                @if(groups != null)
                {
                    string groupLabelLabel = string.IsNullOrWhiteSpace(Model.GroupSelectorLabel.Value) ? "Group" : Model.GroupSelectorLabel.Value;

                    //Displaying a drop-down menu to select the group.
                    <div class="row field-row group-selector">
                        <div class="col-md-3 control field-label">@groupLabelLabel:<sup style="color:red">*</sup></div>
                        <div class="col-md-9 field-value">
                            <select name="groupId" data-val-required="Please identify the group." required>
                                <option value="">Please select </option>
                                @foreach (var gr in groups)
                                {
                                    <option value="@gr.Id">@gr.Name</option>
                                }
                            </select>
                        </div>
                    </div>
                }

                @*Render the editor for template for the root-data item of the template*@
                @Html.EditorFor(model => Item, Item.GetType().ToString())

                <div id="buttonLayer">
                    @foreach (var postAction in postActions)
                    {
                        string buttonName = @postAction.ButtonLabel + "_" + @suffix;

                        if (postAction.PopUps.Any())
                        {
                            foreach (var popup in postAction.PopUps)
                            {
                                <input id="@postAction.ButtonLabel" class="btn btn-success" name="@postAction.ButtonLabel" type="button" value="@postAction.ButtonLabel" data-toggle="modal" data-target="#submissionModal" />
                                <div id="submissionModal" class="modal fade" role="dialog">

                                    <div>
                                        <div class="modal-dialog">
                                            @*Modal content*@
                                            <div class="modal-content">
                                                <div class="modal-header">
                                                    <h5 class="modal-title" id="myModalLabel">@popup.Title</h5>
                                                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                                                </div>
                                                <div class="modal-body">
                                                    <div class="card-body">
                                                        <div class="form-group">
                                                            <h5>@popup.Message</h5>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="modal-footer">
                                                    @{
                                                        foreach (var button in popup.Buttons)
                                                        {
                                                            if (button.Text == "Cancel")
                                                            {
                                                                <button id="close-modal-button_@suffix" type="button" class="btn btn-primary" data-dismiss="modal">@button.Text</button>
                                                            }
                                                            else
                                                            {
                                                                <button id="@buttonName" type="submit" class="btn btn-success">@button.Text</button>
                                                            }
                                                        }
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <input id="@buttonName" class="btn btn-success" name="@postAction.ButtonLabel" type="submit" value="@postAction.ButtonLabel" />
                        }
                    }
                </div>
            </form>
            <div id="submission-result-message_@suffix"></div>
        </div>
    }
    else
    {
        <div class="alert alert-danger">Authorization failed.</div>
    }

    <script>
    var status;
    var buttonName;

    $(function () {
        $("#submission-result-message_@suffix").hide();

        $(document).on('click', "#Submit_@suffix", function () {
            status = 'Submitted';
            buttonName = 'Submit';
            console.log('Status = '+status)
        });
        $(document).on('click', "#Save_@suffix", function () {
            status = 'Saved';
            buttonName = 'Submit';
            console.log('Status = ' + status)
        });

        $("#submissionForm_@suffix").submit(function (event) {

            /* stop form from submitting normally */
            event.preventDefault();

            //Reguar expression for matching the variable name prefix up to the item's properties.
            var prefix = /^Blocks\[[0-9]+\]\.Item\.|^block.Item\./;

            var values = {};
            $.each($('#submissionForm_@suffix').serializeArray(), function (i, field) {
                name = field.name.replace(prefix, "");
                values[name] = field.value;
            });
            values["actionButton"] = buttonName;
            values["status"] = status;

            /* get the action attribute from the <form action=""> element */
            var $form = $(this),
                url = $form.attr('action');
            /* Send the data using post with element id name and name2*/
            var posting = $.post(url, values);
            var message = "";

            posting.done(function (data) {
                $("#submission-result-message_@suffix").empty();
                $('.modal-backdrop').remove();
                if (data.success) {
                    //  $(".submission-result-message").addClass("alert alert-success");
                    message = "@successMessage" != "" ? "@successMessage" : data.message;
                    $("#submission-result-message_@suffix").append("<div class='alert alert-success' ></div>");

                    $("#submissionForm_@suffix").hide();//[0].reset();
                }
                else {

                    $("#submission-result-message_@suffix").append("<div class='alert alert-danger' ></div>");
                    message = data.message;
                }



                $("#submission-result-message_@suffix div").text(message);
                $("#submission-result-message_@suffix").show();
            });


        });
    });
    </script>
}
