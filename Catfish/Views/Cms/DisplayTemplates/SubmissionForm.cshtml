@model Catfish.Models.Blocks.SubmissionForm
@*
    This view is used for rendering forms that are submitted to create new Items. Each
    item is created using the data-item template that is idenfified by is-root = true in
    the entity template.
    Note that this template should only be used for creating new items. It should NOT be
    used for updating existing items.
*@
@using Catfish.Core.Authorization.Requirements;
@using Microsoft.AspNetCore.Authorization;
@using Catfish.Core.Models;

@inject Microsoft.AspNetCore.Authorization.IAuthorizationService _authorizationService;
@inject Catfish.Services.IEntityTemplateService _entityTemplateService;
@inject Catfish.Core.Services.IWorkflowService _workflowService;
@inject Catfish.Services.IAppService _appService;
@inject Catfish.Helper.ICatfishAppConfiguration _catfishAppConfig;

@{
    bool useVueForms = _catfishAppConfig.GetValue("SiteConfig:UseVueForms", false);

    if (useVueForms)
    {
        //TODO: register appropriate javascript files to be used with VueJS based forms.
        _appService.RegisterScript("/assets/js/_public-facing/vue-submission-form.js");

    }
    else
    {
        //JQuery based javascript form need by CSHTML based standard implementation of HTML forms.
        _appService.RegisterScript("/assets/js/_public-facing/scripts/submission-form-functions.js");
        _appService.RegisterScript("/assets/js/_public-facing/scripts/attachment-functions.js");
        _appService.RegisterScript("/assets/js/vendor/jquery.validate.js");
    }



    string suffix = Guid.NewGuid().ToString();
    string formPostUrl = "/api/items/SubmitForm";
    var entityTemplateId = Guid.Parse(Model.SelectedItemTemplate);
    var collectionId = Guid.Parse(Model.SelectedCollection);
    string function = Model.WorkflowFunction;
    string group = Model.WorkflowGroup;
    var template = _entityTemplateService.GetTemplate(entityTemplateId);

    var Item = template.InstantiateRootItem();

    var postActions = _workflowService.GetPostActions(template, function, group);
    string successMessage = string.IsNullOrEmpty(Model.SubmissionConfirmation.Value) ? "" : Model.SubmissionConfirmation.Value.ToString();

}
@{
    bool authorizationSuccessful = (await _authorizationService.AuthorizeAsync(User, template,
        new List<IAuthorizationRequirement>() { TemplateOperations.Instantiate }))
       .Succeeded;

    List<Group> groups = null;
    if (authorizationSuccessful)
    {
        if (Model.LinkToGroup.Value)
        {
            //Select the list of groups where
            //  (a) the template is associated with, and
            //  (b) the user is holding a role that is authorized to "instantiate" the template
            groups = _workflowService.GetApplicableGroups(User, TemplateOperations.Instantiate, template, null);

            //If the user does not belong to any such groups above, the user is not authorized to instantiate
            //an entity from the template (in otherwords, the user is not authorized to submit the form.
            authorizationSuccessful &= groups.Count > 0;
        }
    }

    if (authorizationSuccessful)
    {
        <div class="submission-form-block @Model.CssClass.Value">
            <form id="submissionForm_@suffix" method="post" action="@formPostUrl" enctype="multipart/form-data">
                <input data-val="true" data-val-required="The TemplateId field is required."
                       id="entityTemplateId_@suffix" name="entityTemplateId" type="hidden"
                       value="@entityTemplateId">
                <input data-val="true" data-val-required="The CollectionId field is required."
                       id="collectionId_@suffix" name="collectionId" type="hidden"
                       value="@collectionId">
                <input data-val="true" data-val-required="The Function field is required."
                       id="function" name="function" type="hidden"
                       value="@function">
                <input data-val="true" data-val-required="The Group field is required."
                       id="group" name="group" type="hidden"
                       value="@group">

                @if (groups != null)
                {
                    string groupLabelLabel = string.IsNullOrWhiteSpace(Model.GroupSelectorLabel.Value) ? "Group" : Model.GroupSelectorLabel.Value;

                    //Displaying a drop-down menu to select the group.
                    <div class="row field-row group-selector">
                        <div class="col-md-3 control field-label">@groupLabelLabel:<sup style="color:red">*</sup></div>
                        <div class="col-md-9 field-value">
                            <select name="groupId" data-val-required="Please identify the group." required>
                                <option value="">Please select </option>
                                @foreach (var gr in groups)
                                {
                                    <option value="@gr.Id">@gr.Name</option>
                                }
                            </select>
                        </div>
                    </div>
                }

                @*Render the editor for template for the root-data item of the template*@
                @if (useVueForms)
                {
                    @Html.EditorFor(model => Item, "VueDataItem")
                }
                else
                {
                    @Html.EditorFor(model => Item, Item.GetType().ToString())
                }

                <div id="buttonLayer">
                    @foreach (var postAction in postActions)
                    {
                        string buttonName = @postAction.ButtonLabel + "_" + @suffix;

                        if (postAction.PopUps.Any())
                        {
                            foreach (var popup in postAction.PopUps)
                            {
                                <input id="@postAction.ButtonLabel" class="btn btn-success launch-modal" name="@postAction.ButtonLabel" type="button" value="@postAction.ButtonLabel" data-toggle="modal" data-target="#submissionModal" />
                                <div id="submissionModal" class="modal fade" role="dialog">

                                    <div>
                                        <div class="modal-dialog">
                                            @*Modal content*@
                                            <div class="modal-content">
                                                <div class="modal-header">
                                                    <h5 class="modal-title" id="myModalLabel">@popup.Title</h5>
                                                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                                                </div>
                                                <div class="modal-body">
                                                    <div class="card-body">
                                                        <div class="form-group">
                                                            <p>@popup.Body</p>
                                                            @{
                                                                if (popup.Message.Any())
                                                                {
                                                                    <p class="text-info"><small><strong>Note : </strong>@popup.Message</small></p>
                                                                }
                                                            }
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="modal-footer">
                                                    @{
                                                        foreach (var button in popup.Buttons)
                                                        {
                                                            if (button.Text == "Cancel")
                                                            {
                                                                <button id="close-modal-button_@suffix" type="button" class="btn btn-primary" data-dismiss="modal">@button.Text</button>
                                                            }
                                                            else
                                                            {
                                                                <button id="@buttonName" type="submit" class="btn btn-success" onclick="submitWorkflowForm('@suffix', '@successMessage');">@button.Text</button>
                                                            }
                                                        }
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <input id="@buttonName" class="btn btn-success" name="@postAction.ButtonLabel" type="submit" value="@postAction.ButtonLabel" onclick="submitWorkflowForm('@suffix', '@successMessage');" />
                        }
                    }
                </div>
            </form>
            <div id="submission-result-message_@suffix"></div>
        </div>
    }
    else
    {
        var errorMessage = string.IsNullOrWhiteSpace(Model.AuthorizationFailureMessage.Value) ? "Authorization failed." : Model.AuthorizationFailureMessage.Value;
        <div class="alert alert-danger">@Html.Raw(errorMessage)</div>
    }
}
