@model Catfish.Models.Blocks.SubmissionForm
@*
    This view is used for rendering forms that are submitted to create new Items. Each
    item is created using the data-item template that is idenfified by is-root = true in
    the entity template.
    Note that this template should only be used for creating new items. It should NOT be
    used for updating existing items.
*@
@using Catfish.Core.Authorization.Requirements;
@using Microsoft.AspNetCore.Authorization;
@inject Microsoft.AspNetCore.Authorization.IAuthorizationService _authorizationService;
@inject Catfish.Services.IEntityTemplateService _entityTemplateService;

@{
    string formPostUrl = "/api/items";
    var entityTemplateId = Guid.Parse(Model.EntityTemplateId);
    var collectionId = Guid.Parse(Model.CollectionId);
    var template = _entityTemplateService.GetTemplate(entityTemplateId);

    var Item = template.InstantiateRootItem();

}
@{
    if ((await _authorizationService.AuthorizeAsync(User, template
                   , new List<IAuthorizationRequirement>
   () { TemplateOperations.Instantiate }))
   .Succeeded)
    {
        <form id="submissionForm" method="post" action="@formPostUrl">
            <input data-val="true" data-val-required="The TemplateId field is required."
                   id="entityTemplateId" name="entityTemplateId" type="hidden"
                   value="@entityTemplateId">
            <input data-val="true" data-val-required="The ColectionId field is required."
                   id="collectionId" name="collectionId" type="hidden"
                   value="@collectionId">

            @*TODO: To display the name, description, and the list of fields of the
                form represented in the "Item" here. *@
            @Html.EditorFor(model => Item, Item.GetType().ToString())

            <input class="btn btn-primary" name="saveButton" type="submit" value="Save" onclick="submitForm('save'); return false;" />
            <input class="btn btn-success" name="actionButton" type="submit" value="Submit" onclick="submitForm('submit'); return false;" />
        </form>
    }
        <script>
    function submitForm(buttonName) {

            /* stop form from submitting normally */
            //event.preventDefault();

            //Reguar expression for matching the variable name prefix up to the item's properties.
            var prefix = /^Blocks\[[0-9]+\]\.Item\.|^block.Item\./;


            var values = {};
            $.each($('#submissionForm').serializeArray(), function (i, field) {
                name = field.name.replace(prefix, "");
                values[name] = field.value;
            });

        values["actionButton"] = buttonName;

            /* get the action attribute from the <form action=""> element */
            var $form = $(this),
                url = $form.attr('action');
            /* Send the data using post with element id name and name2*/
            var posting = $.post(url, values);

            /* Alerts the results */
            //posting.done(function (data) {
                //TODO: Check the content of the data to understand it.
                //Iterate throgh the list of results and add them as new elements to the search-result div

            //    //Clearing the existing search results, if any
            //    $("#freeSearchBlockResults").empty();
            //    if (data.length == 0) {
            //        $("#freeSearchBlockResults").append($.parseHTML("<div class='alert alert-warning'>No results found</div>"));
            //        return;
            //    }

            //    $.each(data, function (entryIndex, entry) {

            //        //@* Creating the wrapper div as a DOM element for the result item *@
                    //var entryWrapper = $.parseHTML("<div class='search-result-entry'>");

                    //@* Adding the wrapper to the result - list container *@
                    //$("#freeSearchBlockResults").append(entryWrapper);

                    //@*Building a link to the detailed object if there is a permalink associated with the entry*@
                    //var linkStart = "";
                    //var linkEnd = "";
                    //if (entry.permalink != undefined && entry.permalink.length > 0) {
                    //    linkStart = "<a href='" + entry.permalink + "'>";
                    //    linkEnd = "</a>";
                    //}

                    //@* Adding the entry title to the wrapper as a child. We need to this for each
                        value of the title because the title can take multiple values*@
                    //var entryTitleDiv = $.parseHTML("<div class='entry-title'>");
                    //$(entryWrapper).append(entryTitleDiv);
                    //$.each(entry.title, function (titleIndex, titleVal) {
                    //    var str = "<span><b>" + linkStart + titleVal + linkEnd + "</b></span>"
                    //    $(entryTitleDiv).append($.parseHTML(str));
                    //});

            //        //@*Go through each highlight snippet and add them to the entry-body section. We include each them
                        in separate divs*@
            //        var entryBodyDiv = $.parseHTML("<div class='entry-body'>");
            //        $(entryWrapper).append(entryBodyDiv);
            //        $.each(entry.highlights, function (highlightIndex, highlightVal) {
            //            var str = "<div>" + highlightVal + "</div>";
            //            $(entryBodyDiv).append($.parseHTML(str));
            //        });
            //    });
            //});

            //posting.fail(function () {
            //    alert('The search failed!');
            //});
    }
        </script>
    }
