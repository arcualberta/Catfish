@model Catfish.Models.Blocks.SubmissionForm
@*
    This view is used for rendering forms that are submitted to create new Items. Each
    item is created using the data-item template that is idenfified by is-root = true in
    the entity template.
    Note that this template should only be used for creating new items. It should NOT be
    used for updating existing items.
*@
@using Catfish.Core.Authorization.Requirements;
@using Microsoft.AspNetCore.Authorization;
@inject Microsoft.AspNetCore.Authorization.IAuthorizationService _authorizationService;
@inject Catfish.Services.IEntityTemplateService _entityTemplateService;

@{
    string suffix = Guid.NewGuid().ToString();
    string formPostUrl = "/api/items";
    var entityTemplateId = Guid.Parse(Model.SelectedItemTemplate); 
    var collectionId = Guid.Parse(Model.SelectedCollection);
    var template = _entityTemplateService.GetTemplate(entityTemplateId);

    var Item = template.InstantiateRootItem();

    string successMessage = string.IsNullOrEmpty(Model.SubmissionConfirmation.Value.ToString())? "" : Model.SubmissionConfirmation.Value.ToString();

}
@{
    if ((await _authorizationService.AuthorizeAsync(User, template
                   , new List<IAuthorizationRequirement>
   () { TemplateOperations.Instantiate }))
   .Succeeded)
    {
    <div class="submission-form-block @Model.CssClass.Value">
        <form id="submissionForm_@suffix" method="post" action="@formPostUrl">
            <input data-val="true" data-val-required="The TemplateId field is required."
                   id="entityTemplateId_@suffix" name="entityTemplateId" type="hidden"
                   value="@entityTemplateId">
            <input data-val="true" data-val-required="The ColectionId field is required."
                   id="collectionId_@suffix" name="collectionId" type="hidden"
                   value="@collectionId">

            @*TODO: To display the name, description, and the list of fields of the
            form represented in the "Item" here. *@
            @Html.EditorFor(model => Item, Item.GetType().ToString())
            <div id="buttonLayer">
               
                <input id="submitButton_@suffix" class="btn btn-success" name="submit" type="submit" value="Submit" />
            </div>
           
        </form>
        <div id="submission-result-message_@suffix"></div>
    </div>
    }

<script>

            var status;
            $(function () {
                $("#submission-result-message_@suffix").hide();

                $(document).on('click', "#submitButton_@suffix", function () {
                    status = 'Submitted';
                    console.log('Status = '+status)
                });
                $(document).on('click', "#saveButton_@suffix", function () {
                    status = 'Saved'
                    console.log('Status = ' + status)
                });
                $("#submissionForm_@suffix").submit(function (event) {

                    /* stop form from submitting normally */
                    event.preventDefault();

                    //Reguar expression for matching the variable name prefix up to the item's properties.
                    var prefix = /^Blocks\[[0-9]+\]\.Item\.|^block.Item\./;

                    var values = {};
                    $.each($('#submissionForm_@suffix').serializeArray(), function (i, field) {
                        name = field.name.replace(prefix, "");
                        values[name] = field.value;
                    });
                    values["actionButton"] = status;

                    /* get the action attribute from the <form action=""> element */
                    var $form = $(this),
                        url = $form.attr('action');
                    /* Send the data using post with element id name and name2*/
                    var posting = $.post(url, values);
                    var message = "";
                    posting.done(function (data) {
                        $("#submission-result-message_@suffix").empty();

                        if (data.success) {
                            //  $(".submission-result-message").addClass("alert alert-success");
                            message = "@successMessage" != "" ? "@successMessage" : data.message;
                            $("#submission-result-message_@suffix").append("<div class='alert alert-success' ></div>");

                            $("#submissionForm_@suffix").hide();//[0].reset();
                        }
                        else {

                            $("#submission-result-message_@suffix").append("<div class='alert alert-danger' ></div>");
                            message = data.message;
                        }



                        $("#submission-result-message_@suffix div").text(message);
                        $("#submission-result-message_@suffix").show();
                    });


        });
            });
</script>
    }
