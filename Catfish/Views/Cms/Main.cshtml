@model MainPage
@inject IApi Api;
@{
    
    ViewBag.Title = Model.Title;
    string ImageUrl()
    {
        if (Model.Map.PrimaryImage.HasValue)
        {
            return $"url({Url.Content(Model.Map.PrimaryImage)})";
        }
        return "";
    }
}

<head>
    <style>

        #parent {
            width: 800px; /*100%;*/
            /*background-image: url("landscape.jpg");*/
            height: 400px;
            overflow: hidden;
            border: 1px solid Red;
        }

        #workmap > area {
            border: 1px solid Green;
        }

        area:hover {
            border: 1px solid Green;
        }

        #canvas {
            position: relative;
            cursor: crosshair;
            z-index: 100;
            border: 1pc solid Green;
        }

        .covered {
            width: 100%;
            height: 400px;
            /*position:absolute;
        top:0px;
        left:0px;*/
            position: relative;
            z-index: 1;
        }

        #imgMap {
            position: relative;
            width: 100%;
            height: 400px; /* same height as parent container */
            z-index: -100;
            margin-top: -424px; /*position the image under the canvas */
        }
    </style>
    @*<script src="https://code.jquery.com/jquery-3.4.1.min.js"
            integrity="sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo="
            crossorigin="anonymous"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/maphilight/1.4.0/jquery.maphilight.min.js"></script>*@
</head>

<h1>Main Page</h1>
<div class="container container-fluid">
    <div id="parent">


        <canvas id="canvas" style="">
        </canvas>
        <img src="@ImageUrl()" usemap="#workmap" id="imgMap">

        <map id="workmap" name="workmap">
        </map>

    </div>
    <div class="row justify-content-center">
        <div class="col-sm-10 page-body">
            @Html.DisplayFor(m => m.Blocks)
        </div>
    </div>

</div>

<script>
    $("#canvas").click(function (e) {
        getPosition(e);
    });
    var polyPos = "";
    var count = 0;
    var previousX = 0, previousY = 0;
    //var curX=0, curY=0;
    var startX = 0, startY = 0;
    var pointSize = 3;
    var canvas = document.getElementById("canvas");
    var ctx = document.getElementById("canvas").getContext("2d");

    var topMap = new Image();
    topMap.src = "landscape.jpg";
    function resetCoords() {
        polyPos = "";
        count = 0;
        previousX = 0; previousY = 0;

        startX = 0; startY = 0;
    }

    fitToContainer(canvas);
    function drawMap() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.drawImage(topMap, 0, 0, 500, 400);
    }

    function init() {
        drawMap();
    }

    topMap.onload = function () {
        // init();
    }
    function fitToContainer(canvas) {
        // Make it visually fill the positioned parent
        canvas.style.width = '100%';
        canvas.style.height = '100%';
        // ...then set the internal size to match
        canvas.width = canvas.offsetWidth;
        canvas.height = canvas.offsetHeight;
    }

    // Event will be a click event which can be retrieved as first parameter in the addEventListener(function(event){}); or in jQuery with $("selector").click(function(event){});
    function getPosition(event) {
        var rect = canvas.getBoundingClientRect();
        var x = event.clientX - rect.left; // x == the location of the click in the document - the location (relative to the left) of the canvas in the document
        var y = event.clientY - rect.top; // y == the location of the click in the document - the location (relative to the top) of the canvas in the document
        count++;
        // This method will handle the coordinates and will draw them in the canvas.
        // drawCoordinates(x,y);
        if (count > 1) {
            if (dist(startX, startY, x, y) < 20) {
                alert("done");
                previousX = curX;
                previousY = curY;
                curX = x;
                curY = y;
                drawLine(ctx);
                alert(polyPos);
                //add the hot spot to the image map
                addHotSpot("workmap");
                //reset all the coords
                resetCoords();

                return;
            }
        }

        if (polyPos.length > 0) {
            polyPos += ",";
        }

        polyPos += x + "," + y;

        if (count > 1) {

            //update previous coords
            previousX = curX;
            previousY = curY;
            curX = x;
            curY = y;
            drawLine(ctx);
            alert(polyPos);
        }
        else {
            previousX = x;
            previousY = y;
            curX = x, curY = y;
            if (count == 1) {
                startX = x;
                startY = y;
            }
        }
        drawCoordinates(x, y);

    }
    function drawLine(ctx) {

        ctx.beginPath();
        // Staring point (10,45)
        ctx.moveTo(previousX, previousY);
        // End point (180,47)
        ctx.lineTo(curX, curY);
        // Make the line visible
        ctx.stroke();
    }

    function drawCoordinates(x, y) {
        var pointSize = 3; // Change according to the size of the point.
        //  var ctx = document.getElementById("canvas").getContext("2d");


        ctx.fillStyle = "#ff2626"; // Red color

        ctx.beginPath(); //Start path
        ctx.arc(x, y, pointSize, 0, Math.PI * 2, true); // Draw a point using the arc function of the canvas with a point structure.
        ctx.fill(); // Close the path and fill.

    }
    function dist(x0, y0, x1, y1) {
        return Math.sqrt(Math.pow(x1 - x0, 2) + Math.pow(y1 - y0, 2));
    }

    function addHotSpot(mapId) {
        var hotSpot = `<area shape="poly" coords="` + polyPos + `" href="http://ualberta.ca">`;
        //var hotSpot=`<area shape="circle" coords="` + pos3 +`,` + pos4 + `,50" href="http://ualberta.ca">`;
        alert(hotSpot);
        $("#" + mapId).append(hotSpot);
    }
</script>

