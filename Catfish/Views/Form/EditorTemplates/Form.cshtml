@model Catfish.Core.Models.Item
@using Catfish.Core.Models;
@using Catfish.Models.Regions;

@{
    var culture = Catfish.Helpers.ViewHelper.GetActiveLanguage(Session);

    Form formRegion = ViewBag.FormRegion as Form;

    var cssId = formRegion.CssId != null ? formRegion.CssId : "DefaultFormId";
    var cssClasses = formRegion.CssClasses;
}

<style type="text/css" scoped>
    @formRegion.CssStyles
</style>

<div class="bs">
    <div id="@cssId" class="@cssClasses">
        @if (!string.IsNullOrEmpty(formRegion.Title))
        {
            <div class="title">@formRegion.Title</div>
        }
        @if (!string.IsNullOrEmpty(formRegion.Description))
        {
            <div class="desc">@Html.Raw(formRegion.Description)</div>
        }

   </div>

    @{
        @Html.HiddenFor(m => m.EntityTypeId);
        @Html.Hidden("ModelType", Model.GetType().AssemblyQualifiedName, new Dictionary<string, object>()
        {
            {"class", "model-type"}
        })

        List<string> pages = formRegion.Pages.Split(new char[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries).ToList();

        for (int i = 0; i < Model.MetadataSets.Count; ++i)
        {
            if (pages.Contains(Model.MetadataSets[i].Name))
            {
                @Html.HiddenFor(m => Model.MetadataSets[i].Ref)
                for (int f = 0; f < Model.MetadataSets[i].Fields.Count; ++f)
                {
                        @Html.EditorFor(m => Model.MetadataSets[i].Fields[f], new { ActiveLanguage = culture.TwoLetterISOLanguageName })
                    }
                }
            }
        }
</div>