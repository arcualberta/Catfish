@model Catfish.Core.Models.Contents.Text

@{ 

    Guid templateId = Guid.Parse(ViewData["data-template-id"].ToString());

    Guid dataItemId = ViewData.Keys.Contains("data-dataItem-id") && ViewData["data-dataItem-id"] != null
        ? Guid.Parse(ViewData["data-dataItem-id"].ToString())
        : Guid.Empty;

    Guid metadataSetId = ViewData.Keys.Contains("metadata-set-id") && ViewData["metadata-set-id"] != null
        ? Guid.Parse(ViewData["metadata-set-id"].ToString())
        : Guid.Empty;


    Guid fieldId = ViewData.Keys.Contains("data-field-id") && ViewData["data-field-id"] != null
        ? Guid.Parse(ViewData["data-field-id"].ToString())
        : Guid.Empty;

    string fieldType = ViewData.Keys.Contains("field-type") && ViewData["field-type"] != null
        ? ViewData["field-type"].ToString()
        : string.Empty;




}
<div id="@Model.Id" class="inline-editor">

    <i class="far fa-edit float-right" onclick="enableInlineEditing('@Model.Id');" id="btnEdit_@Model.Id"></i>
    <i class="far fa-window-close float-right" style="display:none" onclick="cancelInlineEditing('@Model.Id');" id="btnCancel_@Model.Id"></i>
    <i class="far fa-save float-right" style="display:none" onclick="saveEditedText('@templateId','@dataItemId','@fieldId','@Model.Id', '@metadataSetId','@fieldType');" id="btnSave_@Model.Id"></i>
    <span class="text-view">@Html.Raw(Model.Value)</span>
    <input type="hidden" id="hidden_original_text_@Model.Id" />
    

</div>
