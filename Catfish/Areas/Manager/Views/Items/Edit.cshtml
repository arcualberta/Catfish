@model Catfish.Core.Models.Item
@using Catfish.Areas.Manager.Models.ViewModels;
@using Catfish.Core.Models.Forms;

@{  ViewBag.Title = Model.Id > 0 ? "Edit Item" : "Create Item"; }

@section HEAD
{
    <script type="text/javascript" src="~/Scripts/knockout-3.1.0.js"></script>
    <script type="text/javascript" src="~/Scripts/knockout.mapping-latest.js"></script>
    <script type="text/javascript" src="~/Scripts/perpetuum.knockout.js"></script>
    @*<script type="text/javascript" src="~/Scripts/fileupload.js"></script>*@
    <script type="text/javascript" src="~/Scripts/attachment.js"></script>
    <link rel="stylesheet" type="text/css" href="~/Content/Css/catfish.css">

    <script type="text/javascript">
        var uploadApiUrl = "@Url.Action("upload", "items", new { id = Model.Id })";
        var deleteApiUrl = "@Url.Action("deleteFile", "items", new { id = Model.Id })";
    </script>
}

@section Toolbar {
    @if (ViewBag.SelectEntityViewModel != null)
    {
        @Html.Partial("Partial/koEditToolbar")
    }
    else
    {

        @Html.Partial("Partial/EditToolbar", Model, new ViewDataDictionary() { { "entityTypeId", Model.EntityTypeId } })
    }
}


@if (ViewBag.SelectEntityViewModel != null)
{
    <div class="grid_12 bs">
        <div class="box">

            @Html.Partial("Partial/SelectEntityType", ViewBag.SelectEntityViewModel as SelectEntityTypeViewModel, new ViewDataDictionary() { { "controller", "items" } })
        </div>
    </div>

}
else
{
    using (Html.BeginForm("Edit", "Items", FormMethod.Post))
    {
        <div class="grid_12 bs">
            <div class="box">
                <div class="title">
                    Metadata
                </div>
                @Html.Partial("Partial/EditEntity")
            </div>
        </div>

        if (Model.FormSubmissions.Count() > 0)
        {
            <div class="grid_12 bs">
                <div class="box">
                    <div class="title">
                        Form Submissions
                    </div>
                    <div class="form-view">
                        @Html.DisplayFor(m => m.FormSubmissions, new { Item = Model })
                    </div>
                </div>
            </div>
        }

        <div class="grid_12 bs">
            <div class="box">
                <div class="title">
                    Files
                </div>
                <div class="form-view">
                    @{ 
                        List<string> crossLinkedFileGuidSets = Model.FormSubmissions
                            .SelectMany(form => form.FormData.Fields.Where(field => field is Attachment))
                            .Select(field => (field as Attachment).FileGuids).ToList();
                        var crossLinkedFileGuids = crossLinkedFileGuidSets.SelectMany(set => set.Split(new char[] { Attachment.FileGuidSeparator }, StringSplitOptions.RemoveEmptyEntries)).ToList();
                    }  
                    @Html.EditorFor(m => m.AttachmentField,
                   new {
                       UploadApiUrl = @Url.Action("upload", "items"),
                       DeleteApiUrl = @Url.Action("deleteCashedFile", "items"),
                       Files = Model.Files.ToList(),
                       CrossLinkedFileGuids = crossLinkedFileGuids,
                       ParentId = Model.Id,
                       Controller = "items"
                   })
                </div>
            </div>
        </div>

    }

    @*<div class="grid_12 bs">
        <div class="box">
            <div class="title">
                Files
            </div>
            <div class="inner">
                @if (Model.Id == 0)
                {
                    <div class="alert alert-info">Please save this item first in order to enable file uploading.</div>
                }
                else
                {
                    if (Model.Files.Count() == 0)
                    {
                        <p>No files exist</p>
                    }
                }

                <div id="thumbnailPanel" class="thumbnailPanel">
                    @foreach (var file in Model.Files)
                    {
                        FileViewModel vm = new FileViewModel(file, Model.Id, Request.RequestContext);
                        var eleId = @vm.Guid.Substring(0, @vm.Guid.Length - 4);
                        <div class="fileThumbnail" id="@eleId">
                            <img src="@vm.Thumbnail" alt="@vm.FileName" /> 
                            <button class="glyphicon glyphicon-remove" onclick="del('@vm.Guid');"></button>
                            <div class="label"><a href="@vm.Url" target="_blank">@vm.FileName</a></div>
                        </div>
                    }                                                                       
                </div>
                <div class="inner" style="clear:both">
                    @if (Model.Id > 0)
                    {
                        <div id="uploadErrorMessage" class="alert alert-danger"></div>
                        <input type='file' id='uploadField' class="uploadField" name="files" multiple="multiple" />
                        <input type="button" value="Upload" id="uploadButton" class="uploadButton" onclick="upload(); return false;" />
                        <div id="progressBar"><progress></progress></div>
                    }
                </div>
            </div>

        </div>
    </div>*@

}

