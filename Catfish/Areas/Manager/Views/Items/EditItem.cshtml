@model Catfish.Core.Models.Item
@using Catfish.Core.Models;


@{  ViewBag.Title = Model.Id > 0 ? "Edit Item" : "Create Item"; }

@section HEAD
{
    <link rel="stylesheet" type="text/css" href="~/Content/Css/catfish.css">
    <script src="/node_modules/requirejs/require.js"></script>
    <script type="text/javascript" src="/built/require-config.js"></script>
    <script>
            require(["/Built/Forms/ItemForm.js"])
    </script>
    

}

@section Toolbar {
    @Html.Partial("Partial/EditToolbar")
}

<script>
    var fileList = @Html.Raw(ViewBag.FileList)   
    var otherPngUrl = "@Html.Raw(ViewBag.OtherPngUrl)"
    var uploadAction = "@Html.Raw(ViewBag.UploadAction)"
</script>


@{ Html.BeginForm(); }
@Html.HiddenFor(m => m.Id)
@Html.AntiForgeryToken()
@Html.ValidationSummary(true)
@Html.Hidden("ModelType", Model.GetType().AssemblyQualifiedName, new Dictionary<string, object>()
{
    {"class", "model-type"}
})


<div class="grid_12">
    <div class="container container-custom">
                @Html.EditorFor(m => m)
        <br />

        <div class="custom-files">
            <div id="drop-zone">
                <div class="drop-zone-label">Drop files here</div>
            </div>

            <div data-bind="foreach: files">

                <div class="file-row">
                    <input class="model-type" data-bind="attr:{id: 'Files_' + $index() + '__ModelType' , name: 'Files[' + $index() + '].ModelType'  }" type="hidden" value="Catfish.Core.Models.DataFile, Catfish.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null">

                    <input data-val="true" data-val-number="The field Id must be a number." data-val-required="The Id field is required." data-bind="value: id, attr:{id: 'Files_' + $index() + '__Id' , name: 'Files[' + $index() + '].Id'  }" type="hidden" value="0">
                    <input data-bind="value: guid, attr:{id: 'Files_' + $index() + '__GuidName' , name: 'Files[' + $index() + '].Guid'  }" type="hidden" value="">
                    <input data-bind="value: fileName, attr:{id: 'Files_' + $index() + '__FileName' , name: 'Files[' + $index() + '].FileName'  }" type="hidden" value="">

                    <div class="file-thumbnail-container">
                        <img class="file-thumbnail" data-bind="attr:{src: thumbnail}" />
                    </div>
                    <div class="file-info-container">
                        <a data-bind="attr: {href: url}">
                            <span class="file-name" data-bind="text: fileName"></span>
                        </a>
                        <div class="progress-bar-container" data-bind="if: !preloaded(), css: {'file-error': status() == 'ERROR'}">
                            <div class="progress-bar" data-bind="style: {width: progress}, text: status() == 'ERROR' ? 'Error' : progress, css:{'file-ok': progress() == '100%', 'file-error': status() == 'ERROR'}"></div>
                        </div>
                    </div>
                    <a href="#" class="file-remove" data-bind="click: $parent.removeFile">x</a>
                </div>

            </div>

            <!--
            <ul id="file-list" data-bind="foreach: files">
                <li>
                    <img data-bind="attr:{src: thumbnail}" />
                    <span data-bind="text: fileName"></span>
                    <span data-bind="text: status"></span>
                    <div class="progress-bar-container">
                        <div class="progress-bar" data-bind="style: {width: progress}, text: progress"></div>
                    </div>
                    <a href="#" data-bind="click: $parent.removeFile">X</a>
                </li>
            </ul>
            -->
        </div>



    </div>
    <!--
    <input type="file" multiple data-bind="fileInput: multiFileData">

    <div data-bind="text: multiFileData().fileArray().length"></div>
    <div data-bind="text: multiFileData().dataURLArray().length"></div>


    <div data-bind="foreach: multiFileData().fileArray">
        <span data-bind="text: name"></span>
    </div>
    -->
    <!--
    <input type="file" multiple data-bind="fileInput: multiFileData">
    -->
    </div>
    @{ Html.EndForm(); }

    <!--
    <div class="container">

        <ul class="tabs">
            <li class="tab-link current" data-tab="tab-1">Tab One</li>
            <li class="tab-link" data-tab="tab-2">Tab Two</li>
            <li class="tab-link" data-tab="tab-3">Tab Three</li>
            <li class="tab-link" data-tab="tab-4">Tab Four</li>
        </ul>

        <div id="tab-1" class="tab-content current">
            Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
        </div>
        <div id="tab-2" class="tab-content">
            Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
        </div>
        <div id="tab-3" class="tab-content">
            Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.
        </div>
        <div id="tab-4" class="tab-content">
            Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
        </div>

    </div>
    -->
    <!-- container -->
