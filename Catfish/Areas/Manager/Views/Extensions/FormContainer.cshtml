@model Catfish.Models.Regions.FormContainer

@using Catfish.Models.Regions

<style>
    .table-header {
        background-color: #dcddde;
        width: 45%;
        padding: 5px !important;
    }
</style>
<ul class="form">
    <li>
        @Html.LabelFor(m => m.FormId)

        <div class="input">@Html.DropDownListFor(m => m.FormId, Model.Forms, "--- Please Select ---", new { @onchange = "UpdateFieldsMapping();" })</div>
        @Html.ValidationMessageFor(m => m.FormId)
    </li>
    <li>
        @Html.LabelFor(m => m.EntityTypeId)
        <div class="input">@Html.DropDownListFor(m => m.EntityTypeId, Model.EntityTypes, "--- Please Select ---", new { @onchange = "UpdateAttributesMapping();" })</div>
        @Html.ValidationMessageFor(m => m.EntityTypeId)
    </li>
    <li>
        @Html.LabelFor(m => m.CollectionId)
        <div class="input">@Html.DropDownListFor(m => m.CollectionId, Model.Collections)</div>
        @Html.ValidationMessageFor(m => m.CollectionId)
    </li>
    <li>
        @Html.LabelFor(m => m.EnableReferenceCodes)
        <div class="input">@Html.EditorFor(m => m.EnableReferenceCodes)</div>
        @Html.ValidationMessageFor(m => m.EnableReferenceCodes)
    </li>
    <li>
        @Html.LabelFor(m => m.EnforceLists)
        <div class="input">@Html.EditorFor(m => m.EnforceLists)</div>
        @Html.ValidationMessageFor(m => m.EnforceLists)
    </li>
    <li>
        @Html.LabelFor(m => m.ShuffleBlocks)
        <div class="input">@Html.EditorFor(m => m.ShuffleBlocks)</div>
        @Html.ValidationMessageFor(m => m.ShuffleBlocks)
    </li>
    <li>
        @Html.LabelFor(m => m.ShuffleQuestions)
        <div class="input">@Html.EditorFor(m => m.ShuffleQuestions)</div>
        @Html.ValidationMessageFor(m => m.ShuffleQuestions)
    </li>
    <li>
        @Html.LabelFor(m => m.QuestionStepOption)
        <div class="input">@Html.EnumDropDownListFor(model => model.QuestionStepOption)</div>
        @Html.ValidationMessageFor(m => m.QuestionStepOption)
    </li>
    <li>
        @Html.LabelFor(m => m.QuestionPartsStepOption)
        <div class="input">@Html.EnumDropDownListFor(model => model.QuestionPartsStepOption)</div>
        @Html.ValidationMessageFor(m => m.QuestionPartsStepOption)
    </li>
    <li>
        @Html.LabelFor(m => m.MaxPixelLength)
        <div class="input">@Html.EditorFor(model => model.MaxPixelLength)</div>
        @Html.ValidationMessageFor(m => m.MaxPixelLength)
    </li>
    <li>
        @Html.LabelFor(m => m.AttachItemToUser)
        <div class="input">@Html.CheckBoxFor(model => model.AttachItemToUser)</div>
        @Html.ValidationMessageFor(m => m.AttachItemToUser)
    </li>
    @Html.Partial("_CatfishRegion", Model)

    <li>
        Field Mappings
        <table class="input table table-striped table-responsive bs" style="width:84.5% !important;" id="mappingTable">
            <tr><th class="table-header">Attributes</th><th class="table-header">Fields</th><th class="table-header">&nbsp;</th></tr>
            @{ int i = 0;
                foreach (var fm in Model.FieldMappings)
                {
                    string rowId = "row_" + i;
                    <tr id="@rowId">
                        @*using struct FieldMapping*@
                        <input type="hidden" name="@(Html.NameFor(m => m.FieldMappings)).Index" value="@(i)" />
                        @Html.HiddenFor(m => m.FieldMappings[i].AttributeName)
                        @Html.HiddenFor(m => m.FieldMappings[i].FieldName)
                        <td>@fm.AttributeName</td>
                        <td>@fm.FieldName</td>
                        <td><span class="glyphicon glyphicon-minus-sign" onclick="DeleteRow('@rowId');"></span></td>
                    </tr>
                    i++;
                }
            }
            <tr id="addMapping"><td>&nbsp;</td></tr>
            <tr style="background-color:#ebecec;">
                <input type="hidden" class="hdregion" value="@Html.IdFor(m => m)" />
                <td>@Html.DropDownList("SelectedAttribute", Model.AttributesFields, new { @style = "padding: 2px 2px; width:auto;", @class = "btn btn-default" })</td>
                <td>@Html.DropDownList("SelectedField", Model.FormFields, new { @style = "padding: 2px 2px; width:auto;", @class = "btn btn-default" })</td>

                <td>
                    <span class="glyphicon glyphicon-plus-sign" style=" padding:5px;" onclick="AddMapping()"></span>
                </td>
            </tr>
        </table>


    </li>
</ul>
<script>
    function AddMapping()
    {
        var uniqueId = Math.random().toString(36).substring(2) + (new Date()).getTime().toString(36);
        var regionName = $(".hdregion").val(); // Region_0

        var selectedAttribute = $("#" + regionName +"_SelectedAttribute option:selected").text();
        var selectedField = $("#" + regionName + "_SelectedField option:selected").text();

        var regionInd = regionName.split("_")[1];//0,1,etc

        var rowCount = $('#mappingTable tr').length;
        var rowId = "row_" + (rowCount - 3);

        var t = `<tr id="` + rowId +`"><input type="hidden"  name="Regions[`+regionInd +`].Body.FieldMappings.Index" value="` + uniqueId + `">
                    <input name="Regions[`+regionInd+`].Body.FieldMappings[` + uniqueId +  `].AttributeName" type="hidden" value="` + selectedAttribute + `">
                    <input name="Regions[`+regionInd+`].Body.FieldMappings[` + uniqueId +  `].FieldName" type="hidden" value="` + selectedField + `">
                    <td>` + selectedAttribute + `</td>
                    <td>` + selectedField + `</td><td><span class="glyphicon glyphicon-minus-sign" onclick="DeleteRow('` + rowId +`')";></span></td>
                </tr>`;

        $("#addMapping").before(t)
   }

    function DeleteRow(index)
    {
        $("#" + index).remove();
    }


    function UpdateFieldsMapping()
    {

        var url ='@Url.Action("UpdateFieldsMapping", "FormContainer")';


        var regionName = $(".hdregion").val(); // Region_0
        var formId = regionName + "_FormId";
        var formIdValue = $("#" + formId + " option:selected").val();

        $.ajax({
            type: "GET",
            url:url,
            dataType:'json',
            data: {"formId" : formIdValue},
            success: function(result) {
                    var selectedField = regionName + "_SelectedField";
                    var $el = $("#" + selectedField);
                        $el.empty(); // remove old options
                    $.each(result, function(key, value) {
                            $el.append($("<option></option>")
                            .attr("value", value.Value).text(value.Text));
                    });

                },
            error: function(error) {
                    alert("Error");
                }
            });
    }

    function UpdateAttributesMapping()
    {
          var url ='@Url.Action("UpdateAttributesMapping", "FormContainer")';


        var regionName = $(".hdregion").val(); // Region_0
        var entityTypeId = regionName + "_EntityTypeId";
        var entityTypeIdValue = $("#" + entityTypeId + " option:selected").val();

         $.ajax({
            method: "GET",
            url: url,
            dataType:'json',
            data: {"entityTypeId" : entityTypeIdValue},
            success: function (result) {
                    var selectedAttribute = regionName + "_SelectedAttribute";
                    var $el = $("#" + selectedAttribute);
                        $el.empty(); // remove old options
                    $.each(result, function(key, value) {
                            $el.append($("<option></option>")
                            .attr("value", value.Value).text(value.Text));
                    });
                },
            error: function (error) {
                    alert("Error");
                }
            });
    }
</script>


