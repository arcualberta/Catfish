@model Catfish.Areas.Manager.Models.ViewModels.EntityTypeViewModel
@using PerpetuumSoft.Knockout
@using Catfish.Areas.Manager.Models.ViewModels
@using Catfish.Core.Models

@{  ViewBag.Title = Model.Id > 0 ? "Edit Entity Type" : "Create Entity Type"; }

@section HEAD
{
    <script type="text/javascript" src="~/Scripts/knockout-3.1.0.js"></script>
    <script type="text/javascript" src="~/Scripts/knockout.mapping-latest.js"></script>
    <script type="text/javascript" src="~/Scripts/perpetuum.knockout.js"></script>
    <style>
        .chkBox-label {
            background: #ececec;
            width: 100px;
            height: 25px;
            padding-top: 5px;
        }

        .mapLabel {
            height: 25px;
            position: relative;
            border: 2px solid #cdcdcd !important;
            border-color: rgba(0,0,0,.14) !important;
            background-color: AliceBlue !important;
        }
        .alert {
            padding: .75rem 1.25rem;
            margin-bottom: 1rem;
            border: 1px solid transparent;
            border-radius: .25rem;
        }

        .alert-warning {
            background-color: #fcf8e3;
            border-color: #faf2cc;
            color: #8a6d3b;
        }
        .error {
            float: right;
            color: #a94442;
            margin-right: 0 !important;
        }
        .width99{
            width:99% !important;
        }
        .width98 {
            width: 98% !important;
        }
    </style>
}

@section Toolbar {
    @Html.Partial("Partial/koEditToolbar", Model, new ViewDataDictionary() { { "saveButtonFunctionCall", "saveEntityType(event)" } })
}

@{
    var context = "ctx_" + Guid.NewGuid().ToString("N");
    var ko = Html.CreateKnockoutContext(context);
}

@if (Model.redirect)
{
    <script type="text/javascript">window.location = "@Model.url";</script>
}

<div id="@context">
        @*@using (ko.Html.Form("Edit", "EntityTypes", null, new { id = context + "Form" }))*@
        @using(Html.BeginForm("Edit", "EntityTypes", new { id = Model.Id }, FormMethod.Post))
        {
          <div class="grid_12">
                <div class="box">
                    <div class="title">
                        Basic Information
                        <div class="bs right">
                            @*<span @ko.Bind.Visible(m => m.Status == KoBaseViewModel.eStatus.Success) style="display: none;" class="alert alert-success">Success!</span>
                            <span @ko.Bind.Visible(m => m.Status == KoBaseViewModel.eStatus.Error) style="display: none;" class="alert alert-danger">Error!</span>
                            @ko.Html.Button("Save", "Save", "EntityTypes", null, new { @id = "btnSave" }).Enable(m=>m.ErrorMessage != "*" && m.AssociatedMetadataSets.Count > 1)*@
                        </div>
                    </div>
                    <div class="inner">
                        <ul class="form form-custom">
                            <li>
                                <label class="control-label col-md-2">Name</label>
                                <div class="input">@ko.Html.TextBox(m => m.Name, new { @id = "Name",@class="width99" })
                                    @ko.Html.Span(m => m.ErrorMessage, new { @class = "error" }).Visible(m => m.ErrorMessage != "")
                                </div>
                            </li>
                            <li>
                                <label class="control-label col-md-2">Description</label>
                                <div class="input">@ko.Html.TextArea(m => m.Description, new { @id = "Description" })</div>
                            </li>
                            <li>
                                <label class="control-label col-md-2 chkBox-label" style="margin-top:0px;">Applicability</label>
                                <div style="background:#fff;">
                                    <span class="checkbox checkbox-inline" style="margin:20px">
                                        @ko.Html.CheckBox(m => m.TargetType[1], new { @id = "chk_" + CFEntityType.eTarget.Collections })
                                        @System.Enum.GetName(typeof(CFEntityType.eTarget), (CFEntityType.eTarget)1)
                                    </span>

                                    <span class="checkbox checkbox-inline">
                                        @ko.Html.CheckBox(m => m.TargetType[2], new { @id = "chk_" + CFEntityType.eTarget.Items })
                                        @System.Enum.GetName(typeof(CFEntityType.eTarget), (CFEntityType.eTarget)2)
                                    </span>

                                    <span class="checkbox checkbox-inline">
                                        @ko.Html.CheckBox(m => m.TargetType[3], new { @id = "chk_" + CFEntityType.eTarget.Files })
                                        @System.Enum.GetName(typeof(CFEntityType.eTarget), (CFEntityType.eTarget)3)
                                    </span>
                                    <span class="checkbox checkbox-inline">
                                        @ko.Html.CheckBox(m => m.TargetType[4], new { @id = "chk_" + CFEntityType.eTarget.Forms })
                                        @System.Enum.GetName(typeof(CFEntityType.eTarget), (CFEntityType.eTarget)4)
                                    </span>
                                </div>
                            </li>

                        </ul>
                    </div>
                </div>
              
              @using (ko.If(m => m.AvailableMetadataSets.Count <= 1))
              {
                  <div class="alert alert-warning">A Metadata Set must be created before creating an Entity Type.</div>
                 
              }
             @using (ko.If(m => m.AvailableMetadataSets.Count > 1))
             {
                <div id="fields-container">
                    <div class="box">
                        <div class="title">
                            Metadata Sets
                            <div class="right">
                                @ko.Html.DropDownList(m => m.AvailableMetadataSets, new { @id = "dd_MetadataSets" }, m => m.Name).Value(m => m.SelectedMetadataSets)
                                @ko.Html.Button("Add Metadata Set", "AddMetadataSet", "EntityTypes", new { }, new { @id = "btnAddMetadataSet" }).Enable(m => m.SelectedMetadataSets != null && m.SelectedMetadataSets.Name != null)
                            </div>
                        </div>
                        @using (var ms = ko.Foreach(m => m.AssociatedMetadataSets))
                        {
                            using (ms.If(m=>m.Id > 0)) { 
                                  <div class="bs">
                                      <div class="right slip-button-panel">
                                           @ko.Html.Button("", "Move", "EntityTypes", new { idx = @ms.GetIndex(), step = -1 }, new { @class = "glyphicon  glyphicon-arrow-up" })
                                           @ko.Html.Button("", "Move", "EntityTypes", new { idx = @ms.GetIndex(), step = 1 }, new { @class = "glyphicon  glyphicon-arrow-down" })
                                           @ko.Html.Button("", "RemoveMetadataSet", "EntityTypes", new { idx = @ms.GetIndex() }, new { @class = "glyphicon glyphicon-remove" })
                                      </div>
                                  </div>
                                  <div class="inner">
                                           @ms.Html.Span(m => m.Name)
                                  </div>
                            }
                        }
                    </div>
                </div>
              }

              @*show the attribute mapping apnel when associated metadataset is not empty -- > 1, because the 1st was empty, added there to force user to choose*@
              @using (ko.If(m=>m.AssociatedMetadataSets.Count > 0)) {
                <div id="fieldmappings-container">
                    <div class="box">
                        <div class="title">
                            Field Mappings
                            <span style="float:right;color:#a94442; margin-bottom:30px;">*Required</span>
                        </div>
                        @using (var map = ko.Foreach(m => m.AttributeMappings))
                        {
                            <div class="inner bs fieldElement">
                                <div class="box">
                                    <div class="title">
                                        @using (map.If(m => m.Deletable))
                                        {
                                            @map.Html.TextBox(m => m.Name).Attr("placeholder", m => m.Name)
                                            @map.Html.Span(m => m.ErrorMessage, new { @style = "color: red; " }).Visible(m => m.Name.Length <= 0)

                                        }
                                                        @using (map.If(m => !m.Deletable))
                                        {
                                                            @map.Html.Span(m => m.Name)
                                        }


                                        <div style="float: right">
                                            @using (map.If(m => m.Deletable))
                                            {
                                                            @ko.Html.Button("", "RemoveAttributeMapping", "EntityTypes", new { idx = @map.GetIndex() }, new { @class = "glyphicon glyphicon-remove" })
                                            }
                                        </div>
                                    </div>
                                    <div class="bs">
                                        <div class="inner">
                                            <ul class="form form-custom">
                                                <li>
                                                    <label class="control-label col-md-2">Metadata Set</label>
                                                    <div class="input">   
                                                        @ko.Html.DropDownList(m => m.AssociatedMetadataSets, new { @class = "mapMetadata, width98" }, "Name", "Id").Value(m => map.Model.MetadataSetFieldId)
                                                        @map.Html.Span(m => m.ErrorMessage, new { @class = "error" })


                                                    </div>
                                                </li>
                                                <li>
                                                    <label class="control-label col-md-2">Field</label>
                                                    <div class="input">
                                                        @*map.Html.DropDownList(m=>ko.Model.MetadataSetFields[m.MetadataSetFieldId.ToString()], null, m => m).Value(m=>m.Field)*@
                                                        <select class="mapField, width98" data-bind="options : $parent.MetadataSetFields[$data.MetadataSetFieldId()],optionsText : function(item) { return item; },value : $data.Field"></select>
                                                        @map.Html.Span(m => m.ErrorMessage, new { @class = "error" })


                                                    </div>
                                                </li>
                                                <li>
                                                    <label class="control-label col-md-2">Label</label>
                                                    <div class="input">
                                                       @map.Html.TextBox(m => m.Label, new { @class = "mapLabel" }).Attr("placeholder", m => "Label text...")

                                                     </div>
                                                   
                                                 </li>
                                                   
                                               </ul>
                                                   
                                            </div>
                                                   
                                       </div>
                                                   
                                    </div>
                                                   
                                                                               </div>
                        }
                        <div class="bs right slip-button-panel" style="border: none; padding-right:20px;padding-bottom:20px;">
                            @ko.Html.Button("", "AddAttributeMapping", "EntityTypes", new { @id = "btnAddAttributeMapping" }, new { @class = "glyphicon glyphicon-plus" })
                        </div>
                       </div> @*box*@
                    </div>@*container*@
              }
                        <!-- end of Melania test -->
          </div>
        }
  </div>

@ko.Apply(Model, context)

<script>

    $(function(){
        @(context).Name.subscribe(function(newValue){
            if(newValue != null)
                @(context).ErrorMessage(newValue.length > 0 ? "" : "*");
        });
    });

    function saveEntityType(e) {
        var data = {
            vm: @(context)
        };
        data = ko.toJS(data); // This is done to remove all observable objects.

        if(data.vm.AttributeMappings[0].MetadataSetFieldId <= 0)
        {
            e.preventDefault();
            SysMsg("Attribute Mapping", "Name mapping is mandatory");
            return false;
        }

        data.vm.SelectedMetadataSets = null; // This is to avoid binding errors when reloading the page.
        //remove unmapped attribute mapping
        var emptyAttributeMappingIndexs = [];
        var c=0;
        for(var i=0; i < data.vm.AttributeMappings.length; i++)
        {
           if(data.vm.AttributeMappings[i].MetadataSetFieldId <= 0)
            {
               emptyAttributeMappingIndexs[c] = i;
               c++;
            }
        }

        //remove the empty attrobute mappings
         for(var i=0; i < emptyAttributeMappingIndexs.length; i++)
        {
            data.vm.AttributeMappings.splice(emptyAttributeMappingIndexs[i], 1);
        }

        var pageForm = $("#@(context) > form");

        var xhr = new XMLHttpRequest();
        xhr.open("post", pageForm.attr("action"), )

        var form = document.createElement("form");
        form.setAttribute("method", "POST");
        form.setAttribute("action", pageForm.attr("action"), true);
        xhr.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');

        xhr.onload = function (result) {
            delete @context;
            delete @(context)Js;
            document.open("text/html", "replace");
            document.write(xhr.response);
            document.close();
        }

        xhr.send(JSON.stringify(data));
    }

</script>
