@model Catfish.Core.Models.Collection
@using Catfish.Areas.Manager.Models.ViewModels

@{  ViewBag.Title = Model.Id > 0 ? "Edit Collection" : "Create Collection"; }

@section HEAD
{
    <script type="text/javascript" src="~/Scripts/knockout-3.1.0.js"></script>
    <script type="text/javascript" src="~/Scripts/knockout.mapping-latest.js"></script>
    <script type="text/javascript" src="~/Scripts/perpetuum.knockout.js"></script>
    <link rel="stylesheet" type="text/css" href="~/Content/Css/catfish.css">
}

@section Toolbar {
    @if (ViewBag.SelectEntityViewModel != null)
    {
        @Html.Partial("Partial/koEditToolbar")
    }
    else
    {

        @Html.Partial("Partial/EditToolbar", Model, new ViewDataDictionary() { { "entityTypeId", Model.EntityTypeId } })
    }
}

<div class="grid_12">
    <div class="box">

        @if (ViewBag.SelectEntityViewModel != null)
        {
            @Html.Partial("Partial/SelectEntityType", ViewBag.SelectEntityViewModel as SelectEntityTypeViewModel, new ViewDataDictionary() { { "controller", "collections" } })
        }
        else
        {
            using (Html.BeginForm("Edit", "Collections", FormMethod.Post))
            {
                @Html.Partial("Partial/EditEntity")
            }
        }
    </div>
</div>

@*@using (Html.BeginForm()) {

    @Html.HiddenFor(m => m.Id)
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    //for model binding
    @Html.Hidden("ModelType", Model.GetType().AssemblyQualifiedName, new Dictionary<string, object>()
    {
       {"class", "model-type"}
    })

    @Html.HiddenFor(m => m.EntityTypeId)


    //Rendering the metadata sets through the Entity.cshtml shared editor template 
    @Html.EditorFor(m => m, "Entity")


    <div id="child-items">
        <h3>Child Items</h3>
        @{  //@Html.DropDownList("parentCollection", (IEnumerable<SelectListItem>)ViewBag.Collections, "No Parent Collection")
            }

            Use Knockout MVC to render the ViewBag.ChildItems object.<br />
        - hidden field for Active entity id<br />
        - one list for LinkedEntities array<br />
        - one list for AllEntities array<br />
        - an Add button => calls CollectionController.AddItems method ==> this method should add the selected items to the LinkedEntities array and return the updated view model<br />
        - a Remove buttonn => calls CollectionController.RemoveItems method ==> xxxxx<br />
        - selecting entities from either list should put them to the SelectedList array.<br />

        @{
            List<EntityAssociationViewModel> associationList = ViewBag.associationList as List<EntityAssociationViewModel>;

            for (var i = 0; i < associationList.Count; ++i)
            {
                <br /> <br />
                <h3>Association @i</h3>
                @Html.EditorFor(m => associationList[i], new {  })
            }
        }        

    </div>

}*@


