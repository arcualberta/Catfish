@model Catfish.Areas.Manager.Models.ViewModels.FormBuilderViewModel
@using PerpetuumSoft.Knockout
@using Catfish.Areas.Manager.Models.ViewModels
@using Catfish.Core.Models.Data

@{
    var context = "ctx_" + Guid.NewGuid().ToString("N");
    var ko = Html.CreateKnockoutContext(context);
    string controller = ViewData["controller"] as string;
    string saveAction = ViewData["action"] as string;
}

<div id="@context">
    @using (ko.Html.Form(saveAction, controller, null, new { id = context + "Form" }))
    {
        <div class="grid_12">
            <div class="box">
                <div class="title">
                    <h2>Basic Information</h2>
                    <div class="bs right">
                        <span @ko.Bind.Visible(m => m.Status == KoBaseViewModel.eStatus.Success) style="display: none;" class="alert alert-success">Success!</span>
                        <span @ko.Bind.Visible(m => m.Status == KoBaseViewModel.eStatus.Error) style="display: none;" class="alert alert-danger">Error!</span>
                        @ko.Html.Button("Save", saveAction, controller, new { }, new { @class = "save" })
                    </div>
                </div>
                <div class="inner">
                    @ko.Html.TextBox(f => f.Guid, new { style = "display:none" })
                    <ul class="form form-custom">
                        <li>
                            <label class="control-label col-md-2">Name</label>
                            <div class="input">@ko.Html.TextBox(m => m.Name, new { @id = "Name" })</div>
                        </li>
                        <li>
                            <label class="control-label col-md-2">Description</label>
                            <div class="input">@ko.Html.TextArea(m => m.Description, new { @id = "Description" })</div>
                        </li>
                    </ul>
                </div>
            </div>

            <div id="fields-container">
                @using (var field = ko.Foreach(m => m.Fields))
                {
                    <div class="box field-entry">
                        <div class="title">
                            @field.Html.Span(f => f.TypeLabel)
                            <div class="bs right">
                                <span @field.Bind.Visible(m => m.Status == KoBaseViewModel.eStatus.Error) style="display: none;" class="alert alert-danger">Error!</span>
                                @ko.Html.Button("", "Move", controller, new { idx = @field.GetIndex(), step = -1 }, new { @class = "glyphicon glyphicon glyphicon-arrow-up" })
                                @ko.Html.Button("", "Move", controller, new { idx = @field.GetIndex(), step = 1 }, new { @class = "glyphicon glyphicon glyphicon-arrow-down" })
                                @ko.Html.Button("", "RemoveField", controller, new { idx = @field.GetIndex() }, new { @class = "glyphicon glyphicon-remove" })
                            </div>
                        </div>
                        @field.Html.TextBox(f => f.Guid, new { style = "display:none" })
                        <div class="inner">
                            <ul class="form">
                                <li>
                                    @using (field.If(f => f.IsPageBreak == true))
                                    {
                                        <label class="control-label">Title</label>
                                    }
                                    @using (field.If(f => f.IsPageBreak == false))
                                    {
                                        <label class="control-label">Name</label>
                                    }
                                    <div class="input">
                                        @using (var name = field.Foreach(f => f.Name))
                                        {
                                            @name.Html.Span(f => "Kamal");
                                            <div> test</div>
                                            <div class="languageInputField">
                                                @name.Html.TextBox(n => n.LanguageCode, new { style = "display:none" })
                                                @name.Html.Span(n => n.LanguageLabel, new { @class = "lang-label" })
                                                @name.Html.TextBox(n => n.Value, new { @class = "input-field" })
                                            </div>
                                        }
                                    </div>
                                </li>
                                @using (field.If(f => ko.Model.ShowFieldDescriptions || f.IsPageBreak))
                                {
                                    <li>
                                        <label class="control-label col-md-2">Description</label>
                                        <div class="input">
                                            @using (var name = field.Foreach(f => f.Description))
                                            {
                                                <div class="languageInputField">
                                                    @name.Html.TextBox(n => n.LanguageCode, new { style = "display:none" })
                                                    @name.Html.Span(n => n.LanguageLabel + ": ", new { @class = "lang-label" }) @name.Html.TextArea(n => n.Value, new { @class = "input-field" })
                                                </div>
                                            }
                                        </div>
                                    </li>
                                }
                                @using (field.If(f => f.IsOptionField == true))
                                {
                                    <li>
                                        <label class="control-label col-md-2">Options</label>
                                        <div class="input field-desc">
                                            <span>Please define options, one per line below</span>
                                        </div>
                                        <div class="input">
                                            @using (var option = field.Foreach(f => f.MultilingualOptionSet))
                                            {
                                                <div class="languageInputField">
                                                    @option.Html.TextBox(n => n.LanguageCode, new { style = "display:none" })
                                                    @option.Html.Span(n => n.LanguageLabel + ": ", new { @class = "lang-label" }) @option.Html.TextArea(n => n.Value, new { @class = "input-field" })
                                                </div>
                                            }
                                        </div>
                                    </li>
                                }
                                @using (field.If(f => f.IsPageBreak == false))
                                {
                                    <li>
                                        <label class="control-label col-md-2">Required</label>
                                        <div class="input">
                                            @field.Html.CheckBox(f => f.IsRequired, new { @class = "field-is-required" })
                                        </div>
                                    </li>
                                }
                                <li>
                                    <label class="control-label col-md-2">Attached files</label>
                                    <div class="form-view">
                                        @field.Html.Span(f => f.Files.Count)
                                        @*@using (KnockoutForeachContext<DataFile> fileViewModel = field.Model.Files.ForEach(f => f))*@
                                        @*                                        @using (var file = field.Foreach(f => f.FileThings))*@
                                        @*@using (var file = field.Foreach(f => f.Files))
                                        {
                                            @file.Html.Span(f => "Kamal");
                                        }*@
                                        @* XXX Change controller to file upload *@
                                        @Html.Partial("Partial/FileAttachment", field,
        new ViewDataDictionary{
                               { "UploadApiUrl", @Url.Action("upload", "items")},
                               { "DeleteApiUrl",  @Url.Action("deleteCashedFile", "items")},
                               { "ParentId", Model.Id },
                               { "Controller", "items" }
        })

                                        @*@if (field.Model != null)
        {
        @Html.EditorFor(m => field.Model.Attachment,
                 new
                 {
                     UploadApiUrl = @Url.Action("upload", "items"),
                     DeleteApiUrl = @Url.Action("deleteCashedFile", "items"),
                     Files = field.Model.Files,
                     ParentId = Model.Id,
                     Controller = "items"
                 })
        }*@
                                    </div>
                                </li>
                            </ul>
                        </div>
                    </div>
                }
            </div>
            <div id="fields-container">
                <div class="right">
                    @ko.Html.DropDownList(m => m.FieldTypes, new { id = "field-type-selector" }, ft => ft.Label).SelectedOptions(m => m.SelectedFieldTypes)
                    @ko.Html.Button("Add Field", "AddField", controller, new { }, new { id = "add-field" }).Enable(m => m.SelectedFieldTypes.Count > 0 && m.SelectedFieldTypes[0].Label != "")
                </div>
            </div>
        </div>
    }
</div>

@ko.Initialize(Model)
<script type="text/javascript">
  @(context).uploadFileKoWrapper = function (data, containerId, uploadApiUrl, deleteApiUrl, fieldFileGuids) {
      uploadFileKo(containerId, uploadApiUrl, deleteApiUrl, fieldFileGuids, data)
  };
</script>


@ko.Apply(Model, context)
