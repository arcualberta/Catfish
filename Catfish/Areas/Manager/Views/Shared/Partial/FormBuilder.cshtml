@model Catfish.Areas.Manager.Models.ViewModels.FormBuilderViewModel
@using PerpetuumSoft.Knockout
@using Catfish.Areas.Manager.Models.ViewModels
@using Catfish.Core.Models.Data

@{
    var context = "ctx_" + Guid.NewGuid().ToString("N");
    var ko = Html.CreateKnockoutContext(context);
    string controller = ViewData["controller"] as string;
    string saveAction = ViewData["action"] as string;
}

@if (Model.redirect)
{
    <script type="text/javascript">window.location = "@Model.url";</script>
}

@ko.Initialize(Model)

@section scripts {
    <script>
        $(function () {
            $(".progressBar").hide();
            $(".messageBox").hide();
        });
    </script>
}
@helper RenderFileAttachments(KnockoutContext<FormFieldViewModel> field)
    {
        string containerId = Guid.NewGuid().ToString();
        string uploadApiUrl = Url.Action("upload", "items");
        string deleteApiUrl = Url.Action("deleteCashedFile", "items");

        <div @field.Bind.Attr("id", m => m.Guid) class="inner file-upload" style="clear:both">
            <div class="thumbnailPanel">
                @using (KnockoutForeachContext<FileViewModel> fileViewModel = field.Foreach(f => f.Files))
                {
                <div class="fileThumbnail" @fileViewModel.Bind.Attr("id", m => m.Guid)>
                    <div class="img" @fileViewModel.Bind.Style("backgroundImage", (m => m.ThumbnailUrl))></div>
                    <div class="label"><a @fileViewModel.Bind.Attr("href", f => f.Url)>@fileViewModel.Html.Span(s => s.FileName)</a></div>
                    <div>@fileViewModel.Html.TextBox(m => m.Label).Attr("placeholder", m => "Label")</div>
                    
                    @using (fileViewModel.If(m => m.ShowPlayerControls))
                    {
                    <div><span>Play once</span>@fileViewModel.Html.CheckBox(m => m.PlayOnce)</div>    
                    }                                                          
                </div>
                }
            </div>
            <div class="inner" style="clear:both">
                <div class="alert alert-danger messageBox"></div>

                <input type='file' class="uploadField" name="files" multiple="multiple" />
                <input data-bind="click: function(data){$root.uploadFileKoWrapper(data, '@containerId', '@uploadApiUrl', '@deleteApiUrl', 'Model_FieldFileGuids')}" type="button" value="Upload" class="uploadButton" />
                <div class="progressBar" hidden><progress></progress></div>
            </div>
        </div>
}

<div id="@context" class="form-builder">
    @*@using (ko.Html.Form(saveAction, controller, null, new { id = context + "Form" }))*@
    @using (Html.BeginForm(saveAction, controller, new { id = Model.Id }, FormMethod.Post))
    {
        <div class="grid_12">
            <div class="box">
                <div class="title">
                    <h2>Basic Information</h2>
                    <div class="bs right">
                        @*<span @ko.Bind.Visible(m => m.Status == KoBaseViewModel.eStatus.Success) style="display: none;" class="alert alert-success">Success!</span>
                        <span @ko.Bind.Visible(m => m.Status == KoBaseViewModel.eStatus.Error) style="display: none;" class="alert alert-danger">Error!</span>
                        @ko.Html.Button("Save", saveAction, controller, new { }, new { @class = "save" })*@
                    </div>
                </div>
                <div class="inner">
                    @ko.Html.TextBox(f => f.Guid, new { style = "display:none" })
                    <ul class="form form-custom">
                        <li>
                            <label class="control-label col-md-2">Name</label>
                            <div class="input">@ko.Html.TextBox(m => m.Name, new { @id = "Name" })</div>
                        </li>
                        <li>
                            <label class="control-label col-md-2">Description</label>
                            <div class="input">@ko.Html.TextArea(m => m.Description, new { @id = "Description" })</div>
                        </li>
                    </ul>
                </div>
            </div>

            <div id="fields-container">
                @using (var field = ko.Foreach(m => m.Fields))
                {
                    <div class="box field-entry">
                        <div class="title">
                            @field.Html.Span(f => f.TypeLabel)
                            <div class="bs right">
                                <span @field.Bind.Visible(m => m.Status == KoBaseViewModel.eStatus.Error) style="display: none;" class="alert alert-danger">Error!</span>
                                @ko.Html.Button("", "Move", controller, new { idx = @field.GetIndex(), step = -1 }, new { @class = "glyphicon glyphicon glyphicon-arrow-up" })
                                @ko.Html.Button("", "Move", controller, new { idx = @field.GetIndex(), step = 1 }, new { @class = "glyphicon glyphicon glyphicon-arrow-down" })
                                @ko.Html.Button("", "RemoveField", controller, new { idx = @field.GetIndex() }, new { @class = "glyphicon glyphicon-remove" })
                            </div>
                        </div>
                        @field.Html.TextBox(f => f.Guid, new { style = "display:none" })
                        <div class="inner">
                            <ul class="form">
                                <li>
                                    @using (field.If(f => f.IsPageBreak == true))
                                    {
                                        <label class="control-label">Title</label>
                                    }
                                    @using (field.If(f => f.IsPageBreak == false))
                                    {
                                        <label class="control-label">Name</label>
                                    }
                                    <div class="input">
                                        @using (var name = field.Foreach(f => f.Name))
                                        {

                                            <div class="languageInputField">
                                                @name.Html.TextBox(n => n.LanguageCode, new { style = "display:none" })
                                                @name.Html.Span(n => n.LanguageLabel, new { @class = "lang-label" })
                                                @name.Html.TextBox(n => n.Value, new { @class = "input-field" }).Attr("name", m => "Name_" + m.LanguageCode)
                                            </div>
                                        }
                                    </div>
                                </li>
                                @using (field.If(f => ko.Model.ShowFieldDescriptions || f.IsPageBreak))
                                {
                                    <li>
                                        <label class="control-label col-md-2">Description</label>
                                        <div class="input">
                                            @using (var name = field.Foreach(f => f.Description))
                                            {
                                                <div class="languageInputField">
                                                    @name.Html.TextBox(n => n.LanguageCode, new { style = "display:none" })
                                                    @name.Html.Span(n => n.LanguageLabel + ": ", new { @class = "lang-label" }) @name.Html.TextArea(n => n.Value, new { @class = "input-field" }).Attr("name", m => "Description_" + m.LanguageCode)
                                                </div>
                                            }
                                        </div>
                                    </li>
                                }
                                @using (field.If(f => f.IsOptionField == true))
                                {
                                    <li>
                                        <label class="control-label col-md-2">Options</label>
                                        <div class="input field-desc">
                                            <span>Please define options, one per line below</span>
                                        </div>
                                        <div class="input">
                                            @using (var option = field.Foreach(f => f.MultilingualOptionSet))
                                            {
                                                <div class="languageInputField">
                                                    @option.Html.TextBox(n => n.LanguageCode, new { style = "display:none" })
                                                    @option.Html.Span(n => n.LanguageLabel + ": ", new { @class = "lang-label" }) @option.Html.TextArea(n => n.Value, new { @class = "input-field" }).Attr("name", m => "Option_" + m.LanguageCode)
                                                </div>
                                            }
                                        </div>
                                    </li>
                                }
                                @using (field.If(f => f.IsExternalMediaField == true))
                                {
                                    <li>
                                        <label class="control-label col-md-2">Source</label>
                                        <div class="input">@field.Html.TextBox( f => f.Min, new { @class = "input-field" })</div>
                                    </li>
                                    <li>
                                        <label class="control-label col-md-2">Type</label>
                                        <div class="input">
                                            <select @field.Bind.Value(f => f.MimeType)>
                                                <option></option>
                                                @foreach(var e in Enum.GetNames(typeof(CFDataFile.MimeType)))
                                                {
                                                    <option value="@e">@e</option>
                                                }
                                            </select>
                                        </div>
                                    </li>

                                    using (var mediaProperty = field.Foreach(f => f.MediaProperties))
                                    {
                                        <li>
                                            <label class="control-label col-md-2" @mediaProperty.Bind.Text(mp => mp.Key)></label>
                                            <div class="input">
                                                @using (var value = mediaProperty.With(mp => mp.Value))
                                                {
                                                    @value.Html.CheckBox(v => v.Item2, new {@class = "field-is-required" })
                                                }
                                            </div>
                                        </li>
                                                    }
                                                }
                                @using (field.If(f => f.IsSliderField == true))
                                {
                                    <li>
                                        <label class="control-label col-md-2">Min</label>
                                        <div class="input">
                                            @field.Html.TextBox(f => f.Min, new { @class = "input-field", type = "number" })
                                        </div>
                                    </li>
                                    <li>
                                        <label class="control-label col-md-2">Max</label>
                                        <div class="input">
                                            @field.Html.TextBox(f => f.Max, new { @class = "input-field", type = "number" })
                                        </div>
                                    </li>
                                    <li>
                                        <label class="control-label col-md-2">Step</label>
                                        <div class="input">
                                            @field.Html.TextBox(f => f.Step, new { @class = "input-field", type = "number" })
                                        </div>
                                    </li>
                                    <li>
                                        <label class="control-label col-md-2">Min Label</label>
                                        <div class="input">
                                            @field.Html.TextBox(f => f.MinLabel, new { @class = "input-field" })
                                        </div>
                                    </li>
                                    <li>
                                        <label class="control-label col-md-2">Max Label</label>
                                        <div class="input">
                                            @field.Html.TextBox(f => f.MaxLabel, new { @class = "input-field" })
                                        </div>
                                    </li>
                                }
                                @using (field.If(f => f.IsPageBreak == false))
                                {
                                    <li>
                                        <label class="control-label col-md-2">Required</label>
                                        <div class="input">
                                            @field.Html.CheckBox(f => f.IsRequired, new { @class = "field-is-required" })
                                        </div>
                                    </li>
                                }
                                @using (field.If(f => f.IsTextArea == true))
                                {
                                    <li>
                                        <label class="control-label col-md-2">Is Rich Text</label>
                                        <div class="input">
                                            @field.Html.CheckBox(f => f.IsRichText, new { @class = "field-is-richtext" })
                                        </div>
                                    </li>
                                }
                             @using (field.If(f => f.IsTextField == true))
                             {
                                    <li>
                                        <label class="control-label col-md-2">Is Multiple</label>
                                        <div class="input">
                                            @field.Html.CheckBox(f => f.IsMultiple, new {@class="field-is-multiple" })
                                        </div>
                                    </li>
                             }
                                <li>
                                    <label class="control-label col-md-2">Attached files</label>
                                    <div class="form-view">
                                        @RenderFileAttachments(field)
                                    </div>
                                </li>
                            </ul>
                        </div>
                    </div>
                                }
            </div>
            <div id="fields-container">
                <div class="right">
                    @ko.Html.DropDownList(m => m.FieldTypes, new { id = "field-type-selector" }, ft => ft.Label).SelectedOptions(m => m.SelectedFieldTypes)
                    @ko.Html.Button("Add Field", "AddField", controller, new { }, new { id = "add-field" }).Enable(m => m.SelectedFieldTypes.Count > 0 && m.SelectedFieldTypes[0].Label != "")
                </div>
            </div>
        </div>
    }
</div>


<script type="text/javascript">
  @(context).uploadFileKoWrapper = function (data, containerId, uploadApiUrl, deleteApiUrl, fieldFileGuids) {
      uploadFileKo(containerId, uploadApiUrl, deleteApiUrl, fieldFileGuids, data)
    };

    function getFormBuilderContext() {
        return @(context);
    }

    function getFormBuilderForm() {
        return $("#@(context) > form");
    }

    function deleteFormBuilderContext() {
        delete @context;
        delete @(context)Js;
    }
</script>


@ko.Apply(Model, context)
