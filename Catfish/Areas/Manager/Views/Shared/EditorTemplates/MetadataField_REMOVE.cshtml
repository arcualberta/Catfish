@model Catfish.Core.Models.Forms.FormField
@using Catfish.Core.Models.Attributes

<div class="box field-entry">
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @*@Html.HiddenFor(model => model.Id, new { @class = "field-id" })*@
    @*@Html.HiddenFor(model => model.MetadataSetId, new Dictionary<string, object>()
    {
        {"class", "metadataset-id" }
    })*@
    @Html.Hidden("ModelType", Model.GetType().AssemblyQualifiedName, new Dictionary<string, object>()
    {
       {"class", "model-type"}
    })

    @Html.HiddenFor(m => m.Guid)

    @{
        TypeLabelAttribute att = Attribute.GetCustomAttribute(Model.GetType(), typeof(TypeLabelAttribute)) as TypeLabelAttribute;
        string title = att == null ? Model.GetType().ToString() : att.Name;
    }
    <div class="title contentright"><select class="template-selector"></select> <button class="remove-field" type="button">x</button></div>
    <div class="inner">
        <ul class="form">
            <li>
                @Html.LabelFor(model => model.MultilingualName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="input">
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control field-name" } })
                    @Html.ValidationMessageFor(model => model.Name, "This is a required field", new { @class = "text-danger" })
                </div>
            </li>

            <li>
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="input">
                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control field-description" } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </li>

            <li>
                @Html.LabelFor(model => model.IsRequired, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="input">
                    @Html.EditorFor(model => model.IsRequired, new { htmlAttributes = new { @class = "form-control field-is-required" } })
                    @Html.ValidationMessageFor(model => model.IsRequired, "", new { @class = "text-danger" })
                </div>
            </li>
        </ul>
    </div>
</div>
