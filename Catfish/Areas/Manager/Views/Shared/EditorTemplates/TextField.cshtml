@model Catfish.Core.Models.Forms.TextField

@Html.Hidden("ModelType", Model.GetType().AssemblyQualifiedName, new Dictionary<string, object>()
{
    {"class", "model-type"}
})

@{
    List<Catfish.Core.Models.TextValue> emptyValues = new List<Catfish.Core.Models.TextValue>();
   
    foreach (var l in Model.MultilingualName) 
    {
        emptyValues.Add(new Catfish.Core.Models.TextValue(l.LanguageCode, l.LanguageLabel, string.Empty));
    }

    ViewBag.NumLangs = Model.MultilingualName.Count();


}
@Html.HiddenFor(m => m.Guid)

@Html.HiddenFor(m => m.IsRequired)
<div class="form-field-name">
    @Html.Label(string.IsNullOrEmpty(Model.Name) ? "" : Model.Name, new { @name = "label" })
    @if (Model.IsRequired)
    {
        <span class="requiredFieldSymbol">*</span>
    }
</div>

<div class="form-field-value">
    @{ bool showLanguageLabel = Model.Values.Count() > 1;
        int countLangGrp = Model.Values.Count() / Model.MultilingualName.Count(); //number of languages set
                                                                                  //string langGrpId = "langGrp_" + countLangGrp;
        int langCount = Model.MultilingualName.Count();
        int grpCount = 1;
        int ctn = langCount;
        string divElGrpId = "";
        //wrap lang group in a div
        for (var i = 0; i < Model.Values.Count; i++)
        {

            if (ctn == langCount)
            {
                divElGrpId = "elGrpId_" + grpCount + i;
                if (Model.IsMultiple)
                {
                    @Html.Raw("<div id=\""+divElGrpId +"\" class=\"elementLangGroup multiElGroup\">") //id=\"elGrpId_"+@grpCount+@i+"\"
                }
                else { @Html.Raw("<div id=\""+divElGrpId + "\" class=\"elementLangGroup\">")}

            }
            @Html.EditorFor(m => Model.Values[i], new { ShowLanguageLabel = showLanguageLabel })
            if (ctn == 1)
            {
                if(Model.IsMultiple && grpCount > 1)
                {
                    @Html.Raw("<span class=\"glyphicon glyphicon-remove removeLangGroup\" onclick=\"removeSection('" +divElGrpId + "'); return false; \"></span></div>")
                }
                else { @Html.Raw("</div>")}

                grpCount++;
                ctn = langCount;
            }
            else { ctn--; }
        }

    }

           @*@Html.EditorFor(m => m.Values, new { ShowLanguageLabel = showLanguageLabel })*@
            @Html.HiddenFor(m => m.IsMultiple)
            @{
                if (Model.IsMultiple)
                {
                    var elName = "'" + Html.NameFor(m => m.Values) + "'";
                    string addDivId = "addEntry_" + Html.NameFor(m => m.Values);
                    addDivId = addDivId.Replace('[', '_');
                    addDivId = addDivId.Replace(']', '_');
                    addDivId = addDivId.Replace('.', '_');

                    @*<div id="addTextFieldEntry"><button class="ButtonTextFieldAddEntry" onclick="AddField(); return false;">Add Entry</button></div>*@
                    <div id="@addDivId"><button class="ButtonTextFieldAddEntry" onclick="AddField('@addDivId',@elName); return false;">Add Entry</button></div>
                }
            }
        </div>

<script type="text/javascript">


    function removeSection(secId)
    {
         $("#" + secId).remove();
         //reorder the index
         let elName = '@Html.Raw(Html.NameFor(m => m.Values))';


         $(".multiElGroup").each(function(divIndex, el){
            if(el.id.split("_")[1] > secId.split("_")[1])
            {

                 //reindex name for ModelType and Language
                 $(this).find('input').each(function(i, c)
                    {
                        let atrName = $(this).attr('name');
                        let attrs = atrName.split(".");
                        let index = attrs[attrs.length -2].match(/\d+/);
                        attrs[attrs.length -2] = "Values[" + (index - @langCount) + "]";
                        $(this).attr('name', attrs.join(".") );

                   });

            }
         });

    }
    var countClick=1;
    var FieldName="";
    function AddField(addDivId, elName) 
    {
      if(FieldName !== elName)
        {
           FieldName = elName;
           countClick = 1;
        }
      var langs =  @Html.Raw(Json.Encode(Model.MultilingualName.ToArray()));

       var uniqueIndex= @countLangGrp * @langCount * countClick;
        var randId = Math.random().toString(36).substring(2) + (new Date()).getTime().toString(36);
       let elGrpId ="langGrp_" + ( @countLangGrp +countClick) + "_" + randId;
       var elToAdd='<div id="'+ elGrpId +'" class="elementLangGroup  multiElGroup">';

       for(var i=0; i<@langCount; i++)
       {

         elToAdd = elToAdd +
                      '<input class="model-type"  name="' + elName + '[' + uniqueIndex +'].ModelType" type="hidden" value="Catfish.Core.Models.TextValue, Catfish.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null">'+
                      '<input  name="' + elName + '[' + uniqueIndex +'].LanguageCode" type="hidden" value="' + langs[i].LanguageCode + '">' +
                     '<div class="languageInputField">' +
                        '<span class="lang-label">' + langs[i].LanguageLabel +': </span>' +
                        '<input class="text-box single-line" name="' + elName + '[' + uniqueIndex + '].Value" type="text" value=""></div>';
         uniqueIndex++;
      }
      elToAdd= elToAdd +'<span class="glyphicon glyphicon-remove removeLangGroup" onclick="removeSection(\''+ elGrpId + '\'); return false;" ></span></div>';
    
     $("#"+addDivId).before(elToAdd);
     countClick++;

    }

</script>
<style>
    .elementLangGroup {
        border: 1px solid lightgrey;
        width:50%;
    }
    .removeLangGroup{
        float:right;
        margin-top: -50px;
    }
</style>