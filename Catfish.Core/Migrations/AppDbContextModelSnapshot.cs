// <auto-generated />
using System;
using Catfish.Core.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Catfish.Core.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Catfish.Core.Models.Entity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("xml");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PrimaryCollectionId")
                        .HasColumnName("PrimaryCollectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryCollectionId");

                    b.ToTable("Catfish_Entities");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Entity");
                });

            modelBuilder.Entity("Catfish.Core.Models.Relationship", b =>
                {
                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ObjctId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Predicate")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubjectId", "ObjctId");

                    b.HasIndex("ObjctId");

                    b.ToTable("Catfish_Relationships");
                });

            modelBuilder.Entity("Catfish.Core.Models.XmlModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("xml");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Catfish_XmlModels");

                    b.HasDiscriminator<string>("Discriminator").HasValue("XmlModel");
                });

            modelBuilder.Entity("Catfish.Core.Models.Collection", b =>
                {
                    b.HasBaseType("Catfish.Core.Models.Entity");

                    b.ToTable("Catfish_Entities");

                    b.HasDiscriminator().HasValue("Collection");
                });

            modelBuilder.Entity("Catfish.Core.Models.EntityTemplate", b =>
                {
                    b.HasBaseType("Catfish.Core.Models.Entity");

                    b.Property<string>("TargetType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemplateName")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Catfish_Entities");

                    b.HasDiscriminator().HasValue("EntityTemplate");
                });

            modelBuilder.Entity("Catfish.Core.Models.Item", b =>
                {
                    b.HasBaseType("Catfish.Core.Models.Entity");

                    b.ToTable("Catfish_Entities");

                    b.HasDiscriminator().HasValue("Item");
                });

            modelBuilder.Entity("Catfish.Core.Models.Contents.Form", b =>
                {
                    b.HasBaseType("Catfish.Core.Models.XmlModel");

                    b.ToTable("Catfish_XmlModels");

                    b.HasDiscriminator().HasValue("Form");
                });

            modelBuilder.Entity("Catfish.Core.Models.Contents.MetadataSet", b =>
                {
                    b.HasBaseType("Catfish.Core.Models.XmlModel");

                    b.ToTable("Catfish_XmlModels");

                    b.HasDiscriminator().HasValue("MetadataSet");
                });

            modelBuilder.Entity("Catfish.Core.Models.CollectionTemplate", b =>
                {
                    b.HasBaseType("Catfish.Core.Models.EntityTemplate");

                    b.ToTable("Catfish_Entities");

                    b.HasDiscriminator().HasValue("CollectionTemplate");
                });

            modelBuilder.Entity("Catfish.Core.Models.ItemTemplate", b =>
                {
                    b.HasBaseType("Catfish.Core.Models.EntityTemplate");

                    b.ToTable("Catfish_Entities");

                    b.HasDiscriminator().HasValue("ItemTemplate");
                });

            modelBuilder.Entity("Catfish.Core.Models.Entity", b =>
                {
                    b.HasOne("Catfish.Core.Models.Collection", "PrimaryCollection")
                        .WithMany()
                        .HasForeignKey("PrimaryCollectionId");
                });

            modelBuilder.Entity("Catfish.Core.Models.Relationship", b =>
                {
                    b.HasOne("Catfish.Core.Models.Entity", "Objct")
                        .WithMany("ObjectRelationships")
                        .HasForeignKey("ObjctId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Catfish.Core.Models.Entity", "Subject")
                        .WithMany("SubjectRelationships")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
