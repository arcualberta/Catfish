using NUnit.Framework;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Support.UI;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Catfish.Tests.Views.Regions
{
    [TestFixture(typeof(ChromeDriver))]
    public class FormContainerTest<TWebDriver> where TWebDriver : IWebDriver, new()
    {
        const string PAGE_TYPE = "TESTFORMPAGETYPE";
        const string FORM = "TESTFORM";
        const string FORM_PAGE = "TESTFORMPAGE";

        private IWebDriver Driver;
        private string ManagerUrl;
        private string FormUrl;
        
        [SetUp]
        public void SetUp()
        {
            this.Driver = new TWebDriver();
            this.ManagerUrl = ConfigurationManager.AppSettings["ServerUrl"] + "manager";
            this.FormUrl = ConfigurationManager.AppSettings["ServerUrl"] + "testform";

            Login();
            VerifyPageTypeExists();
            VerifyFormExists();
        }

        [TearDown]
        public void TearDown()
        {
            this.Driver.Close();
        }

        private void Login()
        {
            this.Driver.Navigate().GoToUrl(ManagerUrl);
            this.Driver.FindElement(By.Id("login")).SendKeys(ConfigurationManager.AppSettings["AdminLogin"]);
            this.Driver.FindElement(By.Name("password")).SendKeys(ConfigurationManager.AppSettings["AdminPassword"]);
            this.Driver.FindElement(By.TagName("button")).Click();
        }

        private IReadOnlyList<IWebElement> GetFieldEntries(string fieldEntryTitle)
        {
            IReadOnlyList<IWebElement> entries = null;

            WebDriverWait webDriver = new WebDriverWait(Driver, TimeSpan.FromSeconds(15));
            webDriver.Until(ExpectedConditions.VisibilityOfAllElementsLocatedBy(By.ClassName("field-entry")));

            var allElementTypes = Driver.FindElements(By.ClassName("field-entry"));
            foreach (IWebElement e in allElementTypes)
            {
                if (e.FindElement(By.ClassName("title")).Text.Equals(fieldEntryTitle))
                {
                    entries = e.FindElements(By.ClassName("input-field"));
                    break;
                }
            }
            return entries;
        }

        private void AddFormField(string fieldType, bool isRequired)
        {
            SelectElement select = new SelectElement(this.Driver.FindElement(By.Id("field-type-selector")));
            select.SelectByText(fieldType);
            select.WrappedElement.SendKeys(Keys.Tab);
            this.Driver.FindElement(By.Id("add-field")).Click();

            IReadOnlyList<IWebElement> inputs = GetFieldEntries("Short text");
            if (inputs.Count > 0)
            {
                inputs[0].SendKeys(MetadataTestValues.FieldName + " text Eng");
                inputs[1].SendKeys(MetadataTestValues.FieldName + " text Fr");
                inputs[2].SendKeys(MetadataTestValues.FieldName + " text Sp");
            }
        }

        private void VerifyFormExists()
        {
            try
            {
                this.Driver.Navigate().GoToUrl(ManagerUrl + "/FormTemplates");
                var element = this.Driver.FindElement(By.LinkText(FORM));
            }
            catch (NoSuchElementException ex)
            {
                this.Driver.Navigate().GoToUrl(ManagerUrl + "/FormTemplates/edit");
                this.Driver.FindElement(By.Id("Name")).SendKeys(FORM);
                this.Driver.FindElement(By.Id("Description")).SendKeys("This is an autogenerated form template to test the form page.");
                this.Driver.FindElement(By.Id("Description")).SendKeys(Keys.Tab);

                AddFormField("Short text", true);

                WebDriverWait wait = new WebDriverWait(Driver, TimeSpan.FromSeconds(15));
                wait.Until(ExpectedConditions.VisibilityOfAllElementsLocatedBy(By.ClassName("save")));

                IWebElement btnSave = this.Driver.FindElement(By.ClassName("save"));
                IJavaScriptExecutor jex = (IJavaScriptExecutor)Driver;

                jex.ExecuteScript("arguments[0].focus(); ", btnSave);
                btnSave.Click();
            }
        }

        private void VerifyPageTypeExists()
        {
            try
            {
                this.Driver.Navigate().GoToUrl(ManagerUrl + "/template/pagelist");
                var element = this.Driver.FindElement(By.LinkText(PAGE_TYPE));
            }catch(NoSuchElementException ex)
            {
                this.Driver.Navigate().GoToUrl(ManagerUrl + "/template/page");
                this.Driver.FindElement(By.Id("Template_Name")).SendKeys(PAGE_TYPE);
                this.Driver.FindElement(By.Id("Template_Description")).SendKeys("This is an autogenerated page template to test the form page.");
                this.Driver.FindElement(By.Id("newregionName")).SendKeys("Form Test");
                this.Driver.FindElement(By.Id("newregionInternalId")).SendKeys("form_test");
                this.Driver.FindElement(By.Id("newregionType")).Click();
                this.Driver.FindElement(By.CssSelector("option[value='Catfish.Models.Regions.FormContainer']")).Click();
                this.Driver.FindElement(By.Id("btnAddRegion")).Click();
                this.Driver.FindElement(By.CssSelector(".save.submit")).Click();
            }
        }

        [Test]
        public void TestBasicForm()
        {

        }
    }
}
